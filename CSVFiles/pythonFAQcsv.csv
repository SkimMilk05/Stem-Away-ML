,Title,Categories,Tags,Replies,Post,Comment
0,About the Python FAQ category,"FAQ,Python FAQ",,3,"
Python is a widely used, high-level, powerful programming language, with a wide range of uses from web development to data science. Sites like YouTube, Reddit, and Dropbox are powered by Python. This forum category covers FAQs on the Codecademy courses on Python.
","
A post was split to a new topic: Functions

"
1,How to select only last names?,"FAQ,Python FAQ",,65,"
Goal:
In this lesson, the second task requests that you take the list of author names and convert it to just a list of last names. Here I will break down and explain each step in that process to help those struggling with this task.
Note that this explanation spoils the solution and as such if you wish to solve it yourself you may not want to read this until you are satisfied having done it yourself. As such each code block is spoilered out and can be clicked to see the code.
Explanation
In order to break down how to solve this, we should identify the format our data is already in then what steps are necessary to get it into what we want. After the first task, you should have a list that looks like
['Audre Lorde', 'Gabriela Mistral', 'Jean Toomer', 'An Qi', 'Walt Whitman', 'Shel Silverstein', 'Carmen Boullosa', 'Kamala Suraiyya', 'Langston Hughes', 'Adrienne Rich', 'Nikki Giovanni']
It is a list of strings each containing a first and last name with a space in between. So we want to isolate the last names. There are other solutions but I will use the one hinted at. The steps involved:

Break the first and last name apart using .split()

Isolate the last name using a negative index
Create a new list of last names using .append()


So lets take the first step. We are already familiar with using .split() to break strings apart. This time we want to run it once on each item in the list, so we will use a for statement. In order to split the first and last name, the dividing character is a space ' ', but this is the default value for split so we can leave it without any parameters. This is what our code will look like so far:

for name in author_names:
  name.split()


This won’t work as is since we aren’t actually putting that split name anywhere, this will be addressed in step 3.
On to step two. In each iteration of the loop name.split() will spit out a list that looks like this ['firstname', 'lastname']. We don’t need to use the first name so we can use indexing to select the lastname. This can be done utilizing either [1] or [-1]. The advantage of [-1] is that if these names also had a middle name, or additional family names, only the last would be selected. Since name.split() returns the split list, we can add [-1] directly to it to instead return the chosen index item. Taking our return from ['firstname', 'lastname'] to just 'lastname'. Note that we are not indexing the string itself, which would return a single character but are instead indexing the list of two names.
Our code looks like this now:

for name in author_names:
  name.split()[-1]


Finally we need to send the names into a new list. This can be done by creating an empty list outside the for loop (so it isn’t rewritten each time) and using .append() as below:

author_last_names = []
for name in author_names:
  author_last_names.append(name.split()[-1])


I hope you’ve found this explanation useful. Please discuss below and ask any followup questions.
","
For the negative index, what is that mean? author_last_names.append (i.split()[-1])
In the script, I try below, but i still don’t know why and how it works. Please inform. Thank you
if [0] return first name. [-1] or [1] return last name.

we can use negative indexes to access the list from the right hand side, so -1 is the right most element in a list or string:
print ['a', 'b', 'c', 'd'][-1] #output: d

so -2 would give c

I see. Thank you so much

can someone explain what does the [-1] contributes to the code?
author_last_names = 
for name in author_names:
author_last_names.append(name.split()[1])
print(author_last_names)

-1 get the last element from a list. You use negative values to access the list from the right hand side.

authors = ""Audre Lorde, William Carlos Williams, Gabriela Mistral, Jean Toomer, An Qi, Walt Whitman, Shel Silverstein, Carmen Boullosa, Kamala Suraiyya, Langston Hughes, Adrienne Rich, Nikki Giovanni""

author_names = authors.split("","")
author_last_names = []
for i in author_names:
  temp = i.split( )[::-1]
  author_last_names.append(temp[0])
print(author_last_names)


Why doesn’t the -1 reference only the very last letter in the author’s names? Earlier in the lesson, we used -1 to select the very last letter in a string, but here it means the last name entirely.  I must be missing something.

If you have a list of names and you get the last name, then you’ll get a name
Your confusion seems to be more about what’s in your list/whateveritis than what -1 as an index means, ie you would see the same difference for index 0 which is a simpler case

Thanks for the quick response! After playing around a little bit, I think I figured it out.
authors = ""Audre Lorde, William Carlos Williams, Gabriela Mistral, Jean Toomer, An Qi, Walt Whitman, Shel Silverstein, Carmen Boullosa, Kamala Suraiyya, Langston Hughes, Adrienne Rich, Nikki Giovanni""

author_names = authors.split("", "")

print(author_names)

author_last_names = []
for name in author_names:
  author_last_names.append(name.split()[-1])
  
print(authors[-1])
  
print(author_names[-1])
  
print(author_last_names)

Those final three print lines helped me distinguish between the different kinds of selection. authors[-1] selects the last letter only, because authors is a single string.

I wouldn’t call them different kinds of selection. You’re asking differently typed values for their value at index -1, and they return some value they think is cool.
You’re asking the same way and they behave the same way. You’re just asking from different things.

Yes, I’m asking for the very last element in those lists in the same way each time,
but an element in the authors list is a single letter, whereas an element in the author_last_names list is the entire last name, correct?
Thanks again!

authors isn’t a list at all, and it’s not really a container either (it’s a bunch of text), but it can produce substrings so it does behave a bit like a container
The elements of a list is whatever you put in it, and the “elements” of a string is … more strings (characters, but there’s no character type).

I said list because early in this lesson, this was written:

A string can be thought of as a  list  of characters.
Like any other list, each character in a string has an index.]


codecademycapture.PNG817×808 46.8 KB


What they mean or should mean is that they both implement behaviours like iteration, access by index, concatenation, and whatever else.
But you can pretty quickly dismiss the idea that they are or can be thought of as lists if you try to do something that only the other one is capable of. Try to upcase a list. Or try to append to a string.
Many types implement those behaviours, but they won’t implement the same set of behaviours and they won’t necessarily mean the same things due to being different things.

Thank you very much for your clarification. That makes sense. That original tip (“They’re all lists!”) must have confused me slightly.

You can implement these behaviours yourself, for example, iteration and subscription (access by index)
class Derp:
    def __iter__(self):
        for _ in range(5):
            yield 'Meow'

    def __getitem__(self, key):
        return 'received key: {}'.format(key)


myvalue = Derp()  # create a Derp
print(myvalue[3])  # a string saying 3 was the key

for value in myvalue:
    print(value)  # 'Meow' 5 times in total

For python2 the first line should instead be:
class Derp(object):

The main thing to note is that it’s Derp that defines what happens, these things aren’t done to the values, rather it’s asked of them “please do this and that”
It’s also the the main idea in object oriented programming (values which are in charge of the data they contain and the behaviour they have), you can go right ahead and ignore all the other things that nobody really seems to be able to explain why it’s useful but will still say it is.




 nightfox0205:

author_names = authors.split("","") author_last_names =  for i in author_names: temp = i.split( )[::-1] author_last_names.append(temp[0]) print(author_last_names)


amazing… but how does it work? ```
[::-1]


If you are referencing -1 of a string it will return the last letter in the string, for example: str1 = ‘hello there’ , str1[-1] = e
if you are referencing -1 of a list containing strings it will return the last string in the list, for example: lst1 = [‘hello’, ‘there’] , lst1[-1] = there

Hi, first time poster. I had to see the solution for this one, and was wondering how an alternative would work so I tried the below:
author_last_names = 
for name in author_names:
author_last_names += name.split()[-1]
when I print author_last_names it prints each letter of the last names like: [‘L’, ‘o’, ‘r’, ‘d’, ‘e’, ‘M’, ‘i’, ‘s’, ‘t’, ‘r’, ‘a’, ‘l’, ‘T’, ‘o’, ‘o’, ‘m’, ‘e’, ‘r’, ‘Q’, ‘i’, ‘W’, ‘h’, ‘i’, ‘t’, ‘m’, ‘a’, ‘n’, ‘S’, ‘i’, ‘l’, ‘v’, ‘e’, ‘r’, ‘s’, ‘t’, ‘e’, ‘i’, ‘n’, ‘B’, ‘o’, ‘u’, ‘l’, ‘l’, ‘o’, ‘s’, ‘a’, ‘S’, ‘u’, ‘r’, ‘a’, ‘i’, ‘y’, ‘y’, ‘a’, ‘H’, ‘u’, ‘g’, ‘h’, ‘e’, ‘s’, ‘R’, ‘i’, ‘c’, ‘h’, ‘G’, ‘i’, ‘o’, ‘v’, ‘a’, ‘n’, ‘n’, ‘i’]
How would I correct this code?/Why does it split at each letter?
Thanks!
"
2,Why learn Python?,"FAQ,Python FAQ",q-a,38,"
Question
Why should I learn Python? Are there any advantages to learning Python over other languages?
Answer
Python is a great language to learn, whether it’s your first time programming or not, for several reasons:

It reads like plain English! This is something you can especially appreciate with a side-by-side. Take a look and, without worrying about what these code bits actually do, think about which is harder to read:

// Java
public class HelloWorld {  
  public static void main(String[] args) {  
    System.out.println(""Hello, World!"");  
  }  
}

# Python
print “Hello, World!”



It’s one of the most popular programming languages with a massive community. This means help is readily available when you’re stuck!


It’s used in many fields and industries, like Web development, machine learning and AI, and data science, just to name a few. So once you learn the fundamentals, you can grow into the role of your choice!


Python is one of our most popular courses and is only getting more so.  We covered why Python is so popular in more depth in another piece, check it out.
Do you have any insights into why people should learn Python? Share them below!
","
Well said, but I would suggest this instead:
print(""Hello, 世界!"")

You cannot do that in Python 2.

Whether you want to go for Functional programming or OOPs, Shell scripting or interested in Web Development, Desktop related app or Network related the one best choice we have is python. Because of its modularity, it becomes popular.




 robmuh:

Well said, but I would suggest this instead:
print(“Hello, 世界!”)
You cannot do that in Python 2.


This is true!
But of course it is possible, using encoding and decoding. I was forced to mess with that evil when I was writing a Chinese Shanghai weather bot for Twitter years ago.
Link (I found it!): https://twitter.com/shanghaihourly

OP:
I feel that Python has incredibly fast development times. I enjoy the fact that I can pop open notepad and have a decent script up and running for my work in minutes not hours.




 contentmazzone:

It’s one of the most popular programming languages with a massive community. This means help is readily available when you’re stuck!


One of the most useful languages with innumerable amounts of documentations.

@robmuh you are correct BUT
print “Hello, 世界!” works in py 2
From my experience, it has been Easier to learn the concepts within python 2
Then you can easily incorporate the functional syntax towards python 3
when you begin to understand the process of programming and the language.

Python is really great for learning base computer programming concepts. I at least know in my experience in my coding class it was the easiest one for everyone to really jump into and learn. Coming from a newbie it really made it easier to adjust. 

Well this analogy about why leanr python with that example its not exacly true… for example you can use php and use echo ‘A’; instead of print(‘A’) or directly println, in other commands. But well ok learning python is fun.

This is a bad way to compare the languages. Off course, the Python code is more short and friendly, but this language don’t give us the control and usability of more robusts languages like Java and some others.

well, you are right but i would phrase it a little bitter. Java is a more verbose language, but has absolutely proved its worth as an industry strong language, its strongly typed, vast ecosystem with great (deploy) tools and much more.

It’s verbose in annoying way, but it’s what you said. Both languages have your advantages, each one in your proposals and goals, the discuss go beyond one print() and a System.out.print() hahaha. I like more Python, by the way.

but type safety/strongly typed is a good advantage, certainly in larger projects. Facebook spend a massive engineering effort to make there PHP code strongly typed. Python3.6 introduced these concepts as well, although the interpreter doesn’t yet throw an error for it. (from what i read)
it goes far beyond print and System.out.print or System.out.println

Plus there’s always PyGame if you want to go into making games, that’s also based on Python 2, at least it was last time I used it!

because it is used to in many fields like data science , machine learning , app mobile , and web develop .

4 posts were split to a new topic: Why I Chose to Learn Python

Regardless the language you choose or are convinced to learn, what is the field of your endeavor? That should be what determines your immediate learning need. Some fields are rife with Java code, others C++. Some fields are ripe for the taking with Python, such as robotics and controls. Pick your field, then choose the language that has the right fit. If Python is the right fit, then bring it on.
Back in the day, I chose JS as the language to learn.  Then it branched to PHP. All I did was solve my own problems through that whole process, and came about with some pretty cool code. It’s all gone now. Cassini has crashed into Saturn. Make whatever you write mean something in its day.

Hi, To be  fair to py 2. I was only 5 mins into coding with Python and came across this issue. The error message is so  specific and I got a solution straightaway by following the link.

Other languages like Java, or especially C++ may give more control over many low-level aspects of programming (‘closer to the machine’ is one way to say it) but they are not necessarily more “usable” than Python, as you write.  As for being more “robust” (there is no “s” at the end) this means strong, healthy and in computer terms it often means less likely to malfunction or crash due to being stressed or pushed to the limit.  And in this sense I don’t think Python is any less robust than Java, and it probably depends far more on the specifics of a given program, like how well and how professionally it is coded.  Of course, no language can provide the low-level control of Assembler, which is limited only by the capabilities of the CPU and its instruction set (e.g. Intel x86, Oracle/Sun SPARC, IBM POWER8, etc.).

I just started to learn Python. I know PHP well and out of curiosity, I start a new programming language. We’ll see if I can get to know him well. The syntax seems simple.

In my opinion, Python is one of the easiest languages to use and learn when starting to program. It provides easily manageable and readable syntax, allowing you to generally focus more on trying to grasp the ideas and concepts of programming as a whole which practically entails most of all coding languages.
you’ll start to notice there are many programming languages that generally have different means of use, but the knowledge of the fundamentals are easier to comprehend while starting with python. It’s also a very formidable object oriented program language that can even attach to other languages you might use in the future to enhance the program your working on. Even such as languages written with c++.
"
3,Can the start or end of a list slice contain a negative number?,"FAQ,Python FAQ",,1,"
Question
Can negative numbers be used for the start or end points of a slice?
Answer
Yes, negative numbers can be used for the start or end of a list slice. A negative number used for the start of the slice will return a list which contains the number of items starting from the end of the list. A negative number used for the end returns a list which contains items excluding the number of items at the end of the list.
The following example shows both cases.
colors = ['red', 'green', 'blue', 'yellow', 'orange']

# List containing only last 2 = ['yellow', 'orange']
print(colors[-2:])

# List excluding last 2 = ['red', 'green', 'blue']
print(colors[:-2])

",
4,What are some differences between a statement and a function in Python?,"FAQ,Python FAQ",q-a,4,"
Question
In Python, some pieces of code are categorized as statements or as functions. What are some of the main differences between the two?
Answer
In Python, a statement is typically a line of code we write to give an “instruction” or “command” for Python to perform. For example, variable assignment, which we used quite often, is a statement, which tells Python to set a variable to a value, which it carry out when it processes that code line. Statements are essentially always an “imperative” task that must be carried out.
On the other hand, functions are a collection of multiple code lines which you are able to call all at once. Functions themselves are not statements, because they are not an imperative task that must be performed. Rather, they are closer to some object or value, that you can call in your program when you need to run its code.
In addition, statements do not return anything, while functions always return some value, returning the value None if no return value is specified.
","
That’s a really clear and concise answer!

Is function multiple statements?

yes @digitalpro84845
"
5,Why do my hobbies have a ‘u’ before them when I print them?,"FAQ,Python FAQ",q-a,27,"
Question
Why do my hobbies have a ‘u’ before them when I print them?
Answer
This happens because raw_input() returns a unicode string, and that’s all the u means. If you’re seeing some output like this: [u'knitting', u'biking', u'coding'], that’s totally normal. Python is intentionally letting you know that the output is unicode.
To “fix” this, we can convert our hobbies to strings as we append them, like this: hobbies.append(str(hobby)).
","
What is unicode? Does it mean anything special that I need to avoid or be careful?

python has documentation about unicode:
https://docs.python.org/2/howto/unicode.html
although maybe not the easier read, certainly very useful.




 stetim94:

https://docs.python.org/2/howto/unicode.html


Okay, so If I type Cyrillic symbols for my raw_input I receive: (u, u*unicode for cyrillic symbol).
Well my question is how can I work in python with that symbols?




 microsolver73560:

how can I work in python with that symbols?


Are we talking data inputs or code symbols?

Data inputs. I guess code symbols must be english characters.

The language interpreter is written in English being as it goes back to the very beginning of programming which had its biggest gains in the English speaking western world. It would not make any sense to have multiple symbols for each instruction. As for data, most or all programming languages can work with Unicode.
I’m not sure (will need to test) whether we can use Unicode in variable and function names, but one could reason there should be nothing stopping us doing that. LIkewise we can port the English keywords to our native language…
>>> impresión = print
>>> impresión(""Esta es una frase en español"")
Esta es una frase en español
>>> 

That answers that question for us. Note that impresión is not a function, proper, but a reference to the print function. print() is still doing the work, just under a different name.

As far as I can tell, even older Python works with unicode (foreign characters, etc) just fine.
The problem here is very likely that when you print a list, like in print hobbies, the list is calling the __repr__ function on each item, instead of __str__ or __format__.  The reason it responds with a u'\u4f60\u597d\u5417' kind of string is that if you didn’t trust everything to support unicode correctly, that string would always be able to recreate the original string.
This seems to be fixed in Python 3, but for now, if you try something like for h in hobbies: print h to loop through all of the items, it should print all the unicode the way you expect.

Is there a reason that why I initialize hobby outside of my for loop in only ask for user input on the first loop and appends that response to the hobbies list 3 times?


gist.github.com


https://gist.github.com/codecademydev/14a7e3206d32635934280e24c621e0b2
script.py
hobbies = []
b = 3
# Add your code below!
hobby = raw_input(""What is a hobby you have? "")

for x in range(3):
  hobby
  hobbies.append(hobby)

print hobbies







I would imagine each time it would run hobby it would ask for the user input.

Console printed this:
What is a hobby you have? snowboarding
[u’snowboarding’, u’snowboarding’, u’snowboarding’]

only code inside the loop execute multiple times, so if you want to prompt the user for input multiple times, ensure the code responsible for this is inside the loop

I have the same issue and I did put the raw_input inside the loop. (and I had the similar issue in a step before.
My code:
hobbies = []

# Add your code below!

for num in range(3):
  hobby =  raw_input(""Tell me one of your favorite hobbies: "")
  hobbies.append(hobby)

print hobbies

console output:
Tell me one of your favorite hobbies: football
Tell me one of your favorite hobbies: Tell me one of your favorite hobbies: [u’football’, u’football’, u’football’]


That makes it a different issue altogether.
Assuming your description is accurate and I’m managing to read it accurately, then codecademy isn’t dealing with io streams correctly there.
I suggest ditching taking input, and/or doing it locally instead.
Rather than hard-coding 3, it would be nicer if the program read until the end of input. This is a little bit tricky because end of input won’t show up like regular text. The easiest way to go about it is to treat standard input like a file (from your program’s perspective, it is a file)
import sys

for line in sys.stdin:
    ...

There’s also a neat module which checks the arguments provided to the program for a file name, and if so it reads from that file, otherwise it reads from stdin:
import fileinput

for line in fileinput.input():
    ...

Beware of line terminators at the end. You may need/want to strip the lines before using them.
raw_input is just a helper for sys.stdin, same for print and sys.stdout

Not sure why we use ‘range(3)’?
How come it isn’t ‘range(2)’ since we are prompting the user to enter something 3 times i.e. for each index of range(2) (0,1,2)?

range gives values lesser then (<) stop value, not lesser then or equal to

I want to ask about the str().
Why hobbies.append(str(hobby))?
why does
-> str(hobby) = raw_input…
-> print str(hobby)
not work?

this won’t work:
str(hobby) = raw_input…

you could do:
hobby = str(raw_input())

casting the result of raw_input to a string

I tried this code in PythonWin and the results have no ‘u’. Is this a issue with CodeAcademy environment?

If your interpreter is Python 3.x, you won’t see the “u”. Did it accept raw_input(), or are you using input()?

In PythonWin I can use both raw_input() and input(). However, if I use input(), it seams that I can only input arguments as integer or float. If a input a word, I have to use “” or it will end with an error.  Using raw_input() and input() both result in no “u”.
"
6,Where should comments be added in code?,"FAQ,Python FAQ",,23,"
Question
In the context of this exercise that introduces comments, where should comments be added to the code? Can I just add comments to every line of code to be safe?
Answer
Generally, comments should only be added to pieces of code that would not be obvious to others who are reading it. Adding comments to every line of code is usually not necessary, and having too much text in a file can overcrowd it, ultimately making it harder to work with or understand.
Comments help provide context for why a particular piece of code was written in that way, and also help others understand the code itself faster. Comments are typically added above the code they are describing.
# When hitpoints are below 5% and shields are gone, self-destruct.
if hp < 5 and shields == False:
  self_destruct()

","
this is a great web site

this website is dope and is easy to understand

this website is dope and is easy to understand

This is my first question on Codecademy 
how does the computer know that the 5 represents a percentage and not something else?
Kind regards

This will be set somewhere else in the code. The computer knows it’s a number because it is preceded by a ‘<’ (less than) symbol.




 jephos249:

# When hitpoints are below 5% and shields are gone, self-destruct. 
if hp < 5 and shields == False:
  self_destruct()






 guillaumetjeeee:

This is my first question on Codecademy 
how does the computer know that the 5 represents a percentage and not something else?
Kind regards


That’s where the comment is useful. The computer just sees 5 as an integer. From the comment we can see that 5% is the threshold for the potential invocation of self_destruct(), so it would be logical to assume that the maximum possible value of hp is 100. Therefore, 5 is equivalent to 5%. At least that’s my impression.

Cool website! Can’t wait to learn how to start coding

Normally, comments in Python are only added whenever and wherever you need them. They can be used for different purposes, and yes, you can add comments to every line, or above a set of lines to know what it happening.
I hope this helped, thanks!

Java


#i love coding and I will like to do get better at doing it

#I would say before every block of code is where comments should be added to help others follow the application with ease.

`this code will be used to change the languge many times
code_changing_language
`

#i will do it really seriously

#Want to learn something I can use to make more than 11$ an hour =D

Nice, but the problem with the step two( 2.comments), is that I cant to write anything…
Only black screen… sorry for bad English.

Do you mean that when you have this in the middle panel:

… and then press “Run”, there is nothing but a black screen in the right-hand panel?
That is the expected behavior.  The purpose of the # tag is to tell Python to ignore everything after it.  The next line, persnickety_count = 0,  initializes a variable, but does not call for anything to be printed or otherwise sent to the screen.
So when the script runs, Python ignores the comment (# and after), then does the variable assignment, then halts, just as requested.
If you’d like to see something on the screen, type on a new line (where the cursor is shown above):
print(persnickety_count)
… and then press “Run”.

Comments typically belong at the top of a functions, class, or file.  If it becomes obvious the programmer did not completely understand the problem you end up with “Shotgun Surgery”.  Comments when and whereever, rewrite the code for your own sake.  If you are given that much time.  




 jephos249:

Question
In the context of this exercise that introduces comments, where should comments be added to the code? Can I just add comments to every line of code to be safe?
Answer
Generally, comments should only be added to pieces of code that would not be obvious to others who are reading it. Adding comments to every line of code is usually not necessary, and having too much text in a file can overcrowd it, ultimately making it harder to work with or understand.
Comments help provide context for why a particular piece of code was written in that way, and also help others understand the code itself faster. Comments are typically added above the code they are describing.
# When hitpoints are below 5% and shields are gone, self-destruct.
if hp < 5 and shields == False:
  self_destruct()



This code will be the best
simple_code_calculation()

Peaks my interest in 2 pages this is GREAT!

Reading you answer gave me an idea for another question.
Do comments slow down the code when it is executed?
To say the code is less streamlined?
"
7,Is there a shorthand method to repeat a string multiple times?,"FAQ,Python FAQ",,6,"
Question
We can use concatenation to create a string that repeats multiple times by adding itself over and over, but this may become tedious for many repetitions. Is there a shorthand method to repeat a string multiple times?
Answer
In Python, we can do this using the * operator, and essentially multiplying a string by the number of times it should repeat in a newly created string.
Example code
message = ""Hi there! ""
message_x3 = message * 3

# message_x3 would equal:
# ""Hi there! Hi there! Hi there! ""

","
That is really cool, no loops.

The strings are repeating multiple times but with no space between the last word and first word of next string. How can be make space in case of repeating a string multiple lines. One string per line




 jephos249:

message = ""Hi there! "" message_x3 = message * 3


In the given example double check the contents of the string that is saved to message. A space is a character.
If you wanted a new line each time the newline chracter is “\n”. Bear in mind these methods will print with a trailing space and a trailing newline respectively.

Is there any loop I can write to print out serially named objects? Sorry if my phrasing sounds wrong.
Suppose I have message=string1+string2+string3+string4+string5+string6 and so on till string 17 (as part of some random exercise haha) and string1 to string17 have been predefined.
How can I rewrite message in form of a loop (if I don’t want to type string1, then string2, then string3… and so on)?

Whilst there are methods to do this they’d probably be frowned upon. I think the best option would be to refactor your earlier code so that you don’t end up with numerous similarly named variables. Add them to a different data type (e.g. a list) and it’ll make the overall program both easier to read and easier to deal with.
"
8,What if we used print instead of return for each if statement?,"FAQ,Python FAQ",,9,"
Question
In the context of this exercise, if we had a similar function with multiple if statements, and used print instead of return for each one, what would happen?
Answer
In most of the exercises within this lesson, each if statement contains a return statement. A return statement immediately exits a function when it runs, so even with multiple if statements with True conditions, when one of them runs their code block, none of the other statements would run.
If instead, we used print functions in each if statement without using return, this can change how the code would behave. If you had multiple if statements with conditions evaluating to True, then each one would run their code block, because a print does not exit the function.
Example
# Using return statements
def evaluate(score):
  if score >= 9:
    return ""Excellent""
  if score >= 5:
    return ""Good""
  if score >= 1:
    return ""Bad""

# returns ""Excellent""
evaluate(10) 

# Using print statements
def evaluate(score):
  if score >= 9:
    print(""Excellent"")
  if score >= 5:
    print(""Good"")
  if score >= 1:
    print(""Bad"")

evaluate(10) 
# prints out in the console
# Excellent
# Good
# Bad

","
6 posts were split to a new topic: Can I have more than one function with the same name?

Excuse me but i do not get it.
Why when using the print statement the code prints all 3 options? (excellent,good, bad) ? As i see it it should only print the one that’s true, because we make it print only one out of 3, the one that is correct.
Haha, after thinking it for a little more i understand it. I will reply to myself just to make it more clear for other people that got through the same misunderstanding as me.
When using the print statement, all of the 3 options are true. For example, if we evaluate it to 10, that means that 10 is >=9 and at the same time is >=5 and >=1.
So it prints ALL the options that are true.

Exactly! The way to avoid that behavior if we wanted to only resolve a single case would be to use else if which would only run if the previous if did not run.

A brief technical update to your initial question…
All values will be printed because print statement does not EXIT a function and will remain in the function and print every True option while return EXITS as soon as a condition is True.




 tadiwamusere:

return EXITS as soon as a condition is True.


return exits as soon as it is encountered. End of story. Whether it has a return value or not is up to us. If none is given, then None is returned.

Isn’t it a good good practice to use parentheses to conditionals because it may be redundant or unnecessary in python but it is must in JavaScript and may be in other languages also. So, we will not have to worry in which we have to use and in which we have to not use. As a beginner I’m asking this. Thank you.

Different languages have different conventions, and there are different use cases for parenthesis in conditionals; there is no catch-all answer to your question.

The less convoluted the condition, the less likely the need for grouping (with parenthesis). Keep the conditions simple in Python and never worry about parens. Just remember the colon before the block.
"
9,Can the += operator be used to add more than one value at a time?,"FAQ,Python FAQ",,24,"
Question
In Python, can the += operator be used to add more than one value at a time?
Answer
Yes, the += operator allows adding more than just a single value at a time. Anything on the right-hand side of the += will be evaluated, and then it will be added to the variable which is then updated to that new value.
Example code
# Plus Equals with a single value:
miles = 80
miles += 20 # miles is now 100

# Plus Equals with more than one value:
snow_level = 10
snow_level += 20 + 10 + 40 # snow_level is now 80

","
Great question, great answer! Thanks for sharing!

why can’t i increment multiple variables at the same time and stick it into one line?
am i committing some pythonic sin?




 giga3248227979:

am i committing some pythonic sin?


There is no shorthand for performing multiple operations, such as your question suggests.
a += 1
b += 1
c += 1

Those operations cannot be performed in one step without some form of loop.
>>> a = 5
>>> b = 6
>>> c = 11
>>> for x in [a, b, c]:
	x += 1

	
>>> a
5
>>> b
6
>>> c
11
>>> 

Even then we cannot perform the action we would like.
>>> a, b, c = a + 1, b + 1, c + 1
>>> a, b, c
(6, 7, 12)
>>> 

Above we combine all the operations in one line, but it is still three operations going to three assignments.

Can you show what you are trying to do?



 giga3248227979:

am i committing some pythonic sin?


… maybe just a syntax error?

Can the += operator be used to add more than one variable (not literal) or string value at a time? If so, how?




 giga1146251798:

Can the += operator be used to add more than one variable


Welcome, @giga1146251798.
Yes, we can write any expression on the right side of the operator.
a = 6
a += 42 / a
print (a)    # 13




 mtf:

a = 6 a += 42 / a print (a) # 13


I’m confusing the calculation sorry if I’m wrong:
if a = 6
then plus-minus a += 42(plus 6) / a(which means 6)
it’s suppose the answers is
a = 48/6
print = (a) # 8

I’m still new to this myself but from what i have gathered
a = 6
a += 42 / a
print (a)    # 13
when using the += operator what you’re doing is adding the expression after its been “solved” if you will
Let’s try with a different example
a = 5
a += 35 / a                <----- First thing that happens here is 35 getting divided by 5 leaving you with 7.
print (a)    # 12
That sum of 7 is then added to the original value of A that we had resulting
in 12

total_price += nice_sweater + fun_books
i can write this code also r8? #mtf

Yes, because the expression on the right is evaluated first. The numeric value referred by nice_sweater would be added to that of fun_books before being added to the old total_price. The result of all that is re-assigned to total_price.
total_price = nice_sweater + fun_books + total_price

thank you for your reply




 veloct84:

I’m confusing the calculation sorry if I’m wrong:
if a = 6
then plus-minus a += 42(plus 6) / a(which means 6)
it’s suppose the answers is
a = 48/6
print = (a) # 8


The interpreter first evaluates the right hand side of ""=""
In the above expression (



 mtf:

a += 42 / a


), the right hand side part of = is 42 / a which is equal to 42 / 6 = 7.
The value of a is 6 as we have declared in the starting of the program.
a += 42 / a equals to a+=7  and
print(a+=7)     #answer is  13 (a = 6+7)

i tried total_price += value1 += value2 and received a syntax error so I had to parse it out like this:
total_price += value1
total_price += value2
#value1 and value2 are actually variables with values assigned to them.




 luminescence_18:

total_price += value1 += value2


We cannot write a compound assignment in the value (expression) presented to a compound assignment. We can compute the value before the assignment, however.
a += b + c

The expression on right side is evaluated first, then computed with the value on the left, then finally assigned.
a = 6
b = 7
c = 8
a += b + c
print (a)  #  21


Thanks! I feel like I knew of that expression but then turned into Gandalf with no memory of it .

If we were trying to add multiple strings and number values, would we just use + signs or would we need to add them separately?

Method can vary depending how the data is acquired and accumulated. If we only want to represent mixed data in a string, then interpolation is the most readable and simple to write.
a = 3.0
b = 4.0
print (f""A triangle with base, {b} units and side, {a} units will have an hypotenuse of {(a ** 2 + b ** 2) ** 0.5} units."")

can the operator work with other data type such as float/long, Etc?

Welcome @chip3960423356. Yes, the assignment operators can be used with some like data type. In the case of numbers, integers can be added to floats and vice-versa. Lists can be added to lists, strings can be added to strings.
"
10,When to use single vs double quotes?,"FAQ,Python FAQ",,10,"
Question
In the context of this exercise which introduces strings, when should single or double quotes be used for a string?
Answer
Typically, either single or double quotes can be used interchangeably for creating a string. However, in certain situations, the type of quotes can matter, depending on the content of the string itself. If the string contains single quotes, it can be more convenient to wrap the entire string in double quotes. And if the string contains double quotes, you might use single quotes to wrap the string instead.
The reason for this is that each string starts and ends when a pair of quotes is encountered. If there is another matching quote within the string, that may end the string prematurely, causing errors.
# Examples of valid strings
print(""I'm coding!"")
print('The computer printed the string ""Hello!""')

# Example of invalid string 
print(""A common phrase in programming is ""Hello world"""")

","
There is no difference unless you have words like (It’s, they’re, etc…)
but you can always use '.
# EXAMPLE

# the following two lines print Hello World! to the screen
print('Hello World!')
print(""Hello World"")

# the following two lines prints It's a sunny day
print('It\'s a sunny day')
print(""It's a sunny day"")


What if you had to use two types of quotes inside of a string? For instance if I wrote (example: Bobbi told me, “Delia said, ‘This will never work.’ ”)?

Well, you could use triple-quotes, but that would (IMHO) be a misuse of triple-quotes. I think that the Pythonic solution would be to escape (backslash) the double-quotes:
print("""""" ""Delia said, 'This will never work.' "" """""")  # works, but ugly

print("" \""Delia said, 'This will never work.' \"" "")   # better, I think

Output:
 ""Delia said, 'This will never work.' "" 
 ""Delia said, 'This will never work.' "" 


I did’t get it at first, and thank you so much. To be honest this Codecademy thing is actually quite moving

what is  the difference between a double and a single quoted string.

In Python, there’s no difference.

Thank you, I did not know that using “” or ’ made a difference with special characters.

One thing to consider is if moving into other languages, there is a distinction between "" and '. I’m still new myself, but also wanted to develop good habits with my choice on this. I know I want to get into C# later on, and so I’m going to default to using "" instead of '. Just something to think about for building a habit.

How about using triple quotes in print to allow the use of single as well as double quotes within the same sentence?? Isn’t that easier for beginners??
"
11,Do parameters still hold some value when the function call completes?,"FAQ,Python FAQ",,13,"
Question
In Python, do parameters still hold some value when the function call completes?
Answer
When a function call completes, all the parameters will no longer store any values in them.
Unlike regular variables we’ve worked with before, that were not parameters, parameters do not continue to reference some value after the function finishes running. Parameters are essentially “temporary placeholder variables”, so they only temporarily, for the duration of the function call, hold onto values, and reference them while the function is running. Once the function call completes entirely, the parameters will dereference any values and become “empty” again.
","
what happens if a value is declared using assignment with the same name as parameter_name being called. Which value would the function take? Define scope of the Value.

something like this:
def example(parameter_name):
   print(parameter_name)

parameter_name  = 5 
print(parameter_name)

that goes fine, the parameter has a local scope (only exists within the function), and can live along side the global variable

Mr. stetim94,
Thank you for the reply.
What if:
def example(parameter_name):
   parameter_name=7
   print(parameter_name)

Do i get a syntax error here?
What would be the value inside print statement of function definition, 5 or 7?
parameter_name  = 5
print(parameter_name)

def example(parameter_name):
print(parameter_name)
parameter_name  = 5
print(parameter_name)
From the above problem i would like to ask whether 5 would be printed once or twice since there is no return statement after function definition?
Thank you.

If you reassign the parameter name within the function, then within the function, that name will have its new value. Assuming that this is what you mean (please use the </> icon to post code),
def example(parameter_name):
    parameter_name=7
    print(""From inside the function, "",parameter_name)
parameter_name = 5
print(""This is the variable defined outside the function, "",parameter_name)
example(parameter_name)
print(""This is still the variable defined outside the function, "",parameter_name)

… the output would be:
This is the variable defined outside the function,  5
From inside the function,  7
This is still the variable defined outside the function,  5


Given you already have the code, surely you can run it, and then figure out what must have happened? Sometimes that is really useful to do, given then you figured it out, which is almost always better then an explanation.

Hello
Mr. stetim94
i’m currently in bash shell terminal.Can i test the commands directly from the terminal?
Thank you for making the effort to help me.

Hello
Mr. patrickd314
Thank you for the reply. This is the reply i’ve been waiting for and you explained meticulously.
Thank you for making the effort to teach me.

@stetim94 is correct:  Many of these things you can just try out for yourself.
Do you have Python installed on your computer?  If so, try typing python into the shell.  If you are lucky (i.e., if the path is set up correctly), you will get a Python shell to use.
If you don’t have Python installed, there are several online Python interpreters that you can use.  TutorialsPoint has them for both Python2 and Python 3.
In addition,  Python Tutor has an excellent tool that lets you visualize code execution step by step.
There are many others; I would certainly advocate getting into the habit of keeping one open at all times (when you are doing anything having to do with coding, of course!!), and using it as a scratchpad.

In this exercise can we assign more than one formal parameters while defining a function?
like in this example what if we also have one more greeting line that says
print(""Todays sale special is "" + Discount rate + “bars.”)




 sivaram_nk:

def example(parameter_name):
print(parameter_name)
parameter_name = 5
print(parameter_name)
From the above problem i would like to ask whether 5 would be printed once or twice since there is no return statement after function definition?
Thank you.


You never called the example function so it would only print once. and even if you called the example function you would have to pass it an argument to get any output.

I am new to python but I tried the following and it worked fine.
def greet_customer(special_item, discount):
print(“Welcome to Engrossing Grocers.”)
print(""Our special is  "" + special_item + discount + “.”)
print(“Have fun shopping!”
greet_customer(“peanuts” , “at 3% discount”)
"
12,Can a list be sorted in reverse order?,"FAQ,Python FAQ",,21,"
Question
Is it possible to sort() a list but do it in reverse order?
Answer
Yes, you can have the sort() function produce a list sorted in reverse order. The default behavior is to sort from least to greatest amount (depending on whether it is a numeric, string or mixed values). The following code example shows that behavior for list1 which contains only numbers.
list1 = [14, 45, 98, 23, 77, 32, 15, 22, 8, 33, 21, 64]
list1.sort()
print(list1)
# [8, 14, 15, 21, 22, 23, 32, 33, 45, 64, 77, 98]

By using the reverse parameter for sort(), you can change the behavior and have the list sorted in the other direction. This code example shows how to use reverse.
ist1 = [14, 45, 98, 23, 77, 32, 15, 22, 8, 33, 21, 64]
list1.sort(reverse=True)
print(list1)
# [98, 77, 64, 45, 33, 32, 23, 22, 21, 15, 14, 8]

","
How can we short a list based on the sublist element using sort() method?
example:
#below list is composed of names_list and age_list
names_and_age = [""Sam"" , 23], [""Vik"", 30], [""Phil"", 26""], [""John"", 18]

sorting names_and_age list based on age (ie., send element in the sublist).

Use the “key” keyword parameter:
names_and_age = [[""Sam"" , 23], [""Vik"", 30], [""Phil"", 26], [""John"", 18]]
names_and_age.sort(key = lambda x: x[1])
print(names_and_age)

# Output:
[['John', 18], ['Sam', 23], ['Phil', 26], ['Vik', 30]]


this key parameter works quite awesome.  what is lambda here? It looks like a predefined function. Would you explain this in detail?

The keyword parameter key in an iterable method says something like:

Apply the expression to the right of the = operator sequentially to each item in the given iterable, placing each returned value into a new iterable.
Be sure to keep track of which value in the new iterable is associated with which item in the original one.  **
Then perform the method on the new iterable.
Then return the original iterable, ordered by the order of items in the new one.

lambda is a way to write a function on one line. It is in this case equivalent to:
def f(x):
    return x[1]

… then I could write:
names_and_age = [[""Sam"" , 23], [""Vik"", 30], [""Phil"", 26], [""John"", 18]]
names_and_age.sort(key = f)  # Note that I name only the function, no parameters needed
print(names_and_age)

# Output
[['John', 18], ['Sam', 23], ['Phil', 26], ['Vik', 30]]


** I actually don’t how it is actually accomplished “under the hood”,  but for me, it is helpful to think of the “new” iterable looking something like:
[[23, [""Sam"" , 23]], [30, [""Vik"", 30]], [26, [""Phil"", 26]], [18, [""John"", 18]]]
So, each new_list item looks like this:
[item_to_sort_on, original_list_or_tuple_or_whatever_item]
so we leverage the fact that sort() by default sorts on item[0] :
new_list.sort()
print([item[1] for item in new_list])

# Gets you to
[['John', 18], ['Sam', 23], ['Phil', 26], ['Vik', 30]]



Wow… Now i get it. You did described well. Thank you so much.

could you explain how the lambda works? because i get the other stuff but not this.
Correct me if I’m wrong, but what i understood is this:
“key” applies the sort function to the list(“x” in this case), and more specifically to the 2nd integer(which is [1]) . right??? Because if i write names_and_age.sort(key = lambda x: x[0]) instead of [1], the sorting will be done based on each names, alphabetically .
in my opinion, it would be more easy for beginner level learners like me to write:
def f(names_and_age):                                          #instead of f(x)#
return names_and_age[1]
names_and_age = [[“Sam” , 23], [“Vik”, 30], [“Phil”, 26], [“John”, 18]]
names_and_age.sort(key = f)
print(names_and_age)
thank you in advance.

I think you’re right about that it’s bad to introduce a new way to define a function at the same time as starting to use functions in a new way.
lambda doesn’t do anything new. makes a function.
Another way that you could get a suitable function to use as key is with operator.itemgetter which corresponds to the [] operator
from operator import itemgetter
itemgetter(3)([1, 2, 3, 4, 5])  # 4





 code5132969222:

could you explain how the lambda works? because i get the other stuff but not this.


You appear to understand it perfectly!

why do we write (key = lambda x: x[1])?
why x: x[1] and not just x[1]?

You don’t have an x, that would be a name error.
You’re not looking for the second item of x. What you’re looking to say is “given an x, here’s how to obtain its second value.”
A function is a relation between some input (in this case some x) and some output (in this case the second item of x)
You’re describing that relation, so that sort can sort by the second item of value(s)

thank you for clearing that up!

You showed it in your example:
def f(names_and_age): #instead of f(x)#
    return names_and_age[1]

Well,
lambda x: x[1]  Says,

Here is a function whose parameter is x: return x[1]

You would have written
lambda names_and_age: names_and_age[1]
… and it would have been fine.

Is there a difference between the functions which comes before and after the list ? How can I remember it?

Hi there! Would you mind using an example to explain what you mean?

I don’t know. Is there a difference between "" list.append"" and ""len(list) "" types?

Thanks so much for teaching about key and lambda!! It is a very useful tool to learn 

My output only shown sorted number of ages and the names is not sorted?
Can someone tell me why ?





#printout the order of two variables in sorting zip
names = [‘John’,‘Sam’,‘Vicky’,‘Phil’]
ages = [24, 45, 23, 45]
names_ages= list(zip(names, ages))
print(names_ages)
#sorting names_ages following alphabet order names:
sorted_names_ages = names_ages.sort( key = lambda x:x[1])
print(“Sorted names and ages”+ str(names_ages))
Output:


[(‘John’, 24), (‘Sam’, 45), (‘Vicky’, 23), (‘Phil’, 45)]
Sorted names and ages[(‘Vicky’, 23), (‘John’, 24), (‘Sam’, 45), (‘Phil’, 45)]



The difference is :

“list.append” will add an item to the end of “list”
while len(list) will return the number of item contained in “list”

Hope it helps 

In your example there are only two sets of data to sort by, either the names or the ages. You used the key with lambda x: x[1] which is asking it to sort by the second item. Since you used zip you effectively have a sequence of items like so-
(‘John’, 24)
(‘Sam’, 45)
(‘Vicky’, 23)
(‘Phil’, 45)
Note that the second item x[1] is the age. So we sort by x[1] which is age-
(‘Vicky’, 23)
(‘John’, 24)
(‘Sam’, 45)
(‘Phil’, 45)
We didn’t ask to sort by age then name so it doesn’t happen. If you wanted to you can ask for it to sort by item1, then by item0 in a single line-
names_age.sort(key=lambda x: (x[1], x[0]))
# Out: [('Vicky', 23), ('John', 24), ('Phil', 45), ('Sam', 45)]
# Now 'Phil' comes before 'Sam'

Or consider operator.itemgetter-
https://docs.python.org/3/library/operator.html#operator.itemgetter
from operator import itemgetter

names_age.sort(key=itemgetter(1, 0))

"
13,Can a dictionary repeat identical keys or values?,"FAQ,Python FAQ",q-a,5,"
Question,
What happens in a dictionary if you have repeated keys or repeated values?
Answer
Each of these is a separate case. Multiple keys can all have the same value as demonstrated below. This causes no issues.
>>> my_dict = { 'key' + str(x+1): 0 for x in range(10) }
>>> my_dict
{'key1': 0, 'key2': 0, 'key3': 0, 'key4': 0, 'key5': 0, 'key6': 0, 'key7': 0, 'key8': 0, 'key9': 0, 'key10': 0}
>>> 

However you cannot have identical keys within a dictionary. Attempting to create a second identical key will simply overwrite the first as shown below.
>>> my_dict = { 'key': x for x in range(10) }
>>> my_dict
{'key': 9}
>>> 

Special reminder that 6 is not the same as '6' as one is numeric and the other a string, so if these were each a key they would be unique from each other.
Credit for examples used goes to @mtf.
","
So does a dictionary have say separate indexes for keys and if possible separate indexes for values?? Can we think of a dictionary being a data structure which is indexed like LISTS or STRINGS or TUPLES ???

Short answer, no. If you want a structure you can access by index like a list, use list.

Alright, that clears the doubt. Thank you for helping me out…

You can view this thread for a longer answer.
You can for example do this:
myDict = {'a': 1, 'b': 2, 'c': 3}
print(list(myDict.keys())[1]) #prints b
print(list(myDict.values())[1]) #prints 2
print(list(myDict.items())[1]) #prints ('b', 2)

"
14,Does a dictionary have to be created with initial values?,"FAQ,Python FAQ",q-a,2,"
Question
In this exercise, the dictionary is created with initial values. Does a dictionary always have to be created with initial values?
Answer
No, a dictionary does not have to be created with initial values. You can create an empty dictionary using either of the two methods shown here.
locations = {}
# OR
locations = dict()

To add values to the dictionary you can use the index syntax (square brackets) or call the update() function on the dictionary and pass data to be populated into the dictionary. The update method can be used to populate multiple key/values to the dictionary. The syntax for these is shown below.
locations['Paris'] = 100
locations.update({""London"": 75})
locations.update({""New York"": 83, ""Vancouver"" : 110})

print(locations)
# {'Paris': 100, 'London': 75, 'New York': 83, 'Vancouver': 110}

","
Good explanation guys!
"
15,Why is it invalid to add a period after a variable name to make it a float?,"FAQ,Python FAQ",q-a,29,"
Question
I tried putting a period after my variable name to make it a float so my result would be a float, but it gave an error. Why is this?
Answer
While it’s perfectly valid to make an integer a float by typing a period after the number, we cannot do the same to a variable, even though an integer is stored inside of it. If you try doing  something like cucumbers. it will give you an error that says invalid syntax because a period after a variable name does not do what we want in this case.
Instead, we make use of the handy, built-in float() function! You can use it by writing any number or string between its parentheses, like so:
float(cucumber)
","
You can just use (cucumbers+.0) instead of cucumber.

or you can just use  (cucumbers* 1.0)

Or you can simply multiply by a float…
cucumbers * price_per_cucumber

…given that the price is set at 3.25. No finagling involved.

Aside
This is a subject that will have little meaning in a couple year’s time since Python 2.7 is going dark sometime after 2020. But for the meantime, it is still meaningful to have some guidelines when it comes to coercing floats.
7 / 2                   =>  3

7 / 2.                  =>  3.5

sum(range(1,10)) / 9    =>  5

sum(range(1,11)) / 10   =>  5

sum(range(1,11)) / 10.  =>  5.5

On the command line this sort of shortcut is useful, but in code it is not. The more likely place to find a float in this rational is in the expression in the numerator. Maybe not in this instance but by-the-by in other dynamic situations. A counting number is certainly not a float and we should not entertain the fact that it is, or should be coerced to one just for expediency.
>>> float(sum(range(1,11))) / 10
5.5
>>> 


A post was split to a new topic: Can not call the function

cucumbers = 100
num_people = 6
whole_cucumbers_per_person = 100/6
print whole_cucumbers_per_person
float_cucumbers_per_person = 100./6
print float_cucumbers_per_person
Is this right? Ive never seen how to use the one in brackets and even if the instruction says its right Im not entirely sure since you guys are using () thing

When a number literal is followed immediately by a period (dot) it is represented as a float for evaluation purposes.
>>> print (100.)
100.0
>>> 

However, a variable is not a number literal, but a reference pointer to a value stored in memory. We are not acting directly upon the number, but on the reference, which will raise a Syntax error…
>>> a = 100
>>> print (a.)
SyntaxError: invalid syntax
>>> 


It’s a very badly written exercise in my opinion. The only time it even mentions Float() is in the hints and at the community forums section.
The actual exercise makes no mention of it despite it being what they’re trying to get you to do.
This seems to be the solution it’s trying to get from you but nothing points to that.
cucumbers = 100
num_people = 6
whole_cucumbers_per_person = cucumbers/num_people
print(whole_cucumbers_per_person)

float_cucumbers_per_person = float(cucumbers)/float(num_people)





 splozy:

float_cucumbers_per_person = float(cucumbers)/float(num_people)


Only one operand needs to be cast as a float.
float(a) / b

or,
100. / 6

will return a float.
Python 3 eleviates this by forcing all rationals to return a float by default.
10 / 1 => 10.0

but Python 2 requires us to declare it.

Thanks for explaining. I just thought i’d shed some light on where I got confused in the hopes it might save someone else’ time.
Is there any particular reason you’d want to have both as a float? The exercise itself does claim

To yield a float as the result instead, programmers often change either the numerator or the denominator (or both) to be a float:

I just took this as being a good practice thing or something.




 splozy:

I just took this as being a good practice thing or something.


Simple is better than complex, so write for meaning, with purpose fairly clear and evident. As the programmer, you control the inputs and the output. How one composes the code is arbitrary, based on desired outcome.
As for setting both to float, that would not be necessary, ever. If the number in the denominator is a counting number, the it should rightfully be left as a counting number (integer).
100 / 6  => 16 (Python 2)

100 / 6 => 16.666666666666668 (Python 3)

100. / 6 => 16.666666666666668 (Python 2)

If we know that both values are floats (literal or variable) then casting is not needed.

guys, guys, guys!  what is a ‘float’?  are we talking about floating decimals??




 sophiedelic:

are we talking about floating decimals??


Decimal fractions are not natural to binary, so computers implement a special brand of math called floating point arithmetic. It is from this term that we get the word, float.

in other words, Yes?
Python is binary code?  a bunch of 0s and 1s?

No. There is no such term as floating decimals. Floating point arithmetic is very complex. The computer has a special chip called the math co-processor, or MPU to deal with number operations.
The closer term to describe the type of numbers, is Real. Floats are Real numbers.
1, 2, 3, ...                          Natural Numbers

... -1, 0, 1, 2, ...                  Integers

... -1.1, -0.6, 0, 1.1, 1.6, 2.1, ... Real Numbers (floats)

Technically speaking, floats are numbers between 0 and 1, such as those generated by random.random().

adding machines have a switch option for something like ⅝, floating, and a couple of other options.  I always took the “floating” to mean you could key 1.1 + 2.12 and the machine could line up the decimals correctly without the user having to key 1.10 to make it add correctly.
not sure I’m making any sense…
and was I right about binary being 0s and 1s?

Adding machines have a fixed decimal point. It cannot float left or right, but will always appear in the same print column.
The 5/4 key is for rounding. Up on 5, down on 4.



 sophiedelic:

was I right about binary being 0s and 1s?


Yes, hence the term binary, which means two as in base 2.
decimal 10  =>  0b1010 binary

ok.  You lost me on that last bit.  the 5/4s makes sense.  It’s amazing what you can forget over a period of a few years (ok.  more like 40 years…). and look what I found:
What is floating decimal mode?
Definition of floating decimal. : a system of decimal point placement in an electronic calculator in which the decimal point is free to move automatically across the display in order to allow the maximum number of decimal places in the readout.
Floating Decimal | Definition of Floating Decimal by Merriam-Webster
https://www.merriam-webster.com/dictionary/floating%20decimal
I’m not ALL crazy.  just part.crazy. lol!




 sophiedelic:

a system of decimal point placement in an electronic calculator


The key word is electronic which incorporates an LED display. Later on they went to crystal displays with pixels. In either case, they were more flexible for users than adding machines with only a paper tape.
So the term does exist (my bad) but does not apply, here. Google floating point arithmetic for a richer explanation. Expect it to be a tough read.

…and math used to be a strong point.  My son is a math teacher.  I should hire him to tutor me.
this convo won’t go away, will it?  I need to copy all this down and put it somewhere I’ll remember.  Thanks for all your help!
"
16,What else can I make with what I’ve learned so far?,"FAQ,Python FAQ",q-a,1,"
Question
What else can I make with what I’ve learned so far?
Answer
You’ve learned enough to make lots of things! Understanding the basic syntax, variables, conditional statements, and even the datetime library leaves you with lots of cool options to choose from. And luckily enough, the internet is filled to the brim with other programmers and coding resources!
Some notable places to look for programming projects are:
www.reddit.com/r/learnprogramming and their FAQ page, which includes project ideas!
The Codecademy Python Forums
And if you get stuck along the way, the forums are there for you, and so is Stack Overflow, arguably the single most useful developer site in the world for when you have a code question!
",
17,Where is 'breed' defined?,"FAQ,Python FAQ","loops-py,q-a",17,"
Can someone please explain why  the below ""breed’ term yields all the names when nothing in the code is identified or saved as a variable called “breed”?
dog_breeds = ['french_bulldog', 'dalmatian', 'shihtzu', 'poodle', 'collie']
for breed in dog_breeds:
  print(`breed`)

","
you define the breed variable here:
for breed in dog_breeds:

python will now assign the items of the list to the breed variable (one at a time). Python does a lot of heavy lifting for you

In a for-in expression, for item in collection,   item is the iteration variable. It is successively assigned the value of each element in the iterable collection.
(What is an iterable? Easy. Something that you can do for-in with!  )

Thank you all,
This made a lot sense now, it was confusing at first but your explanations helped.
Thanks 

How does python know that what “breed” as it was not specifically defined…“def dog_breed”
dog_breeds = [‘french_bulldog’, ‘dalmation’, ‘shihtzu’, ‘poodle’, ‘collie’]
for breed in dog_breeds:
print(breed)
“dog_breed” v “breed”

you define breed here:
for breed in dog_breeds:

python will assign the values from the list to breed (or whatever variable name you decide to give this variable)

I was going to ask just this question. I have been coming across loop on the side and this has been a major headache for me. Reading the response from mtf make me feel good

You won’t know how much relief you caused with this response. I have struggled with this for looooonnngggg (even as simple as it seems

But if I use anything other than “breed” (just to chek this out I tried “bred” and “breeds”) I get this error:
Traceback (most recent call last):
File “script.py”, line 3, in 
print(breed)
NameError: name ‘breed’ is not defined
So the explanation given by everyone does not hold up. Python doesn’t assign those values and throws back an error.

If you use your code editor’s search/highlight functionality and type in “breed” then presumably you are likely mentioning it in two places. One place where you are defining it, one place where you are using it.

in other words, this won’t work:
for bred in dog_breeds:
print(breed)
but this will:
for bred in dog_breeds:
print(bred)
in the first example, i “forgot” to change ‘breed’ into ‘bred’ when i print it…

I am asking myself the same question?

If I understand it correctly the following code:
dog_breeds = [‘french_bulldog’, ‘dalmatian’, ‘shihtzu’, ‘poodle’, ‘collie’]
for breed in dog_breeds:
print(breed)
the ‘breed’ portion in “for breed in dog_breeds:” is a temporary variable that is defined by each iteration of the list. Meaning, at first pass, the variable ‘breed’ takes the value of the first index in the list -french_bulldog in this case.  Then the “print(breed)” instruction prints the value of the temporary variable, french_bulldog.  Then the loop proceeds to each other item in the list until it reaches the last index.
I’m new to programming too, and struggling with loops as well; the above is my very newby understanding of a simple loop.

I’d be a little careful about referring to it a temporary variable since after the loop breed is still referencing the last object from whatever iterable the loop was stepping through. It’s not in a different scope and can still be accessed.
dog_breeds = [""french_bulldog"", ""dalmatian"", ""shihtzu"", ""poodle"", ""collie""]
for breed in dog_breeds:
    print(breed)
print(breed)
Out:
french_bulldog
dalmatian
shihtzu
poodle
collie
collie

Otherwise I think you’ve got the right idea.

Here, breed is temporary variable assigned the value of an item(which means it teporarily holds a copy of the list item value) each time the for loop iterates.
One thing to notice is even if the value of breed changes (which is in fact of copy value of the list item), there’s no affect in the original list

The iterable can be literally any name you choose. The word “breed” is used in the example because it makes the most sense in this case. However, you could use the standard “i” for the iterable instead:
for i in dog_breeds:
     print(i)
 
french_bulldog
dalmatian
shihtzu
poodle
collie



i is generally used as abbreviation for index, so not sure that is the best fit here. Giving a descriptive name for what the values are going to be is better
"
18,What is the difference between sort() and sorted()?,"FAQ,Python FAQ",,11,"
Question
Both sort() and sorted() can be used to sort a list. What is the difference between them and when would I want to use one versus the other?
Answer
The primary difference between the list sort() function and the sorted() function is that the sort() function will modify the list it is called on.  The sorted() function will create a new list containing a sorted version of the list it is given. The sorted() function will not modify the list passed as a parameter. If you want to sort a list but still have the original unsorted version, then you would use the sorted() function. If maintaining the original order of the list is unimportant, then you can call the sort() function on the list.
A second important difference is that the sorted() function will return a list so you must assign the returned data to a new variable. The sort() function modifies the list in-place and has no return value.
The example below shows the difference in behavior between sort() and sorted().  After being passed to sorted(), the vegetables list remains unchanged. Once the sort() function is called on it, the list is updated.
vegetables = ['squash', 'pea', 'carrot', 'potato']

new_list = sorted(vegetables)

# new_list = ['carrot', 'pea', 'potato', 'squash']
print(new_list)

# vegetables = ['squash', 'pea', 'carrot', 'potato']
print(vegetables)

vegetables.sort()

# vegetables = ['carrot', 'pea', 'potato', 'squash']
print(vegetables)

","
do we have a ‘reverse’ option in the 'sorted()' function?

sounds like something you can find in the documentation:
https://docs.python.org/3/howto/sorting.html#ascending-and-descending

Thank you.  I found: it’s possible via optional agrument: reverse = True.

Also list.sort can only be used on lists.
sorted() can be used on any iterable  (string, dictionary, etc)

Is there a technical term for the distinction between .sort() and sorted()? I’m wondering specifically if there’s some adjective that advanced programmers use to label the one or the other. A brief foray online reveals that Pascal commonly calls methods of the first type ‘procedure’ and the second type ‘function.’ Does Python have a similar terminological distinction? (Total noob here, btw).




 terarockstar08451:

.sort() and sorted()


.sort() is a method that only list objects inherit from their parent class. sorted() is a function for sorting any interable, including list. The former mutates its context list in-place and returns None, while the latter returns a copy of the argument object, sorted. Both take modifiers such as reverse and key, etc.
As far as I know, there is no other term than method to describe callable attributes.

Hi all,
So I am curious about why we would want to use either .sort() or sorted()over the other.
Is there a “more standard” option?
It seems like unless you are trying to play code golf, .sort() can do everything and more that sorted() can.

The biggest difference between the two is that one is a list method, list.sort() and the other is a global function. Only list objects have a sort attribute.
Another difference is that list.sort is insitu which means it does not create a copy, but sorts the list in place. It does not return anything (except None). This is not a method to use on an object passed to a function if we wish to preserve the original order.
sorted() on the other hand does create a copy and sorts that, then hands it off to the assignment variable. The original list is unaffected.
Because sorted is a global function, it can take any iterable and return a sorted list from that…
>>> sorted((3,7,4,9,2,1,7))
[1, 2, 3, 4, 7, 7, 9]
>>> sorted({'one':1, 'two':2,'three':3,'four':4,'five':5})
['five', 'four', 'one', 'three', 'two']
>>> sorted([3,7,4,9,2,1,7])
[1, 2, 3, 4, 7, 7, 9]
>>> sorted('this is a string')
[' ', ' ', ' ', 'a', 'g', 'h', 'i', 'i', 'i', 'n', 'r', 's', 's', 's', 't', 't']
>>> 

If we peer a little further down the rabbit hole we can learn a few more things about both the method and the function, in particular the optional arguments such as key and reverse but I’ll leave that for you to dig into.



 siege617:

Is there a “more standard” option?


Not really, since it depends upon the author’s aims and objectives. We make the choice depending on how we want things the be in the end.
If, for instance we are writing a median function that takes a sample which has a chronological order (last on is most recent) that we wish to preserve. We would not .sort() this in our function since that order would be lost. Instead,
s = sorted(sample)

where s is a sorted copy of sample but sample is unchanged.

Awesome, concise answer.
Thanks!

use  (reverse=True) inside sorted
"
19,"After this Python course, where can I get more Python practice and projects?","FAQ,Python FAQ",q-a,1,"
Question
After this Python course, where can I get more Python practice and projects?
Answer
Some great resources are available online for free!


Automate the Boring Stuff with Python - free online book with lots of projects to work through. You’ll know a lot of the material, but skip to the projects, or read through for good review.

Learn Programming - a subreddit filled with resources and project ideas and awesome people.
The Codecademy forums, where you can find lots of fellow Codecademy learners like you!

",
20,Can a tuple be used as a dictionary key?,"FAQ,Python FAQ",,4,"
Question
This exercise says a key can be a hashable type like a number or string. Can a tuple be used as a dictionary key?
Answer
Yes, a tuple is a hashable value and can be used as a dictionary key. A tuple would be useful as a key when storing values associated with a grid or some other coordinate type system. The following code example shows a dictionary with keys representing a simple x,y grid system.
coordinates = { (0,0) : 100, (1,1) : 200}
coordinates[(1,0)] = 150
coordinates[(0,1)] = 125

print(coordinates)
# {(0, 0): 100, (1, 1): 200, (1, 0): 150, (0, 1): 125}

","
Am i correct in assuming that the value being calculated is based on the binary system?
That means when using a Tuple as key, the dictionary can actually calculate stuff… cool.




 ajaxninja66418:

coordinates = { (0,0) : 100, (1,1) : 200} coordinates[(1,0)] = 150 coordinates[(0,1)] = 125


No, you’re wrong
This example just shows that the author added some values manually to the dictionary by using tuples as keys of the values
Similar to .append() in lists

Oh God i’m stupid, you’re correct. That was just a simple key-value assignment. Thanks for correcting me.
& welcome to the forums btw! 
"
21,What is a block of code?,"FAQ,Python FAQ",q-a,4,"
Question
What makes up a block of code?
Answer
Any time you hear something referred to as a block or block of code it typically means the same thing. At least in programming.
There’s no better way to explain it than to show you visually! Don’t worry about understanding the code below, but understand that the chunks of code written at the same indentation level in Python make up a block of code. Notice the small gray arrow on line 4? That indicates a block of code belonging to whatever is on the line with the arrow - a function in this case.

","
Hello, how can I call that block code inside my_function and how can I name my_function?
Thank you

the general syntax for a function:
def function_name():

def is short for define. So here you define the function, then you name the function anything you like, then to call the function do:
function_name()


A block of code is composed of several statements that are intended to execute when certain condition is met.  In Python, a block of code is implemented using indentation.
An example,
     if(true)
           print ""this is the first line of the block""
           print ""this is the second  line of the block""
           print ""this is the third  of the block""
    else
           print ""this is the first line of another block""
           print ""this is the second  line of another block""
           print ""this is the third  of another block""
"
22,Where do images get saved in Matplotlib when using savefig?,"FAQ,Python FAQ",q-a,5,"
Question
Where do images get saved in Matplotlib when using savefig?
Answer
When running in the Codecademy interface, the savefig() function will not save the image files anywhere, due to the interface being completely online with no implementation to save on your computer.
However, if you run this outside of Codecademy, such as on Jupyter Notebook, it will save the image file to the current directory by default. If needed, you can also specify a file path instead of a file name to save the image in a specified directory. For example, if the directory is a path within your current directory, you can save it like so,
plt.savefig('subfolder/filename.png')
","
What is the difference between subplot and figure, if both are used to show or plot  multiple plots.

subplot creates new plots within the same figure,
figure creates a separate figure with its own size and everything.

so do we still need

plt.show()

because when  i tap on Give solution to this exercise… Both plots show without using ‘show’ command.
but when you hit ‘Run’ again only one graph shows. Can somebody tell me why this is happening. @jephos249

A little late to be replying, but since your question might be one others would have, it might be worth providing an answer even if you have already found it.
If you are creating two plots, you must include a plt.show() command for both.
For example, consider the following code which creates two separate plots and saves each as their own image file.
plt.close('all')

plt.plot(years, word_length)
plt.savefig('winning_word_lengths.png')

plt.figure(figsize=(7, 3))
plt.plot(years, power_generated)
plt.savefig('power_generated.png')

In order to display these two plots, we would need to give each of the two plots their own plt.show() function.
plt.close('all')

plt.plot(years, word_length)
plt.savefig('winning_word_lengths.png')
plt.show()

plt.figure(figsize=(7, 3))
plt.plot(years, power_generated)
plt.savefig('power_generated.png')
plt.show()

This would then save both of plots to image files and also display both of the plots
"
23,What does importing a library do?,"FAQ,Python FAQ",q-a,5,"
Question
What does importing a library do?
Answer
When you write programs of any significant size, you will put other people’s code to use. That’s all a library/module is - someone else’s code. Their code’s functionality is made available through these libraries after being imported and makes development lightyears easier by saving time and energy. Libraries save us from having to reinvent the wheel.
In this case, we’re importing the datetime library, which allows us to d all kinds of cool stuff! Here is the full documentation for the library, where you can find what all you can do with the library.
It’s a good idea to Google the documentation for any library you want to use from now on, as that’s a large part of being a developer!
","
5 posts were split to a new topic: How can i get my local time with python?

I would like to display the quarter (03 months) of a year, is it possible via the datetime library using the for loop?

Looks like a good explanation here https://stackoverflow.com/questions/1406131/is-there-a-python-function-to-determine-which-quarter-of-the-year-a-date-is-in

from datetime import datetime
from math import ceil
now = datetime.now()
month = now.month
quarter = ceil(month * 1/3)
print (month, quarter)    # 6 2

"
24,How does `Return` work?,"FAQ,Python FAQ","functions-py,q-a",34,"
Hi, I honestly think the explanation given under Return is very confusing and not easily understandable. I have been stucked  for 2 days now trying to understand it. But the more i read it, the more i get confused. It actually seems that RETURN in itself is a simple and straight forward concept, but honestly, your explanation of it at Codeacademy makes it complicated. I can move forward here and i really need help from someone who can assist with a better explanation within the context of Codeacademy’s examples. I am a beginner without any IT background
","
When a return statement is reached:


The expression to the right of the word return is evaluated to produce a value


That value is assigned (“returned”) to the calling statement, where it may be assigned to a variable, or passed as an argument to a parameter of another function (such as print(), or itself used as a value in an expression.


The function containing return halts: it immediately stops running, and it is removed from the call stack (the interpreters “short-term memory”) until it is called again. Its local variable values are gone forever. No statement after return will be reached.


Some examples:
def sq(x):    
    return x**2

def half(x):
    return x/2

def circle_area(diameter):
    return 3.14 * sq(half(diameter))

x = 6

sq(x)  # value is returned to this call, but not used for anything; the value is lost.
print(sq(x))   # Now the value is used as argument for print()
q = 3 * sq(x)  # Here it is used as a value in an expression
print(q) 
print(circle_area(x))   # Here the value returned from half() is used as argument to sq()

Output:
36
108
28.26


6 posts were split to a new topic: I don’t understand the instructions?

first of all the answer to your question is “No” its not necessary to add a return statement at the end of any functions . But framing the answer is somewhat difficult.
The ‘return’ statement can be used in many ways
you can even add a blank return statement in a void function where you dont need to (its not necessary)
You can also add a return statement many times in a function
you can use to return value in between the execution of the function
and many more:slightly_smiling_face:

I still have problems understanding the “Return” concept especially in the light of the way it is explained in the lesson here. The more i read it, the more i get confused. I have been stucked here for more than 2 weeks and honestly i am already frustrated, Please i need a very simple and detailed explanation using same example in the lesson. One of my major confusion is the use of the word “result”-Is this a variable? Are we going to always have “result=??? as a variable in a function that has “return”?” I am not clear on what is meant by “return” terminates the body of a function. why do we need return? Please i am not just clear on all these. i will rather advise that codeacademy update this session and explain the concept in a better and simpler manner. I must also say the use of “divide_by_four” is a major part of the confusion. Can you also explain why you have “result” as part of the body? Please i need urgent help in order to be able to move forward. Thank you

First, and most important, you must differentiate a function from a function call:


You have a function, which is a series of lines beginning with a function header
def function_name():
… often containing some variable names (parameters) within the parentheses.  After that there are lines that are indented, that comprise the function body.  (The function body may or may not contain a return statement.)


Then, completely separately, you have a calling statement, or function call. The calling statement (obviously) calls the function, which means that it tells the function to run, and also tells it what values  (arguments) to assign to those parameters.



capture.png905×623 89.2 KB

Now. Here’s the magic: When the calling statement runs the function, the return statement returns the value calculated by the function to the calling statement, which can then assign that value to a variable. And that is what result is: a variable to which the returned value is assigned.  That variable, result, can then (for instance, as it is here) be used to print the value.



 sodiqolabodeafolayan:

Can you also explain why you have “result” as part of the body?


Please note that result is not a part of the body. It is part of the function call. The body has but one line, return input_number/4
If, for some reason, you wanted to divide by a different number than 4 if, say, input_number had a certain value, you might have multiple return statements:
def divide_by_four(input_number):
     if input_number > 80:
         return input_number/8
     if input_number > 40:
         return input_number/4
     if input_number > 20:
         return input_number/2

Then if input_number is 100, the function will get to the first ‘if’, then say, “yes, it is greater than 80”, and will return 80/8, or 10.0.  And then the function stops!!  So even though 100 is also greater than 40 and 20, those lines will never be reached. That is what “return terminates the body of a function” means.




 sodiqolabodeafolayan:

One of my major confusion is the use of the word “result”-Is this a variable?


Precisely what it is. The call to the function is made in the expression, and the return value is assigned to the variable.
Consider this slightly advanced function that returns a function, not a value…
>>> def quadratic(a, b, c):
    return lambda x: a * x ** 2 + b * x + c

>>> 

In maths we would recognize this as the general form of a quadratic equation in one variable, x. a cannot be zero, but b and c can be, and when they are, those two terms cancel out and the return value is the square of x.
We can write a function that will solve for x in any function we pass it…
>>> def solution(f, x):
    return f(x)

>>>

Below we first assign the returned function from quadratic() to a variable.
>>> func = quadratic(1, 0, 0)
>>> 

and now we can pass that and a value for x to our solution function to solve for x…
>>> solved = solution(func, 4)
>>> print (solved)
16
>>> 

return in both cases gives something back to the caller (the call expression), either another function, or a value.
1 * x ** 2 + 0 * x + 0

becomes,
x ** 2

so that 4 ** 2 is 16.
Don’t let the complexity throw you off. It merely demonstrates how return works and what can be returned, namely any object.
In Python, everything is an object whether a function, a data structure, or a value.

I am short of words. i don’t even know how to express my relief. Thank you so much.  . The explanation is more than amazing and easily comprehensible. now i can progress.

I am always amazed with the way you are always on top of it for all student. Thank you very much for taking out time to explain. I am now clear on all front

hello,even i m a beginner,but see, return is very simple it just returns the actual value or the answer for whatever operations we carry out ,such as finding out difference between two numbers or years.whatever is the difference will be returned by the function when we say or include return statement . the use of return statement is just for storing our answers or output in a particular variable,that can be used later with ease.including return is not always necessasry ,it depends upon our requirement .so far as divide_by_4 concept is concerened,it has used return to get the value from the first operation that is to divde 16 by 4 which gives 4 .now this value 4 is stored in result variable ,in the second case that is to divbide 4 by which is 1,the previous result is used which was already 4 ,so u get 1 . it looks complicated its because of many commas and + signs.just replacing of the values have been done .just go through it carefully,u will understand it

I am also confused by the Return statement, and I read through all the messages here to understand it better. Still have 1 question:
In this exercise, I was required to :
Add a line to return  age .
def calculate_age(current_year, birth_year):
(space, space)     age = current_year - birth_year
(space, space)      return age       ## why need the return statement?
my_age=calculate_age(2049,1993)
dads_age =calculate_age(2049,1953)
print(""My age is : “+str(my_age)+” and my dad’s age is : ""+str(dads_age))
==========================================
But “age” is never called elsewhere, then why do I need to put it inside the function ?
Without “return age”, I can still get the correct answer.
Tkx.




 text4459589540:

But “age” is never called elsewhere, then why do I need to put it inside the function ?


It won’t be called elsewhere since it is local to the function, only. Outside of the function, it becomes my_age and dads_age respectively on return from each call to the calculate_age function.
return is important when we want to hand a result back to the caller.

Hi Roy
Tkx, but I can get the same results even with the return statement.
So is it just for the exerice that I need to put it there, in future, it will be important in other programming?
Matthew Chiang




 text4459589540:

get the same results even with the return statement.


What happens when you remove the return statement?
my_age    =>  None
dads_age  =>  None

return is an integral part of functions as it gives us a channel to the caller by which data can be passed back.

Got it, many tkx for your fast response.
Can move on to the next!
Matthew Chiang

Thank you!  I like to read the suggested forum questions to make sure I understand a topic, and even though I figured out the problem, the instruction didn’t seem straightforward.  These answered helped me a lot.  Thanks, again!

I’ve read everything but still I didn’t understand what “return” is. Is there any website for it? Maybe I should see more samples.

Hello, i can understand your frustration . I was exactly where you are now. Kindly take a deep breadth and patiently follow the response to my question on same concern as responded by @patrickd314
First, and most important, you must differentiate a  function  from a  function call :

You have a  function , which is a series of lines beginning with a  function header
def function_name():
… often containing some variable names ( parameters ) within the parentheses. After that there are lines that are indented, that comprise the  function body . (The  function body  may or may not contain a  return  statement.)
Then, completely separately, you have a  calling statement , or  function call . The calling statement (obviously)  calls the function , which means that it tells the function to run, and also tells it what values (arguments) to assign to those parameters.


capture.png905×623 89.2 KB

Now. Here’s the magic: When the  calling statement  runs the function, the  return statement  returns the value calculated by the function to the calling statement, which can then  assig n that value to a variable. And that is what  result  is: a  variable  to which the returned value is  assigned . That variable,  result , can then (for instance, as it is here) be used to  print  the value.


Can you also explain why you have “result” as part of the body?


Please note that  result  is  not  a part of the body. It is part of the function call. The  body  has but one line,  return input_number/4
If, for some reason, you wanted to divide by a different number than 4 if, say, input_number had a certain value, you might have multiple return statements:
def divide_by_four(input_number):
     if input_number > 80:
         return input_number/8
     if input_number > 40:
         return input_number/4
     if input_number > 20:
         return input_number/2

Then if  input_number  is 100, the function will get to the first ‘if’, then say, “yes, it is greater than 80”, and will  return  80/8, or 10.0.  And then the function stops!!  So even though 100 is also greater than 40 and 20,  those lines will never be reached . That is what “return terminates the body of a function” means.

You see, when you write your code, return means you are telling the computer what to do. One example could be say if you want to tell the computer to  multiply 8 by 9, you would say return 8 * 9. This can be used after conditional statements too. I also had trouble understanding what return means, but I then figured it out.




 shomec:

say if you want to tell the computer to multiply 8 by 9, you would say return 8 * 9


While the function will return 72, it is not the return that tells the computer to multiply 8 by 9. 8 * 9 does that. The computer sees 72, and since it is given in a return statement, it carries out that action, sending 72 back to the caller.
return evaluation

where the evaluation takes places first, and the return thereafter.
"
25,"I spelled everything correctly, but still receive a NameError. Why?","FAQ,Python FAQ",,4,"
Question
Within a Python program, everything is spelled correctly, but I still receive a NameError. Why?
Answer
There are some possible reasons that a NameError can appear even if everything is spelled correctly in the code.
Reason 1: Inconsistent casing
One common reason is due to inconsistent casing of any variable names or functions. For example, Python will view Name and name as two completely different variables, despite them having the same spelling because the casing of each letter is not the same.
Code example
name = ""Monty""
print(Name)
# This will output a NameError because 
# the casing is not consistent.

Print(""Hi!"")
# This will output a NameError because 'Print' is not defined.

Reason 2: Ordering of the code
Another common reason is due to code ordering. The variable was used on a code line earlier than the code line where it was defined. Python generally processes the code from top to bottom, so if it encounters a variable not yet defined, it would throw a NameError.
Code example
print(year)
year = ""2018""
# A NameError will be thrown because year is not yet defined 
# when the first line of code runs.

","
Hello
The example presented during the lecture didn’t throw any NameError before SyntaxError has been cleared.
I would like to know why it doesn’t display both SyntaxError and NameErrors at the same time.
please reply.
Thank you.

Syntax is checked in the parsing stage, pre-compile, so those errors are raised before the code is even run. NameError is a runtime exception that will only be encountered when the code is being executed, post-compile.

Hello Roy
Your face reminds me an old friend in virginia.
Thank u for all those comments
"
26,How can rows in a plot have different numbers of columns?,"FAQ,Python FAQ",q-a,5,"
Question
In the context of this exercise in Matplotlib, how can rows in a plot have different numbers of columns?
Answer
In order to understand how rows of a plot can have different numbers of columns, we first need to understand how the subplot essentially works.
When you apply subplot, you are not actually setting permanent dimensions for the layout of the plot grid.
Instead, think of it as though each time you use subplot, with some specified values,  you are just creating a “virtual” or temporary grid layout placed on top of the entire plot area. After we place the subplot based on the layout of this grid, it is removed until we create a new subplot, with a new temporary grid.
For example, if we create a subplot as follows
ax1 = plt.subplot(2, 2, 1)
this will create a temporary 2x2 grid, and place the subplot at index 1 based on this 2x2 grid, which is the upper left.
And, if we wanted to add another subplot, say at the bottom right, we would do
ax2 = plt.subplot(2, 2, 4)
which again creates a temporary 2x2 grid, and places the subplot at index 4, which is the lower right area.
A way to visualize this would be
# [temp ] is used to signify temporary empty subplots
# when the virtual grid is applied.

# Adding ax1
[ ax1 ] [temp ]
[temp ] [temp ]

# Result plot
[ ax1 ]


# Adding ax2
[temp ] [temp ]
[temp ] [ ax2 ]

# Result plot
[ ax1 ] 
        [ ax2 ]

What essentially happens when we create a subplot is as follows:
It creates a temporary “virtual” grid on top of the entire plot area.
It places the subplot within the layout of that temporary grid at the specified index, based on that grid.
After the subplot is placed, that virtual or temporary grid disappears, and we have the subplots on the plot area, as we intended.
When we add another subplot, this process repeats.
","
Hi,
Just confirming for my knowledge: as we specify a 2x2 grid but only create one subplot in the first row, does that subplot automatically (and always) consume all of the space available in that row until another subplot is created in that row?
such as in the exercise, a 1x2 subplot in the top row and 2 1x1 subplots in the bottom row?

I found this article helpful:  https://towardsdatascience.com/subplots-in-matplotlib-a-guide-and-tool-for-planning-your-plots-7d63fa632857

I love the clarity of this explanation.

Does the ‘virtual’ grid without rows and columns?
"
27,"If most numbers can be represented as a float value, why would we need to use integers?","FAQ,Python FAQ",q-a,4,"
Question
If most integer values can be represented as a float by adding a decimal and a 0 after it, and float values have a much wider range of values that includes decimal values, why would we ever need to use integers over floats?
Answer
Although technically we can produce an equivalent value for most whole numbers by adding a decimal followed by a 0 after the number (1 and 1.0, 2 and 2.0, …), integer values are sometimes preferred, or necessary for certain situations.
For instance, it would be probably make more sense to use integer values to count things that do not have fractional values, like counting how many students are in a class, or the length of a string in Python, which is always a whole number (You will never have a string that is 2.5 characters long).
Another reason is that float values sometimes behave in unexpected ways due to how they are stored in computer memory, especially when using very large float values. So, if consistency is key for your program, integers might be a better choice.
Furthermore, certain data types in Python, such as lists, can only access elements by whole number indexes, and the range() function, which is a very useful function in Python, will only take whole numbers as input to generate a range of values.
","
Hi,
both of the below lines throw error:
print(release_year,\n,runtime,rating)
print(release_year+""\n""+runtime)
Can anyone tell me what is the valid syntax for inserting \n in middle of multiple variables?

When you are doing the command in question, you can’t mix different variable types. In this case, since you want to output a string, you need to change the release_year and runtime variables into strings in order to concatenate the whole thing.
print(str(release_year)+""\n""+str(runtime))

Thank you for the explanation!
"
28,What ways can we use to remove elements from a list in Python?,"FAQ,Python FAQ",,48,"
Question
In the context of this exercise, what ways can we use to remove elements from a list in Python?
Answer
In Python, there are several methods available that allow you to remove elements from a list.
The remove() method will remove the first instance of a value in a list.
list = [1, 2, 3, 1]
list.remove(1) # [2, 3, 1]

The pop() method removes an element at a given index, and will also return the removed item.
numbers = [10, 20, 30, 40]
ten = numbers.pop(0)
print(ten) # 10

You can also use the del keyword in Python to remove an element or slice from a list.
numbers = [50, 60, 70, 80]
del numbers[1:2]
print(numbers) # [50, 70, 80]

One other method from removing elements from a list is to take a slice of the list, which excludes the index or indexes of the item or items you are trying to remove. For instance, to remove the first two items of a list, you can do
list = list[2:]

","
in a task I was trying to delete first numbers of a list using .pop(0), when the list only have one element, the function didn’t work properly, why?

>>> [1].pop(0)
1
>>> a = [1]
>>> a.pop(0)
1
>>> a
[]
>>> def pop_zero(a):
	return a.pop(0)

>>> pop_zero([1])
1
>>> 

When you say it doesn’t work, what are you getting for a result? Please post your code.




 jephos249:

… to remove the first two items of a list, you can do
list = list[2:]



Actually, that does not remove items from list. Rather, it creates a new list that excludes the first two items of the original list and assigns it to list. The original list is unaltered.
The distinction between altering a list and creating a new list is significant. Observe the behavior of the following code, and refer to the included comments:
list_a = [1, 2, 3, 4, 5, 6, 7]
list_b = list_a
# Now list_a and list_b refer to the same list
print(list_a)
print(list_b)
# The following alters list_a and list_b, since they refer to the same list
list_a.append(8)
print(list_a)
print(list_b)
# Assign a new list to list_a that excludes the first two items
list_a = list_a[2:]
# Now list_a and list_b refer to different lists
print(list_a)
print(list_b)

Output:
[1, 2, 3, 4, 5, 6, 7]
[1, 2, 3, 4, 5, 6, 7]
[1, 2, 3, 4, 5, 6, 7, 8]
[1, 2, 3, 4, 5, 6, 7, 8]
[3, 4, 5, 6, 7, 8]
[1, 2, 3, 4, 5, 6, 7, 8]

>>> a = list('abcdefghijklmnopqrstuvwxyz')
>>> def foo(x):
    bar = x[:]
    del(x[7:17])
    return bar

>>> foo(a)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> a
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> 



Silliness
>>> def foo(x):
    bar = x[:]
    n = len(x) // 2
    del(x[n-1:n+1])
    return bar

>>> a = list('abcdefghijklmnopqrstuvwxyz')
>>> foo(a)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> a
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> foo(a)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> a
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> foo(a)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> a
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> foo(a)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> a
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> foo(a)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> a
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> foo(a)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> a
['a', 'b', 'c', 'd', 'e', 'f', 'g', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> foo(a)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> a
['a', 'b', 'c', 'd', 'e', 'f', 'u', 'v', 'w', 'x', 'y', 'z']
>>> foo(a)
['a', 'b', 'c', 'd', 'e', 'f', 'u', 'v', 'w', 'x', 'y', 'z']
>>> a
['a', 'b', 'c', 'd', 'e', 'v', 'w', 'x', 'y', 'z']
>>> foo(a)
['a', 'b', 'c', 'd', 'e', 'v', 'w', 'x', 'y', 'z']
>>> a
['a', 'b', 'c', 'd', 'w', 'x', 'y', 'z']
>>> foo(a)
['a', 'b', 'c', 'd', 'w', 'x', 'y', 'z']
>>> a
['a', 'b', 'c', 'x', 'y', 'z']
>>> foo(a)
['a', 'b', 'c', 'x', 'y', 'z']
>>> a
['a', 'b', 'y', 'z']
>>> foo(a)
['a', 'b', 'y', 'z']
>>> a
['a', 'z']
>>> foo(a)
['a', 'z']
>>> a
[]
>>> 






 mtf:

Silliness


Cool. 
The following demonstrates how we can use slicing to remove, add, and replace portions of a list. They alter the original list rather than replace it with a new list.
trees = [""white oak"",
         ""tuliptree"",
         ""blue spruce"",
         ""tamarack"",
         ""paper birch"",
         ""honey locust"",
         ""basswood""]

# remove items at indexes 3, 4, 5 by replacing slice with empty list
trees[3:6] = []
print(trees)
# add items starting at index 1 by replacing an empty slice with non-empty list
trees[1:1] = [""pawpaw"", ""river birch""]
print(trees)
# remove and add items at the same time by replacing a non-empty slice with non-empty list
trees[2:4] = [""giant sequoia"", ""ginkgo"", ""metasequoia""]
print(trees)
# duplicate a portion of the list
trees[3:3] = trees[3:5]
print(trees)
# remove all items from the list
trees[:] = []
print(trees)

Output:
['white oak', 'tuliptree', 'blue spruce', 'basswood']
['white oak', 'pawpaw', 'river birch', 'tuliptree', 'blue spruce', 'basswood']
['white oak', 'pawpaw', 'giant sequoia', 'ginkgo', 'metasequoia', 'blue spruce', 'basswood']
['white oak', 'pawpaw', 'giant sequoia', 'ginkgo', 'metasequoia', 'ginkgo', 'metasequoia', 'blue spruce', 'basswood']
[]

I’ve bookmarked your post and given it some thought. Can’t say this is derivative, but it stems from the root…
>>> a = list('abcdefghijklmnopqrstuvwxyz')
>>> a[7:17] == a[-19:-9]
True
>>> 

Most of those trees may exist where you are, but in our parts I feel joy whenever I see a river birch. The rest are not native to our region. We have slightly less rare stands of cottonwood, but mostly its aspen, willow, wild-berry (prickly rose, chokecherry, saskatoon). There are no ‘great trees’ on the prairies.

digger_in_the_valley.jpg720×640 104 KB

During the railroad era of a century ago they introduced spruce from the Jasper region, so we have lots of them around, but all human planted.

6a1ad9a81a972a6b18d69e28406fd22c1f18a6dc.jpeg720×720 60.3 KB

All those evergreens were put there by humans.
Not so easy to see, now, though,

34447_1220991864025_3611506_n.jpg720×576 87.9 KB


Yes, this is the form that  .pop() works, but i used something like that.
lst = […]
For n in range(len(lst)):
If lst[n] > 3:
lst.pop(n)
print(lst)
And in this case, when only was one element in the list and this element was grater than 3, the function didn’t delete the element from the list. I didn’t print the pop of the list (print(lst.pop(index)))




 edwinde19:

I didn’t print the pop of the list


Ultimately, as list methods go, that is one of the key roles that pop serves… It gives us the value it just removed. If the value is of no importance, then use another method, would be my leaning.
The del function is quick and ideal. It removes the slice of values and Bob’s yer uncle.
list.remove is also an option, but it looks for values, not indices.
Okay, now let’s get down to understanding your code.
We are given a list of some length. Now we are to iterate a range the length of the list. That will give us indices with which to poll the list. If the value at that index is greater than three then pop that index. Print the list at that point (or at the end, can’t tell).
Here’s the problem… When we remove an element from a list, it gets shortened by one. The range we’re iterating over doesn’t, so, at some point we will reach an index that is out or range since the list is shorter and that index no longer exists.

I first solved the exercises by creating a slice with just the remaining entries, which worked fine. I then thought I’d give the other possible ways to do it a try, i.e. .remove(), .pop(), del.
I really struggle with how .remove() and pop() works as it doesn’t do what one would think:

lst = [1, 2, 3, 4]
new_lst = lst
new_lst.remove(3)  # this should look up the value 3 in new_list and remove it
print(new_list)  # [1, 2, 4]
print(lst)  # [1, 2, 4]

I don’t quite understand why it is removing the entry also from lst. How could I create a copy of the original list that I can then manipulate to create a new subset of the original list without changing the original list?

Here are three ways. Uncomment each in turn to try them out.
lst = [1, 2, 3, 4]
#new_lst = lst[:]
#new_lst = lst.copy()
new_lst = list(lst)

new_lst.remove(3) # this should look up the value 3 in new_list and remove it

print(new_lst) 
print(lst) 

Output (for any of the three options shown):
[1, 2, 4]
[1, 2, 3, 4]


If your original list contains mutable objects (i.e., lists), and you experimant a bit, you will discover some interesting, possibly unexpected behavior.  To get around it, you will need to use copy.deepcopy:
lst = [1, [2, 3, 4]]
new_lst = lst[:]

print(new_lst[1])    # sublist
new_lst[1].remove(3) # this should look up the value 3 in new_list and remove it

print(new_lst) # [1, 2, 4]
print(lst) # [1, 2, 4]

print(""Now using deepcopy"")
import copy
lst = [1, [2, 3, 4]]
new_lst = copy.deepcopy(lst)

print(new_lst[1])
new_lst[1].remove(3) # this should look up the value 3 in new_list and remove it

print(new_lst) # [1, 2, 4]
print(lst) # [1, 2, 4]

Output:
[2, 3, 4]  # here is the sublist
[1, [2, 4]]  
[1, [2, 4]]     # original list affected
Now using deepcopy
[2, 3, 4]
[1, [2, 4]]
[1, [2, 3, 4]]  # original list unaffected


Thanks you very much for the answer.
I now understand that there does seem to be a difference in how matlab or VBA handles new matrices (lists) and Python. In matlab if I create a new matrix and assign an old one to it, I have 2 identical matrices that I can manipulate independently.
I am now trying to understand conceptually what python is exactly doing. So in my example, did I tell python to basically save a “link” (bookmark) to the other list instead of the list?

lst = [1, 2, 3, 4]
new_lst = lst

If so, what is happening in your example? The first “layer” seems to be copied as a copy (one can delete 1 without deleting it in the original list). But the second “layer” is a “link”?
Are there any good sources I could consult to learn how python organises its data? I now know what to do to get the desired result, but I would like to better understand why.

Phillip, you have very nicely summarized all three situations

alias: new_lst = my_lst

“shallow” copy (top layer only): new_lst = copy(my_lst) (& other methods, as above.)
“deep” copy (separate copy all the way down): new_lst = copy.deepcopy(my_lst)


If you Google “Python list copying” you get about 8.5 million hits;  here is one that summarizes things nicely

Addendum with respect to copying objects
When we want to be sure that our copy is indeed a copy, and not a reference to the original. check its id.
>>> p = [1, 2, 3]
>>> id(p)
140669632471176
>>> q = p
> id(q)
140669632471176
>>> 

If the ids match, it’s not a copy, but a reference, only.
>>> id(199)
140669688098336
>>> x = 199
>>> id(x)
140669688098336
>>> 

Above we can see how Python will give a number value an id. There is only ever one value in memory of any one number, never more. When we assign that number to a variable, it still has the same id.
That will be the case no matter what structure we use the number in.
>>> u = [1, 9, 19, 99, 199]
>>> id(u[4])
140669688098336
>>> v = {'one': 1, 'one-ninety-nine': 199}
>>> id(v['one-ninety-nine'])
140669688098336
>>>

As for copies, that is true copies, or clones,
>>> id(u)
140669625218312
>>> w = u.copy()
>>> id(w)
140669625233288
>>> id(w[4])
140669688098336
>>> 

Note the last id. Granted the two lists are unique, now, but any values they have in common ARE the same value in memory.
This parallels through all objects, regardless their data type. There is only ever one of any one value in memory.

Thank you, for taking the time to respond. This is very helpful. The link also cleared a couple of things up for me.
@mtf: Thank you very much as well. I think the id() check will be very useful going forward.

Hi guys.
What do you think about my way to solve this task? It’s quite different than the original solution what we get by pressing the solution button.


When working with lists we always need to consider whether we wish to intentionally mutate or possibly destroy the original list, as has been discussed. Can we do this without affecting the original?
Yes, we can…
>>> def delete_starting_evens(lst):
	for i, x in enumerate(lst):
		if x % 2:
			return lst[i:]
	return []

>>> lst = [2,4,6,7,6,5,4,3]
>>> delete_starting_evens(lst)
[7, 6, 5, 4, 3]
>>> delete_starting_evens([])
[]
>>> delete_starting_evens([2,4,6,8,10])
[]
>>> lst
[2, 4, 6, 7, 6, 5, 4, 3]
>>> 

Direct inputs don’t matter since they only exist in the argument, not somewhere in memory. A list that exists in memory is mutable by the function we pass it into. How we manipulate the list inside the function has a direct effect on the list in memory.
Bottom line, if it is not our clear intention to mutate an existing data structure, then special care must be taken to either not alter the list, or to create a spin-off list of only the data we want and return that; or, like above, don’t alter the list in any way and only return the portion (slice) of the list that suits our purpose.

I don’t quite grasp how the provided solution function works (see solution), specifically with lst = lst[1:]
If a list parameter were to consist of only 1 number–as becomes any list consisting of only even numbers as it is processed by the loop function–which would have an index of 0, how does using the slicing language lst[1:] function properly in this case?

i think the “for i in lst” statement  makes the program iterate through every component and len(lst)>0
condition makes sure before the loop starts to run both of the conditions are met; so if lst has only one component , it will satisfy the condition of len(lst)>0 beside the modulo operator condiditon and while loop will run.

i didn’t get how the duplication part works
"
29,How to randomize the card selection,"FAQ,Python FAQ","lists-dictionaries,q-a",9,"
Hey fellow learners.
I thought of a fun twist to this interesting exercise - I thought  - it would be much more thrilling if the cards were actually randomly assigned, rather than written in by the corresponding key.
I’ve written and run the code, myy result was:
Your past is the Justice card.
Your present is the Strength card.
Your future is the The Magician card.
You can try to write the code on your own, here are some tips:

We need numpy.py -  we’ve used this library before. We can bring its functionality into our program with a command: import numpy as np . As a reminder numpy is a mathematic library with a bunch of useful functions.

numpy.random.choice() will be the most suitable option to choose the card. It takes a list of numbers and returns a random choice from that list.
In order to retreive each card will need to use the list of all available card indices, which hold all the currently present keys in the tarot list as an argument for np.random.choice().  Convenient for us, once the card is ‘popped’ it disappears from the list together with its index, and if we update the list each time np.random.choice() won’t consider that index again.

If you’re stuck somewhere or it’s too difficult here’s the code:
tarot = { 1:	""The Magician"", 2:	""The High Priestess"", 3:	""The Empress"", 4:	""The Emperor"", 5:	""The Hierophant"", 6:	""The Lovers"", 7:	""The Chariot"", 8:	""Strength"", 9:	""The Hermit"", 10:	""Wheel of Fortune"", 11:	""Justice"", 12:	""The Hanged Man"", 13:	""Death"", 14:	""Temperance"", 15:	""The Devil"", 16:	""The Tower"", 17:	""The Star"", 18:	""The Moon"", 19:	""The Sun"", 20:	""Judgement"", 21:	""The World"", 22: ""The Fool""}

#importing numpy
import numpy as np
spread = {}

#following loop updates the available card list each turn 
#and creates needed dictionary entries, while removing used cards
for each in ['past','present','future']:
  cards_left = list(tarot.keys())
  spread[each] = tarot.pop(np.random.choice(cards_left))
  
for key, value in spread.items():
  print(""Your {} is the {} card."".format(key, value))

","
Yours is a much cleaner method than what I came up with, but I haven’t gone through a Numpy course (yet).  I know of the random library though , so I came up with the below.
# Create a list of 3 random numbers to pull for the tarot cards.
random_lst = []
for i in range(3):
  rand_num = random.randint(1,22)
  while rand_num in random_lst:
    rand_num = random.randint(1,22)
  random_lst.append(rand_num)

spread = {}
spread['past'] = tarot.pop(random_lst[0])
spread['present'] = tarot.pop(random_lst[1])
spread['future'] = tarot.pop(random_lst[2])

I am using the base code that the project used, and just randomly coming up with which key’s to pop.

You came up with that just with the knowledge from this course or did you had some other coding experience? I’m asking cause there’s no way I could do it and I’m wondering if I’m just stupid or people like you had some other experiences that learned them how to think like a programmer.
Man, I don’t even fully understand what your code is doing 

My code is doing the following.

Generating a random number between 1 and 22
Verifying that that number hasn’t already been selected by seeing if it is in ‘random_lst’
Adding the new number to the ‘random_lst’
After the above is complete I have the ‘random_lst’ list with 3 different and random numbers that I can use as key’s to pull the values with from the tarot dictionary.

Everything except maybe the random library has been covered up to this point.
I have limited coding experience from my job, but all that experience is in C++ and is very basic automation control.  With that said, I do have an technical degree that required a couple programming classes, but nothing overly advanced.
Just keep with it and you’ll get there.

I don’t understand why we need numpy.
I just uses random and it works. Is there a specific reason you use it?

numpy library has a larger variety of mathematical functions, thus is more preferred generally speaking instead of adding for example the random and sqrt function from separate modules.

import random

tarot = { 1:	""The Magician"", 2:	""The High Priestess"", 3:	""The Empress"", 4:	""The Emperor"", 5:	""The Hierophant"", 6:	""The Lovers"", 7:	""The Chariot"", 8:	""Strength"", 9:	""The Hermit"", 10:	""Wheel of Fortune"", 11:	""Justice"", 12:	""The Hanged Man"", 13:	""Death"", 14:	""Temperance"", 15:	""The Devil"", 16:	""The Tower"", 17:	""The Star"", 18:	""The Moon"", 19:	""The Sun"", 20:	""Judgement"", 21:	""The World"", 22: ""The Fool""}

def tarot_card():
  spread = {}
  spread[""past""] = tarot.pop(random.choice(list(tarot)))
  spread[""present""] = tarot.pop(random.choice(list(tarot)))
  spread[""future""] = tarot.pop(random.choice(list(tarot)))
  for key, value in spread.items():
    print(""Your "" + key +"" is the "" + str(value) + "" card."" )

tarot_card()


good stuff. simple, clean, easy to read and understand. well done.

import random
spread= {}

for i in [""past"", ""present"", ""future""]:
  card_left = list(tarot.keys())
  spread[i] = tarot.pop(random.choice(card_left))
  print(""Your {} is the {} card."".format(i, spread.get(i)))

"
30,How to randomize the card selection,"FAQ,Python FAQ","lists-dictionaries,q-a",9,"
Hey fellow learners.
I thought of a fun twist to this interesting exercise - I thought  - it would be much more thrilling if the cards were actually randomly assigned, rather than written in by the corresponding key.
I’ve written and run the code, myy result was:
Your past is the Justice card.
Your present is the Strength card.
Your future is the The Magician card.
You can try to write the code on your own, here are some tips:

We need numpy.py -  we’ve used this library before. We can bring its functionality into our program with a command: import numpy as np . As a reminder numpy is a mathematic library with a bunch of useful functions.

numpy.random.choice() will be the most suitable option to choose the card. It takes a list of numbers and returns a random choice from that list.
In order to retreive each card will need to use the list of all available card indices, which hold all the currently present keys in the tarot list as an argument for np.random.choice().  Convenient for us, once the card is ‘popped’ it disappears from the list together with its index, and if we update the list each time np.random.choice() won’t consider that index again.

If you’re stuck somewhere or it’s too difficult here’s the code:
tarot = { 1:	""The Magician"", 2:	""The High Priestess"", 3:	""The Empress"", 4:	""The Emperor"", 5:	""The Hierophant"", 6:	""The Lovers"", 7:	""The Chariot"", 8:	""Strength"", 9:	""The Hermit"", 10:	""Wheel of Fortune"", 11:	""Justice"", 12:	""The Hanged Man"", 13:	""Death"", 14:	""Temperance"", 15:	""The Devil"", 16:	""The Tower"", 17:	""The Star"", 18:	""The Moon"", 19:	""The Sun"", 20:	""Judgement"", 21:	""The World"", 22: ""The Fool""}

#importing numpy
import numpy as np
spread = {}

#following loop updates the available card list each turn 
#and creates needed dictionary entries, while removing used cards
for each in ['past','present','future']:
  cards_left = list(tarot.keys())
  spread[each] = tarot.pop(np.random.choice(cards_left))
  
for key, value in spread.items():
  print(""Your {} is the {} card."".format(key, value))

","
Yours is a much cleaner method than what I came up with, but I haven’t gone through a Numpy course (yet).  I know of the random library though , so I came up with the below.
# Create a list of 3 random numbers to pull for the tarot cards.
random_lst = []
for i in range(3):
  rand_num = random.randint(1,22)
  while rand_num in random_lst:
    rand_num = random.randint(1,22)
  random_lst.append(rand_num)

spread = {}
spread['past'] = tarot.pop(random_lst[0])
spread['present'] = tarot.pop(random_lst[1])
spread['future'] = tarot.pop(random_lst[2])

I am using the base code that the project used, and just randomly coming up with which key’s to pop.

You came up with that just with the knowledge from this course or did you had some other coding experience? I’m asking cause there’s no way I could do it and I’m wondering if I’m just stupid or people like you had some other experiences that learned them how to think like a programmer.
Man, I don’t even fully understand what your code is doing 

My code is doing the following.

Generating a random number between 1 and 22
Verifying that that number hasn’t already been selected by seeing if it is in ‘random_lst’
Adding the new number to the ‘random_lst’
After the above is complete I have the ‘random_lst’ list with 3 different and random numbers that I can use as key’s to pull the values with from the tarot dictionary.

Everything except maybe the random library has been covered up to this point.
I have limited coding experience from my job, but all that experience is in C++ and is very basic automation control.  With that said, I do have an technical degree that required a couple programming classes, but nothing overly advanced.
Just keep with it and you’ll get there.

I don’t understand why we need numpy.
I just uses random and it works. Is there a specific reason you use it?

numpy library has a larger variety of mathematical functions, thus is more preferred generally speaking instead of adding for example the random and sqrt function from separate modules.

import random

tarot = { 1:	""The Magician"", 2:	""The High Priestess"", 3:	""The Empress"", 4:	""The Emperor"", 5:	""The Hierophant"", 6:	""The Lovers"", 7:	""The Chariot"", 8:	""Strength"", 9:	""The Hermit"", 10:	""Wheel of Fortune"", 11:	""Justice"", 12:	""The Hanged Man"", 13:	""Death"", 14:	""Temperance"", 15:	""The Devil"", 16:	""The Tower"", 17:	""The Star"", 18:	""The Moon"", 19:	""The Sun"", 20:	""Judgement"", 21:	""The World"", 22: ""The Fool""}

def tarot_card():
  spread = {}
  spread[""past""] = tarot.pop(random.choice(list(tarot)))
  spread[""present""] = tarot.pop(random.choice(list(tarot)))
  spread[""future""] = tarot.pop(random.choice(list(tarot)))
  for key, value in spread.items():
    print(""Your "" + key +"" is the "" + str(value) + "" card."" )

tarot_card()


good stuff. simple, clean, easy to read and understand. well done.

import random
spread= {}

for i in [""past"", ""present"", ""future""]:
  card_left = list(tarot.keys())
  spread[i] = tarot.pop(random.choice(card_left))
  print(""Your {} is the {} card."".format(i, spread.get(i)))

"
31,What happens if there are empty or missing values in a CSV file?,"FAQ,Python FAQ",q-a,5,"
Question
In Pandas, what happens if there are empty or missing values in a CSV file and we try to read it?
Answer
If the CSV file contains missing values, then when we read the file, it will populate the missing cells with NaN. NaN is short of “Not a Number”, and used to signify missing values.
If needed, we can replace these NaN values with an actual value, like 0 or an empty string '', using the fillna() method. Or, we can drop any rows that contain an empty value, using dropna().
For example, if we had a CSV file containing the following:
name,flavor,topping
,chocolate,chocolate shavings
Birthday Cake,,gold sprinkles

The second row is missing a value in the first column, and the third row is missing a value in the second column.
When we read this file using Pandas read_csv, it will load it like so, filling in the missing values with NaN.
name             flavor        topping
NaN              chocolate     chocolate shavings
Birthday Cake    NaN           gold sprinkles

","
I am wanting to begin applying my lessons starting at this point in the curriculum.  I have saved a file to my hard drive “11 11 CSV file.csv”.  I placed in on the desk for simplicity’s purpose.
I tried to call it in both Codecademy’s IDE as well as the one downloaded from python.
In addition to the line of code: “pd.read_csv(‘11 11 CSV file.csv’)” what else do I need to do to begin working with this data?
I am operating on a Mac.  If there was a recommended IDE for Mac I would be curious about your suggestion for this as well.

i would have to guess that the csv file you want to use has to be in the same directory as you are working.  Otherwise it will not be able to find it.

Personally, I use Visual Studio Code IDE and would certainly recommend it.
After importing pandas and creating the csv file, you can call the file from basically anywhere. Just specify the path in the argument passed.
pd.read_csv('C:\\Users\\Akashdeep\\Desktop\\Test\\test.csv')

Here what I have done is create e folder named Test in my Desktop and inside it my test.csv file is there.

I was also interested in a case when there were not enough commas and tried the following CSV file:
name,flavor,topping
chocolate,chocolate shavings
Birthday Cake,gold sprinkles

The result seems to have NaN added to the end of the rows:
name                 flavor                topping
chocolate            chocolate shavings    NaN
Birthday Cake        gold sprinkles        NaN

"
32,"What are the differences between instance variables and class variables, or why do I need to use `self.pi`?","FAQ,Python FAQ",q-a,28,"
This section was really difficult! I think it’s gonna take some time for me to really understand OOP. Can anyone point me to any good books or somewhere to practice this?
I have a question about this assignment. I’m really struggling with it.
class Circle:
  pi = 3.14
  def __init__(self, diameter):
    print(""Creating circle with diameter {d}"".format(d=diameter))
    self.radius = diameter / 2
  def circumference(self):
    circumference = 2 * self.pi * self.radius
    return circumference

I get that self.pi refers to the variable pi in the Class. Why is there a self.radius, but there is no variable for it? It looks like the method circumference(self) is calling it even though it was defined in  init (self, diameter). Is it because  init  is a special constructor?
","
In Python, it is an instance attribute constructor only, since the object exists the moment it is instantiated. Try removing the method and see if it prevents us from creating a new instance.
I can save you the trouble and tell you, no; it won’t have any bearing. A new instance can be created. It just won’t have any instance variables, only the methods and class variables it inherited.
One thing to note is that there is no record of diameter apart from its transient role in the instance intialization. Once that method has run its course, it no longer exists.
The variable that is preserved is radius, and every instance has the value set for this that was computed from the diameter when the instance was created. Because we are working with a singular code base serving multiple instances, we need to know which instance is accessing this code.
instance = Circle(10)

The instance can access the circumference method with no arguments, since self creates a binding to it and is able to access its radius attribute, 5.
instance.circumference()    # 31.4

I wonder why it is written this way:
class Circle:
  pi = 3.14
  def __init__(self, diameter):
    print(""Creating circle with diameter {d}"".format(d=diameter))
    # Add assignment for self.radius here:
    self.radius = diameter / 2
    
  def circumference(self):
    return self.radius * Circle.pi * 2

Instead of this way?:
class Circle:
  pi = 3.14
  radius = 0  #<----------------
  def __init__(self, diameter):
    print(""Creating circle with diameter {d}"".format(d=diameter))
    # Add assignment for self.radius here:
    self.radius = diameter / 2
    
  def circumference(self):
    return self.radius * Circle.pi * 2

I think maybe @aorchowski was asking the same thing.  It seems to me that there is a variable scope issue in the former. Right?
Or will there be an inheritance issue with placing “radius = 0” as a Class level attribute?
Will it create two attributes, one for self and one for the “Circle” class?

There won’t be a scope related issue and setting radius as a class variable has no effect since the instance variable overrides that.



 makebuildmodify:

Will it create two attributes, one for self and one for the “Circle” class?


No, just the one will exist, the instance variable. Instances all inherit the same class variables but any one instance can assign a new value to the variable since it is accessed the same way.
instance.radius = new_radius

Now that instance has its own unique value for the radius, making it essentially an instance variable.

I see. That makes sense.
What if “Circle.radius” is used? Will it now be a class level attribute and be inherited by instances ?
class Circle:
  pi = 3.14
  radius = 0
  def __init__(self, diameter):
    print(""Creating circle with diameter {d}"".format(d=diameter))
    # Add assignment for self.radius here:
    Circle.radius = diameter / 2  #<-----------------------
    
  def circumference(self):
    return Circle.radius * Circle.pi * 2  #<-----------------------

It seems to me that constants  pi and radius (when expressed as half the diameter) should be class level attributes




 makebuildmodify:

What if “Circle.radius” is used?


That would be non-standard. It should be an instance variable with self.

Interesting. In this video the instructor talks about both instance variables and class variables and why you would use them. Maybe I’m confusing the use case.


how can i access the argument passesd at the time of instance in another method?
here what i want to say:
class test:
def init(self,name):
self.shame = name
def func(self):
return name
if i run
foo = test(“trial_name”)
print(foo.func())
i should get “trial_name” printed




 iamsrj99:

class test:
def init (self,name):
self.shame = name
def func(self):
return name


class test:
  def init(self,name):
    self.name = name
  def func(self):
    return self.name

foo = test('trial_name')
print (foo.func())    # trial_name


Can you explain this again?
How are we able to get self.radius?
It is because we have diameter as an argument in method?
Or we just can create any instance variable with the value we define.

radius would be a computed value if the parameter is diameter. I would write a separate method since we want the radius to reflect the currrent diameter, and we may want our class to allow that to be changeable.
def  get_radius(self):
    return self.diameter / 2

I’ll need to be apprised of the exercise, so please post a link and we can look at this a little further.

class Circle:
pi = 3.14
def init(self, diameter):
print(“Creating circle with diameter {d}”.format(d=diameter))
# Add assignment for self.radius here:
self.radius = diameter / 2

Ah, so the instructions stipulate writing the radius as a part of the initialization. This will be okay  if the circle instance is to be static, and unchangeable.
Note that the instance has no diameter attribute, only a radius computed from the parameter.

I am having trouble understanding why in:
def circumference(self):
return 2 * self.pi * self.radius
We use self.pi instead of just pi. I understand why we use self.radius because we have defined it above but not pi.

pi is a class variable:
class Circle:
  pi = 3.14 # class variable


class variables are automatically added to self.
if you intent to use pi, how is that defined within the scope of circumference method?

Two questions if I may:


Why do we write self.radius and self.pi the same when we are creating the circumference method? pi is a class parameter and self.radius is an instance variable, no?


Why can’t def circumference(self): be at the same indentation as the self.radius code?


TIA!

to access class variables, instance variables and methods within a method you need self.
class variable and methods are automatically added to self



 petercook0108566555:


Why can’t def circumference(self): be at the same indentation as the self.radius code?



Why would you want to do that? You want to add the method to the class, not the constructor

It simply depends upon how you want to construct the class, and what you want each object to do.  In real life, i.e., when not following a lesson plan, you can do it almost any way that you want.
In this particular design,
self.radius sets an attribute of the particular Circle object.
circumference() is a method of the Circle object.
Since the circumference (and area) of a given circle are fixed, self.circumference and self.area could indeed be included in the constructor to establish those values as object attributes. However, presumably in order to easily illustrate attributes and methods, the course author chose not to do it that way.

I’m having some issues with classes but as i go over it more it gets more understandable. I think just a bit more practice than other topics is fine.
its not as complex as you think but at the start it is a bit dodgy

To reiterate, there is a case for using self on all variables, whether class or instance.
Consider,
>>> class Circle:
  pi = 3.14
  radius = 0
  def __init__(self, diameter):
    print(""Creating circle with diameter {d}"".format(d=diameter))
    Circle.radius = diameter / 2

  def circumference(self):
    return Circle.radius * Circle.pi * 2

>>> this = Circle(10)
Creating circle with diameter 10
>>> this.circumference()
31.400000000000002
>>> that = Circle(100)
Creating circle with diameter 100
>>> that.circumference()
314.0
>>> this.circumference()
314.0
>>> this.radius
50.0
>>> 

Notice that this is no longer what it was initialized as? That is because the class variable radius has been overwritten with the new computed  that value.
Now let’s see it when we use self…
>>> class Circle:
  pi = 3.14
  def __init__(self, diameter):
    print(""Creating circle with diameter {d}"".format(d=diameter))
    self.radius = diameter / 2

  def circumference(self):
    return self.radius * self.pi * 2

>>> this = Circle(10)
Creating circle with diameter 10
>>> that = Circle(100)
Creating circle with diameter 100
>>> this.circumference()
31.400000000000002
>>> that.circumference()
314.0
>>> this.radius
5.0
>>> that.radius
50.0
>>> 

Each instance is unique to the point that even the value for pi can be set in each.
"
33,Can we perform the same operations on multi-line strings that we perform on other strings?,"FAQ,Python FAQ","python-syntax,q-a",6,"
Question
Can we perform the same operations on multi-line strings that we perform on other strings?
Answer
Yes, operations like concatenation can be performed to combine multi-line strings with single-line strings because strings created using the two techniques are both actually of the same type.
Representing String Literals in Python
In Python, a variety of techniques can be used to represent string literals in code. Each technique offers particular advantages, but all of the techniques create the same type, namely a string. Since they all create the same type of string object, concatenation can be used to combine two strings, regardless of whether they were created using different techniques.




Technique
Reasons for Using It




Double quote delimiter
Can include single quotes in the string without using an escape sequence


Single quote delimiter
Can include double quotes in the string without using an escape sequence


Raw string
Can include literal escape sequences in the string


Triple double quote delimiter
Can include multiple lines in the string without using an escape sequence


Triple single quote delimiter
Can include multiple lines in the string without using an escape sequence



Credit for this post goes to @appylpye. We hope this helps.
","
Hello, sir.
Would you be so kind to provide examples to this?
Thank you in advance.

I agree that examples will be helpful.

Here is a concatenation multi-line example where two long multi line strings from a poem are added together.
first_Multi_Line_String = """"""Had I the heaven's embroidered cloths,
Enwrought with golden and silver light,
The blue and the dim and the dark cloths 
Of night and light and the half-light;
I would spread the cloths under your feet""""""

second_Multi_Line_String = """""" But I, being poor, have only my dreams;
I have spread my dreams under your feet;
Tread softly because you tread on my dreams.""""""

print(first_Multi_Line_String + second_Multi_Line_String)

##RESULT:

Had I the heaven’s embroidered cloths,
Enwrought with golden and silver light,
The blue and the dim and the dark cloths
Of night and light and the half-light;
I would spread the cloths under your feet
But I, being poor, have only my dreams;
I have spread my dreams under your feet;
Tread softly because you tread on my dreams.


test = ""bsh   

nd""

test_1 = 'haj 

sn'

test_2 = """"""hkjav

lk  jf""""""

When printing the three variable out, the previous output incurred an EOL error except the last one.
Hello, I have a question about quotation usage. Please see the above example. So does that mean only triple quotation marks can be used for multi-lines comments?

Yes, only triple quotation marks can create multi-lines comments.
"
34,Why didn’t my product display on the screen?,"FAQ,Python FAQ",q-a,10,"
Question
I’ve defined the product as asked and assigned it a value, but it isn’t displayed to the terminal. Why is this?
Answer
Computers must be told what to do at every step of the way. If you don’t tell it to print something to the screen it has no way of knowing you wanted product displayed to you. If you want, you could add print product to the next line to see the result of your multiplication.
Also! If at any time you do see something that you didn’t explicitly print, it may be because of tests being run by Codecademy that would not normally appear outside of our environment here.
","
I tried adding print commands before but it only displays ‘product’ (or the name of the other variable) in the terminal, also after refreshing, why is this?

Have you tried writing without using quotations? just put print(x) instead of print(“x”).
I believe that when you put quotes, it uses the content as a string or integer, rather than an item in your code, in this case, the output of the variable.
I could be wrong, but I think that’s it!

I Have tried with and without quotations but maybe I should have added the parenthesis to name the variable product?
Thanks for helping me out @ekulbyrnes
And now I concluded that I only needed to remove the parenthesises and quotations

I had the same question and figured it out. To display the answer to the arithmetic problem 12 x 8 I used this code to get the answer to display. Since it knows that the math is multiplication you don’t need to have the word product anywhere in the code anymore.
Code: print (12 * 8)
Displayed Result: 96

Thank you I tried and it worked

thnx buddy…it really works

I am probably understanding you wrong,but this is not working for me.I print on one line multiply=12*8 and on the second print product.I’ve tried with parentheses but it still hasn’t worked.Could I get some help?

I took an easier approach. Thanks to @contentmazzone I was able to tell Python that I wanted to see the answer (before it wasn’t showing and I didn’t understand why, the lesson also didn’t explain why either).
My Code looked like this before:
product = 18 * 3
remainder = 1398 % 11

The lesson didn’t specify that I had to use % instead of / and I automatically assumed, at least with division, it’d be / and not %. So I ended up reading this thread for help.
So now the difference in code would be as follows:
product = 18 * 3
print product
remainder = 1398 % 11
print remainder

And when I run the command the answer to both the questions are:
234
1


(oops, I rest my case, it does tell you to use % haha)

"
35,Am I able to check for multiple error types with one try and except statement?,"FAQ,Python FAQ",,21,"
Question
In Python, am I able to check for multiple error types with one try and except statement?
Answer
Yes, it is possible to check multiple error types with a single try and except statement.
For the except, we can include multiple error types listed within a tuple. It will check if any of the listed errors are encountered.
You can also do a general except without a specified error type, but that is not recommended as it will catch any errors, including ones we don’t want to check.
Example
# Multiple error types listed.
try:
  line of code
except(TypeError, NameError, ...):
  ...  

# Not recommended
try:
  line of code
except:
  ...

","
How to handle any unexpected error which occurred while running the code?

There should not be any. Of course, during development, errors will always occur, but that is what debugging is for. Once you submit your code to whoever requested it, you should be confident that it will run without error for any input within the agreed-upon preconditions.

if an error occurs, you can fix the error in the code and handle the way you want it.
@patrickd314, there are very few people who can write bug free code, after deployment there is usual ongoing development to fix bugs and add new features.

@stetim94: Quite so.




 jephos249:

without a specified error type


Hi, guys and girls. Help me understand this, please.
Let me see if I understood if I use an except without a specified error type the code will catch every kind of error, right?
I just didn’t understand why would we want only some kind of error. Python already doesn’t do it automatically?

One special case may be that we only wish to catch a certain type of error, which we then handle, otherwise we let Python raise the exception. This is because we want to understand the underlying condition that raised the error (a likely problem in our code) and then address that issue in the code so the error never comes up again.

Sometimes we may elect to tailor a remedy to the specific type of error that occurred. For example, if we are validating user input, we can provide an appropriate message when a problematic value is entered. See the following example:
# Slice the pizza!
pizza_mass = 320.0 # 320.0 grams
while True:
  try:
    num_slices = int(input(""Serve the pizza as how many slices? ""))
    slice_mass = pizza_mass / num_slices
  except ValueError: # Input cannot be interpreted as an int.
    print(""Enter an integer, please."")
    continue
  except ZeroDivisionError: # Input was 0.
    print(""Cannot serve it as zero slices."")
    continue
  if num_slices < 0: # Input was negative.
    print(""Cannot serve a negative number of slices."")
    continue
  break

print(""The mass of each pizza slice is {:0.2f} grams."".format(slice_mass))


Is function except looks like a function that ignores standard error that we defined with condition statement?

except, when given an error type will only trap errors of that type. All others will be handled by the interpreter as raised exceptions. Does this make sense to you?

so in what purpose we use the except function actually? Does std error good for debugging codes?

The aim of except is to permit us to define a default action for error types we can identify as probable in our code. The other types should not be subverted, but allowed to raise exceptions if they occur.
We may not have considered the full range of errors possible in our code so must rely on the interpreter to catch them for us. If we are not fully aware of the types of errors our code might raise, then all the more reason to not short circuit error handling but leave it for the interpreter so we can learn from the experience. Exceptions are our chief debugging tool, but must not become a crutch. Learn the causes behind errors and write code to insulate from them.
Bottom line, study and learn all the possible exceptions and their causes so we can recognize code that might raise one. Without this knowledge, we should not use except in our code, but rather let the program terminate on raised exceptions. Use the traceback information to seek out all possible causes, and note the type. It’s a learning process. except is not meant as a workaround.

Thanks for the explanation. Really help.

I can’t seem to grasp this concept. What I under is… ‘except’ is used to catch input errors the user may encounter and acts accordingly based on their input??

Lots of things can happen that will raise an exception in the runtime session. We depend upon this to alert us of issues in our code. It’s not something we would ever simply turn off, but try...except allows us to at least catch the identifiable error types, that is, those we know might occur with varying user inputs, etc.
Let’s examine a Scrabble dictionary, for example…
# scrabble letter scores dictionary
letters = [""ABCDEFGHIJKLMNOPQRSTUVWXYZ ""]
points = [1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 
3, 4, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10, 0]
lookup = dict(zip(letters, points))

We know what will happen with a wrong input, but let’s just look at it to see the error type that gets raised…
>>> lookup['a']
Traceback (most recent call last):
  File ""<pyshell#12>"", line 1, in <module>
    lookup['a']
KeyError: 'a'
>>> 

This error was caused only because the case didn’t match, so we fix that and run it again.
letters = [""ABCDEFGHIJKLMNOPQRSTUVWXYZ ""]
letters += [x.lower() for x in letters]
points = [1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 
3, 4, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10, 0]
lookup = dict(zip(letters, points * 2))

>>> lookup['a']
1
>>> lookup['q']
10
>>> lookup['z']
10
>>> lookup[' ']
0
>>> lookup['&']
Traceback (most recent call last):
  File ""<pyshell#21>"", line 1, in <module>
    lookup['&']
KeyError: '&'
>>> 

That gets rid of the case difference issue, and it doesn’t add that greatly to the data load. Sure we can address it in the code, but why go to the bother if we’ve done it here? We still have the errant input issue to deal with, as witnessed above.
def get_letter_score(letter):
    return lookup[letter]

This gives us something to build upon and improve that will be re-usable.
>>> get_letter_score('&')
Traceback (most recent call last):
  File ""<pyshell#22>"", line 1, in <module>
    get_letter_score('&')
  File "".../scrabble_letter_scores_dictionary.py"", line 12, in get_letter_score
    return lookup[letter]
KeyError: '&'
>>> 

Note that it was the polling of the lookup object that raised the error (we can see that identified in the error message). This is where we insert our try..except…
def get_letter_score(letter):
    try:
        return lookup[letter]
    except:
        pass

Notice that I’ve only added except to prevent an EOF error while parsing. It is expected with try. We’ve not added any handling yet so won’t see an exception raised. Nothing will happen.
>>> get_letter_score('z')
10
>>> get_letter_score('&')
>>> 

Now we can select the error type to isolate. All the rest will be trapped by the interpreter.
def get_letter_score(letter):
    try:
        return lookup[letter]
    except KeyError:
        return print (""Wrong alphabet!"")

>>> get_letter_score('&')
Wrong alphabet!
>>> 

>>> get_letter_score(a)
Traceback (most recent call last):
  File ""<pyshell#28>"", line 1, in <module>
    get_letter_score(a)
NameError: name 'a' is not defined
>>> 

See how other exception is not interfered with?

Really good! Thank you mtf. 

So it is more useful to use except for error types we already understand.

Purpose is the determining factor. There is no one correct or explicit way. We are the determiners. It is up to us which path we choose. Sorry to be so general. Every situation creates its own dimensions. There is no one right way,
Exceptions are there to not only warn us, but to stop the process since from that point on it would be feeding garbage into the program. We want to be aware of those outcomes so we can design around them. With the right design those outcomes are not possible.
When user input comes into play we have to double the guards. It’s usually str type if it has come from a standard input. Our program needs a layer of insulation that confirms the data is fit to pass to the other side. String data is one thing, but numeric data is quite another.
Our program needs to confirm that the string data can be recast as a number type, whether int or float doesn’t matter. There are no coercive measures in Python that I’m aware of so the built-ins are the way to go. That is a vector on which we can plan for an exception Do we trap it, or do we test for it? This is the real question.

Thank you. This is insightful.

What is the raise statement used in the exercise?
"
36,When should functions generally be created?,"FAQ,Python FAQ",,11,"
Question
In general, when should functions be created in the code?
Answer
It is usually best to create a function if some process or calculations in code have to be repeated multiple times.
Creating a function will save you time from having to rewrite code lines over and over, by only having to write them once within the function. Furthermore, this can keep the code cleaner and more concise, which also will improve maintainability of the code, since we would only have to look at the code in the function one time when debugging.
","
Can’t you just assign some text to a variable?

That would be a literal assignment. What of a dynamic one?

Whenever we define a function, do we have to write def in the beginning?. For example, in the exercise it starts with def greet_customer():. Also, why colons are used after the parentheses?.

the def keyword is mandatory when defining a function, unless you want to get an error when running your code.  Next, : (colons) are to indicate a code block that belongs to that line. You must indent after a :.
#this is my function
def my_function(): # <- :  means we must indent. it belongs to the function
       print(""Im a part of this function"") 

print(""Hello! Im not a part of this function!"") 

#this code isn't indented the same level as the previous print is...
# It doesn't belong to the function.

: are used in for loops, if/elif/else conditional statements, and others that you will learn later.
I hope this helps.

Thanks…it’s clear now

Thank you for this great answer.
But I just want to confirm that for any code block (function, for loops etc), after the : any lines that are indented become part of that code block, right?
Then to break the code block we just stop the indentation?




 booga:

after the : any lines that are indented become part of that code block, right?


That is correct. It’s important that indentation is consistent for each block level.
def func():
    for ...:
        if ...:
            # code
        else:
            # code
    return ...

Hello,
Can someone explain to me what the difference is between calling a function and printing a function?

What is the use of def

def is short for define. It is a fundamental keyword in the creation of function objects.
>>> def foo(bar):
  try:
    return bar + 1
  except:
    try:
      return 'foo' + bar
    except:
      return bar

>>> foo(1)
2
>>> foo('bar')
'foobar'
>>> foo([])
[]
>>> 

"
37,Can an if statement in a list comprehension use an else?,"FAQ,Python FAQ",,22,"
Question
When using a list comprehension with an if, is it possible to have an else clause?
Answer
Yes, an else clause can be used with an if in a list comprehension. The following code example shows the use of an else in a simple list comprehension.  The if/else is placed in front of the for component of the list comprehension.
divbythree = [  ""Yes"" if number % 3 == 0 else ""No"" for number in range(1,20)]
print(divbythree)

","
Hello,
My post is for the same exercise. I completed the list comprehension and I’m tinkering with the original for loop:
heights = [161, 164, 156, 144, 158, 170, 163, 163, 157]
can_ride_coaster2 = []

for i in heights:
  if i > int(161):
    can_ride_coaster2 += i
    print(can_ride_coaster2)

I received a TypeError: ‘int’ object is not iterable, and I read some articles that wrote that for the ‘for loops’, only strings, list, tuples are iterable. Hope to get a second opinion on this because heights are a list, isn’t it?




 dtsyi:

can_ride_coaster2 += i


We cannot add a number to a list of numbers using concatenation. In the present form we would need to append it.
However, we can concatenate a list to a list…
can_ride += [1]

Now the concatenation is of two iterables.




 dtsyi:

heights = [161, 164, 156, 144, 158, 170, 163, 163, 157] can_ride_coaster2 =  for i in heights: if i > int(161): can_ride_coaster2 += i print(can_ride_coaster2)


Ah, got it! I got confused when I thought the I couldn’t iterate through the list of heights because they were numbers.
for i in heights:
  if i > 161:
    can_ride_coaster2 += [i]
print(can_ride_coaster2)

There we go! Thank you mtf!

Somehow this is not correct,
heights = [161, 164, 156, 144, 158, 170, 163, 163, 157]

can_ride_coaster = [heights 
	for heights in heights
  	if heights > int(161)]
can_ride_coaster += heights

print (can_ride_coaster)

Expected Result:
Expected can_ride_coaster to be printed.

what I got is:
[164, 170, 163, 163, 161, 164, 156, 144, 158, 170, 163, 163, 157]

Can someone help me?




 arcpro99996:

for heights in heights


Same name cannot be used for both variables.
[height for height in heights if height > 161]

If you’ll notice, the first 4 elements of your result are the expected result. Your code will produce the expected result if you remove the following line:



 arcpro99996:

can_ride_coaster += heights


This line is concatenating the original heights list to your can_ride_coaster list. While using the same name as the list for your variable in your for statement as @mtf pointed out is bad practice and confusing, it actually does work. Happy coding!

I removed the line:
can_ride_coaster += heights

what i get now as an answer is:
[164, 170, 163, 163]

The answer is still not correct, even if the answer seems correct from my point of view. The system still expect can_ride_coaster to be printed, and not the actual numbers [164, 170, 163, 163].
I am a little bit confused on how i should solve this.

Could you post a link to the specific exercise? The answer you get now is a list containing the heights that meet the requirement to ride the coaster which seems to be the expected output. If you post a link to the exercise, I’ll try to help you sort this out.

With pleasure, here is the Link
https://www.codecademy.com/courses/learn-python-3/lessons/learn-python-loops/exercises/list-comprehension?action=resume_content_item

Sorry for taking so long to get back to you. I just completed the exercise without issue. The correct output is: [164, 170, 163, 163]. I then reset the exercise, and ran your code. I received the same error that you described even though the output was correct. I then reset the exercise again, pasted your code in again, and it ran without error producing the correct output. I’m not sure what the issue is, but it appears to be some inconsistency with SCT for the exercise. Try resetting the exercise, and paste your code back in. If it doesn’t work, just click “Get Solution”, and move on knowing that your code does meet the requirement. One comment on your code. There is no need to use int(161). The number 161 is already an integer, and your code will perform just as well without int(). Happy coding!

My solution
heights = [161, 164, 156, 144, 158, 170, 163, 163, 157]
can_ride_coaster = [can_ride_coaster for can_ride_coaster in heights if can_ride_coaster > 161]

While i understand the exercise (in the face value), i am yet to have a deep comprehension of why we have [word for word…], [[can_ride_coaster for can_ride_coaster…]. While i do not just want to cram that, i properly want to understand the principle behind it. May be i need a better interpretation. My question is, why does “word” or ""can_ride_coaster "" came first?

Hello, @sodiqolabodeafolayan.
In a list comprehension, the first (leftmost) value inside the square brackets is the value or placeholder that will populate the list. It isn’t necessarily always the same as the iterator variable in the for loop.
Consider these examples:
my_list = [1, 2, 3, 4, 5, 6, 7, 8]
def say_hi(lst):
    return ['Hi!' for n in lst if n < 5]
    
print(say_hi(my_list))

Output:

[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]

This one uses the iterator variable multiplied by 2 in the output:
my_list = [1, 2, 3, 4, 5, 6, 7, 8]
def multiply_by_two(lst):
    return [n * 2 for n in lst if n < 5]
    
print(multiply_by_two(my_list))

Output:

[2, 4, 6, 8]





 sodiqolabodeafolayan:

can_ride_coaster = [can_ride_coaster for can_ride_coaster in heights if can_ride_coaster > 161]


The beauty of list comprehensions is that they are abstracts of an otherwise verbose task. Given that, it would follow that we don’t need verbosity in them.
@midlindner demonstrates that above by using a simple letter symbol  in place of a verbose name.
can_ride_coaster = [x for x in heights if x > 161]

The variable name tells us what is being abstracted. That is sufficient information to permit not infusing the abstraction with all that clutter.
In the end, it helps to get to the bottom of the mechanics in play. Abstractions are generic, like functions. The verbosity needs to left where it has real meaning and not be allowed to pollute otherwise re-usable functions or one-off abstractions.
Witness…
def passes(h, d):
    return h > d

def can_ride(array, disallowed):
    return [x for x in array if passes(x, disallowed)]

>>> heights = [161, 164, 156, 144, 158, 170, 163, 130, 163, 157]
>>> can_ride_coaster = can_ride(heights, 161)
>>> can_ride_ferris_wheel = can_ride(heights, 135)
>>> can_ride_coaster
[164, 170, 163, 163]
>>> can_ride_ferris_wheel
[161, 164, 156, 144, 158, 170, 163, 163, 157]
>>> 


7 posts were merged into an existing topic: How does indexing a string work? or What does word[0] in the example mean?

heights = [161, 164, 156, 144, 158, 170, 163, 163, 157]
can_ride_coaster = [height for height in heights if height > 161]
print(can_ride_coaster)

thanks for this great example

Just saw this post so the reply is a bit late. Did you ever get the answer you were looking for? It seems to me your question is why wasn’t ‘can_ride_coaster’ printed. If that’s so it’s because the argument you were passing to the print function was the can_ride_coaster list and not the string ‘can_ride_coaster’.

Hi there,
Thank you for answering my question.
I have deleted my account on codeacademy several months ago.
You can consider the question obsolet.
Best regards

Hey, building upon this, can you please look at this code?
# Example 1 - if
divbyfour = [x for x in range(1,20) if x % 4 == 0]
print(""These numbers are divisible by 4 "" + str(divbyfour))

# Example 2 - if... else
divbythree = [  ""Yes"" if number % 3 == 0 else ""No"" for number in range(1,20)]
print(""Numbers divisible by 3 "" + str(divbythree))

Ordering in the first example goes ‘for’ then ‘if’. If i reverse the ordering to ‘if’ then ‘for’ i get syntax error.
Ordering in the second example goes ‘if… else’ then ‘for’. If i reverse the order, i get syntax error.
Is there any logic behind why the ordering changes when using only if as opposed to when using ‘if… else’? Or is it just a Python syntax rule that i should mug up? Thanks in advance!
"
38,Can I display the month name instead of a number?,"FAQ,Python FAQ",q-a,24,"
Question
Can I display the month name instead of a number?
Answer
Yes! By default we’re accessing the number value of the current month, day, year, minute, hour, and second of the day. We can customize a lot of how we display this.
We format the output using strftime(), which won’t be discussed on Codecademy, but it’s a cool tool to have! For a full understanding of how to do it, take a look at the documentation for this method.
Take a look at the code below:
from datetime import datetime

now = datetime.now()


print(now.strftime('%B'))   # Displays the current month’s name

The code %B tells strftime() that we want to display the month as its full name, and there are lots of other codes ready for use in the link above.
","
When I type
now = datetime.now()
print now
I get
2018-08-16 13:00:42.874437
But when I type
print now.second
i get
42
How can i get the digits after the decimal in the seconds field?

if you check the documentation:
https://docs.python.org/2/library/datetime.html
you see that you can use microsecond to get this information

Why do we use brackets in the first example but not the second?
now = datetime.now()
now_year= now.year

because .now() is a method, while year is an instance variable. But to fully grasps this concept you need to understand classes. Regardless, here is an example:
class datetime(object):

    @classmethod
    def now(cls):
        cls.year = 2018
        return datetime()

time = datetime.now()
print time.year

maybe not an entirely accurate representation, but it gives you an idea (hopefully), otherwise come back to this later

Can we extract the year, month, etc. without storing datetime.now() in a variable?

Hi @cyphered.daydream,
Yes, you can do this, but making six function calls is less efficient than making just one call, and saving the result to a variable for output …
from datetime import datetime

print '%4d/%02d/%02d %02d:%02d:%02d' % (
 datetime.now().year,
 datetime.now().month,
 datetime.now().day,
 datetime.now().hour,
 datetime.now().minute,
 datetime.now().second
)

Output …
2018/10/14 14:00:46

Edited on 2018/10/14 to consolidate the Python code for better display.

I tried the following and still get the same answer.
print (current_year)
But the tutorial’s answer is print (now.year).
Which one is the correct way to write it?

You don’t have to store now.year, now.month, and now.day in a variable, right? I’m asking because in the codeacademy example, each one is stored in a variable.

Did you see @appylpye answer:
from datetime import datetime

print '%4d/%02d/%02d %02d:%02d:%02d' % (
 datetime.now().year,
 datetime.now().month,
 datetime.now().day,
 datetime.now().hour,
 datetime.now().minute,
 datetime.now().second
)

that should answer your question

While it is possible to assemble a date and time from multiple calls to datetime.now(), it might not be a good idea to do so. Consider, for example, what would happen if datetime.now().year was executed just a tiny fraction of a second before midnight prior to the end of December 31, and datetime.now().month was executed just a tiny fraction of a second after midnight. By how much time would we be off when all the components of the date and time were assembled and displayed?

How can I display dd-mm-yy ?
print ‘%02d-%02d-%02d’ % (now.day, now.month, now.year)
It gives same output 21-06-2019

Conventional string formatting with “%02d” doesn’t know what you want to do with a four-digit number.
You’ll need to use the obj.strftime() method:
from datetime import datetime
now  = datetime.now()

print(""%02d-%02d-%02d"" % (now.day, now.month, now.year))
print(now.strftime(""%d-%m-%y""))

Output:
21-06-2019
21-06-19


Why the times that appear when I print is one hour less?

maybe that’s the time where your code runs (assuming they care about their location, they might also simply be set to GMT+0 or something like that)




 ionatan:

k


And how I do to actually see my real date and time?

by asking your own computer as opposed to one somewhere on the other end of your network cable

what to do if we want to print the  date also?

Can I display miler seconds?

if u check the ex, we are printing date using now.day
"
39,How do I assign a value to a variable?,"FAQ,Python FAQ",q-a,21,"
Question
How does variable assignment work? Also, do you always put the variable on the left and the value on the right?
Answer
In Python you write a variables name followed by a single equals sign and the value you want to store in that variable. That is always the case when assigning value to a variable - the variable on the left is assigned the value on the right, like this:
variable = 10
Now the number 10 is stored in the variable named variable, and can be accessed and used by referring to variable! That’s why in this exercise when we store the string with today’s date in todays_date, we can print its value to the screen by typing print todays_date.
","
A post was split to a new topic: Current date and time

why does the number 10 in variable =10 not have "" "" or ’ ’ ?

Numbers are not characters, and are not evaluated as such, They are numeric values taken as whole. 42 is a numeric value, as is 3.141589.

what doe Variables mean




 diegoarredondo754449:

what doe Variables mean


It means the name represents a value that can and may change during the session. variable comes from vary, meaning not fixed or constant.
Keep in mind that the name is arbitrary. We may name our variables any way that suits us, but should give meaningful names so the reader can identify the value it represents. Variables are labels, not objects. They point to the object, which may be a value in memory such as a string or number, of may be a reference object such as a list, dictionary, tuple or set.

How did you choose the number 10? Does it matter or as long as it is a whole number? does changing the number affect anything? Can I choose a number at random as long as it is a whole number?

It’s important that we read the lesson text thoroughly so we gain some understanding from it. Then read the instructions carefully and follow any examples given in the lesson.
What is the instruction for this exercise? Can you post a link to the exercise page, please?

In your answer, why don’t print here need single or double quotation marks?

I’m sorry.
I’m still don’t really understand the way cuz I’m new to programming.
Can you tell me more about it?

I came across an error doing this exercise because I write the date in the format day/month/year. I think in this that a number cannot be used in the first instance in this kind of variable. It has to be a word.




 leighfiorentino:

It has to be a word.


Or, a character string.
""06/04/2019""

or,
'06/04/2019'

Outside of a string, / is the division operator, and numbers do not have leading zeros.
>>> a = 06
SyntaxError: invalid token
>>> 

Essentially, all dates are at minimum, a string, or in the case of Python, datetime objects with a number of properties.
>>> import datetime
>>> now = datetime.datetime.now()
>>> now.day
6
>>> now.month
4
>>> now.year
2019
>>> print (""%s/%s/%s"" % (now.day, now.month, now.year))
6/4/2019
>>> print (""{}/{}/{}"".format(now.day, now.month, now.year))
6/4/2019
>>> 

Both forms a string formatting are valid though the latter is newer and more robust and flexible. Witness the following:
>>> print (""{:02d}/{:02d}/{:04d}"".format(now.day, now.month, now.year))
06/04/2019
>>> 

String formatting comes up later in the course so don’t let this tie you down, today.

Thank you MTF. I am working my way up to parentheses. I’m an absolute beginner where coding is concerned but it has become surprisingly addictive.

I tried todays_date=12-12-12
Tried printing today’s-date
I get -12
Tried 12/12/12 if I print the variable I get 0 as output.could you please tell me why…

The Python interpreter is reading the right side of your variable assignment statements as arithmetic expressions.
Remember: an assignment statement (one that uses the assignment operator, =) always follows these steps:

Evaluate the expression to the right of the assignment operator to obtain a value

Assign that value to the variable on the left of the assignment operator

In your first example, step 1, it evaluates the arithmetic expression 12-12-12, which equals -12 (“twelve minus twelve minus twelve”).
In the second, it treats the problem as(12/12) / 12, since Python does operations which are at the same level in Order of Operations from left to right.  Python 2 treats / as integer division (dropping the fractional or decimal part), so 12/12 is 1 and 1/12 is 0 (zero).
But what to do to get the output you are looking for?  Don’t use numbers, use strings!!
todays_date = ""12/12/12""
The right side is simply treated as a string (sequence of characters), not a series of numbers. The value of a string is the string itself, so that is what is assigned to the variable, and you get something closer to what you want.

Amazing! This is amazing! So good!

i tried the following exercise:
todays_date = 2052020
print todays_date
on running it gave the output
2052020
which was as expected
however when i change it to
todays_date = 02052020
print todays_date
running it gives
545808
so does it have something to do with starting the assigned numerical value with a 0? why am i getting this output instead of the date i put in?




 vadanya49:

running it gives
545808


A number that is prefixed by a zero is seen as OCTAL (base 8)
Octal Number:

02052020

Decimal number:

545808

Conversion: Octal to Decimal

(02052020)8 = (545808)10

It’s important to note that a date string is not a number; a timestamp is a number. Your input is not recognized as a date. Try writing it as a string…
""2020-02-05""

>>> from datetime import date
>>> date.fromisoformat('2020-02-05')
datetime.date(2020, 2, 5)
>>> date(2020, 2, 5).isoformat()
'2020-02-05'
>>> 


because 10 is an integer variable and double qoutes is  not used for integer variables

Okay, my only question is that why arent we using the quotations marks now with the print sign? i.e. todays_date =“10th of June”
print “todays_date” results in todays_date but when I exclude quotation marks, the result is 10th of June, How? Please explain. Thank you
"
40,Can we utilize both keyword and positional arguments in the format() method?,"FAQ,Python FAQ",q-a,2,"
Question
In the context of this exercise, can we utilize both keyword and positional arguments in the format() method?
Answer
Yes, you can use both keyword and positional arguments in the same format() method call.
When using both types of arguments, all the positional arguments must come first, before all the keyword arguments. The positional arguments will apply just to the {} without any keywords first, and then the keyword arguments will apply to the corresponding {} containing the keyword.
Example
string = ""{}, {a}, {}"".format(20, 30, a=40)

# First, the positional arguments 20 and 30
# replace the {} in order.
# Then the keyword argument is placed at {a}.

# This will result in:
print(string) # 20, 40, 30

","
On a sidenote, i feel CodeAcademy should amend this exercise, just for better readability & clarity. The arguments passed to the function & the key names should be kept different, otherwise it gets all jumbled up, the keys, the arguments, the values.
For example, the arguments passed to poem_description() could be pd, a , t & ow & key values could accordingly be pd, a, t & ow as well.
"
41,Where do I need to include raisins?,"FAQ,Python FAQ","classes,q-a",24,"
Shouldn’t the method in subclass of the exercise be changed from  “def init(self, potatoes, celery, onions):” into “def init(self, potatoes, celery, onions, raisins):” i mean what would the “self.raisins = 40” refer to, if the content of the method in subclass be the same as in the parent class?
","
Good point. The example does not really make much sense either way, but including the raisins in the subclass init() method does work. This code also passes the exercise:
class SpecialPotatoSalad(PotatoSalad):
  def __init__(self,potatoes, celery, onions, raisins = 40):
    super().__init__(potatoes, celery, onions)
    self.raisins = raisins


True, but does the code work if you don’t include “raisins” in the constructor for the subclass? Instinctively, I find it weird to declare
self.raisins = 40

without including “raisins” in the constructor.

@byteninja93187, you’re right: it does not work:
class SpecialPotatoSalad(PotatoSalad):
  def __init__(self, potatoes, celery, onions, raisins = 40):
    super().__init__(potatoes, celery, onions)
    self.raisins = raisins
    
sps = SpecialPotatoSalad(3,4,5)
print(sps.raisins)

# Output:
40

Now, comment out  the line self.raisins = raisins
class SpecialPotatoSalad(PotatoSalad):
  def __init__(self, potatoes, celery, onions, raisins = 40):
    super().__init__(potatoes, celery, onions)
    # self.raisins = raisins

sps = SpecialPotatoSalad(3,4,5)
print(sps.raisins)

# Output:
Traceback (most recent call last):
  File ""script.py"", line 13, in <module>
    print(sps.raisins)
AttributeError: 'SpecialPotatoSalad' object has no attribute 'raisins'


Thanks, but I (and I think the previous contributors as well) was actually wondering whether the below would work:
class SpecialPotatoSalad(PotatoSalad):
  def __init__(self, potatoes, celery, onions):
    super().__init__(potatoes, celery, onions)
    self.raisins = raisins

Would you be able to declare the instance variable “self.raisins” without including it as a parameter in the constructor?
To me, it seems impossible but I definitely passed the exercise this way.

Not if you try to actually instantiate an object!
class SpecialPotatoSalad(PotatoSalad):
  def __init__(self, potatoes, celery, onions):
    super().__init__(potatoes, celery, onions)
    self.raisins = raisins
    
sps = SpecialPotatoSalad(3,4,5)
# print(sps.raisins)

# Output:
Traceback (most recent call last):
  File ""script.py"", line 12, in <module>
    sps = SpecialPotatoSalad(3,4,5)
  File ""script.py"", line 10, in __init__
    self.raisins = raisins
NameError: name 'raisins' is not defined


Thanks, I’ll report it!

… and it doesn’t pass:
If you put inself.raisins = 40, you are assigning a value to raisins, but self.raisins = raisins throws a name error.




 patrickd314:

The example does not really make much sense either way


Suprisingly many examples in this course don’t…  the deeper we go the dumber it gets.
I mean - for real, potato salad?
My contribution:
potatoes += 1

MePotato1008×504 106 KB


Ok, as far as I understand it: you would instantiate your potato salad with variable amounts of potatos, celery and onions. However, you always put in one pack of raisins into it, so you give it a value which is the content of the pack (40).
eg:
special_potato_salad = SpecialPotatoSalad(300, 50, 150)

print(special_potato_salad.onions)
#prints: 150
print(special_potato_salad.raisins)
#prints: 40

super_special_potato_salad = SpecialPotatoSalad(300, 50, 500)

print(super_special_potato_salad.onions)
#prints: 500
print(super_special_potato_salad.raisins)
#prints: 40


Could someone explain why this code works, even though raisins does not appear at all in the constructor?
  def __init__(self, potatoes, celery, onions):
    self.potatoes = potatoes
    self.celery = celery
    self.onions = onions
    
class SpecialPotatoSalad(PotatoSalad):
  def __init__(self, potatoes, celery, onions):
    super().__init__(potatoes, celery, onions)
    self.raisins = 40

sps = SpecialPotatoSalad(3,4,5)
print(sps.raisins)



The __init__() method is the constructor. raisins isn’t a parameter of the function because we are always going to use 40 raisins. The amounts of the other 3 ingredients varies, and those values are passed as arguments when we instantiate a SpecialPotatoSalad object. If we wanted to vary the number of raisins as well we could change the constructor:
class PotatoSalad():
  def __init__(self, potatoes, celery, onions):
    self.potatoes = potatoes
    self.celery = celery
    self.onions = onions
    
class SpecialPotatoSalad(PotatoSalad):
  def __init__(self, potatoes, celery, onions, raisins): #include raisins as a parameter
    super().__init__(potatoes, celery, onions) #do not pass raisins to the parent constructor
    self.raisins = raisins #assign the value passed in to the self.raisins property

sps = SpecialPotatoSalad(3,4,5,63)
print(sps.raisins) #prints: 63


Okay, thank you.
I must confess, object orientation makes my head hurt.

Amen… i was making great progress on this course until hit this ‘Classes’ topic. It has got me seriously stumped. So badly that i’ve started dreading learning Python. I remember the earlier classes i used to LOVE coming back & learning more, but not anymore. I hope the next topic will rejuvenate my interest in Python.
All these classes examples can easily be done without… i mean we can just write functions and simple code to do what these classes seem to be doing in an overly-complicated manner. Why bother with classes at all?
I’m yet to see a real life example where making classes is actually useful. Otherwise simple code & functions get the job done easily every time.

I think classes show their true advantages in real big applications and it helps manage data in meaningful way .

Is my understanding true ?
here :
class SpecialPotatoSalad(PotatoSalad):
  def __init__(self, potatoes, celery, onions, raisins): #include raisins as a parameter
    super().__init__(potatoes, celery, onions) #do not pass raisins to the parent constructor
    self.raisins = raisins #assign the value passed in to the self.raisins property


this line tells child class to have new init function === >
def __init__(self, potatoes, celery, onions, raisins): #include raisins as a parameter

but this line says do not overwrite parent init function and copy stuffs already is in it == >
super().__init__(potatoes, celery, onions) #do not pass raisins to the parent constructor

and this line is usual to have we declare construction variables :
self.raisins = raisins #assign the value passed in to the self.raisins property

simply it creates new init method and with super() it copy parent variables for us and save us from re writing all variables parent class had already and we want to include them but need an extra variable which is done by add . And what if we want exclude a variable from parent class in child class ?

Thanks for the example midlindner.
I am experiencing the same thing. Exactly the same thing - I felt competent and even if it took me forever to figure out - I was actually figuring out the offline challenges and all of the tests etc. This topic is the first time I’ve had to use the show answer option - and I’ve used it several times. This Classes topic feels like it’s not being explained well and is being blown through with a LOT of technical terms that are not clicking.
in terms of where this would be useful  - Classes would be extremely useful for building games… I would think. Consider building characters. You could certainly use classes and inheritance to make a basic character class, then inheritance to give different attributes to say a fighter or mage, healer etc. A better example may be using inheritance for leveling up? level 1 character has “spark” level 10 has the use of “spark”…but also “lightning ball.”  Or for use with items like power up “objects”
anyway - the idea of classes makes sense to me. The syntax of it and the way these lessons are asking us to do things are just confusing.

Sorry for the late reply. I must have missed the notification when you replied.
From your description, it seems your understanding is correct.



 css7713845194:

And what if we want exclude a variable from parent class in child class ?


There a several ways to accomplish this. One could argue that only attributes shared by all child classes should be included in the parent class, but if we insisted on including an attribute that we wanted to exclude from a child class we could make the parameter in the parent class constructor optional by assigning a default value such as None when it is not supplied. I added to my previous example to show a way to accomplish this:
class PotatoSalad():
    def __init__(self, potatoes, celery=None, onions=None):
        self.potatoes = potatoes
        if not celery == None: self.celery = celery
        if not onions == None: self.onions = onions
    
    def __str__(self):
        recipe = f'{self.__class__.__name__}\n--Ingredients--\n'
        for i, a in self.__dict__.items():
          recipe += f'{i}: {a}\n'
        return recipe
    
class SpecialPotatoSalad(PotatoSalad):
    def __init__(self, potatoes, celery, onions, raisins):
        super().__init__(potatoes, celery, onions)
        self.raisins = raisins
        
class EggyPotatoSalad(PotatoSalad):
    def __init__(self, potatoes, celery):
        super().__init__(potatoes, celery)
        self.eggs = potatoes * 2 #we'll have 2 eggs for every potato
        
sps = SpecialPotatoSalad(3,4,5,63)
print(sps)

#new recipe: eggy potato salad has no onions
eggy_ps = EggyPotatoSalad(6, 4)
print(eggy_ps)

#say you wanted regular potato salad without celery
#you could supply keyword arguments
ps = PotatoSalad(potatoes = 12, onions = 2)
print(ps)

Output:

SpecialPotatoSalad
–Ingredients–
potatoes: 3
celery: 4
onions: 5
raisins: 63
EggyPotatoSalad
–Ingredients–
potatoes: 6
celery: 4
eggs: 12
PotatoSalad
–Ingredients–
potatoes: 12
onions: 2


If you guys still confuse about Class, I recommend to watch these videos on youtube. He explains in an easier way.

This is also a nice video explaining the benefit of using classes


"
42,What happens if a list contains duplicates when creating a dictionary using zip and a list comprehension?,"FAQ,Python FAQ",,5,"
Question
When creating a dictionary using a list comprehension and the zip() function, what will happen if the list for the keys contains duplicate data?
Answer
If the list passed to the zip() function contains duplicate data, the duplicate created as part of the list comprehension will be treated as an update to the dictionary and change the value associated with the key. No error will be reported. The following code example uses zip() and a list comprehension to create a dictionary of cities and temperatures. There are two entries for “New York” in the cities list. The resulting dictionary contains only one entry for “New York” with the last value 99 from the temps list.
cities = [""New York"", ""London"", ""Sydney"", ""New York""]
temps = [ 85, 81, 65, 99]

weather = { key:value for key,value in zip(cities, temps)}

print(weather)
# {'New York': 99, 'London': 81, 'Sydney': 65}

","
4 posts were split to a new topic: Zip creates an iterator, how can we turn that into a dictionary?

Aside
def seq_sum(sequence):
  a = zip(sequence, sequence[::-1])
  return len(sequence) * sum(next(a)) // 2

print ( seq_sum(range(10)) )
45

Pared down,
def seq_sum(seq):
  return len(seq) * sum(next(zip(seq, seq[::-1]))) // 2


What does the next(a) mean here? Can’t quite get it

The sum of a sequence (common difference between terms) is given as the first and last terms added, times half the number of terms.
s = (a + z) * n / 2

Above we zip the sequence with its reverse such that the first item (next(a)) in the iterator will be a tuple containing the first and last term.
It’s just a bit of sandbox play, in reality, but it does work.
"
43,How is a Pandas series different from a dataframe?,"FAQ,Python FAQ",,4,"
Question
How is a Pandas series different from a dataframe?
Answer
In Pandas a series is a one-dimensional object that contains any type of data, similar in ways to a Numpy array.
Series objects have a single axis label, like a column title, which is the index of the series. A series is essentially a single column.
# Creating a series
clinic_east = pd.Series([100, 51, 81, 80, 51, 112])

A dataframe is a two-dimensional object that can hold multiple columns of different types of data. They are similar to a table in SQL.
A single column of a dataframe is a series, and a dataframe is a container of two or more series objects.
# Creating a DataFrame
df = pd.DataFrame ([
  ['January', 100, 100],
  ['February', 51, 45],
  ['March', 81, 96]],
  columns=[""month"", ""clinic_east"", ""clinic_north""]
)

","



 jephos249:

a container of two or more series o


What do we call a single row of data frame ?

It’s known as ‘Series’

A single row is like a ‘datapoint’ of your data.
"
44,Can we perform calculations between Decimal objects and other values?,"FAQ,Python FAQ",q-a,4,"
Question
In the context of this exercise, can we perform calculations between Decimal objects and other values?
Answer
Yes, you can treat the Decimal object instances similar to a number, and apply it in operations with other numeric types, except for float values, which will cause an error.
Example
from decimal import Decimal

# With an integer.
print(Decimal(""10.5"") + 3) # 13.5

# With a float.
# This will give an error
print(Decimal(""10.5"") + 3.0)

# Instead, just use the Decimal object for float values.
print(Decimal(""10.5"") + Decimal(""3.0"")) # 13.5

","
There must be a way to cast a float() to another type. The closest I got was with this below. I used 0.0 to illustrate the point and to make sure the answer was still 0.89 which it was.
two_decimal_points = Decimal(""0.2"") + Decimal(""0.69"") + Decimal(str((float(0.0))))

In your second code. Where we are adding a flot number with a Decimal(float), here why we are getting error?

>>> from decimal import Decimal
>>> dir(Decimal)

That will give us a list of all the methods of the Decimal class. Ignore the dunder methods as they are generally used internally.
In the list we spot, from_float. Let’s check with HELP to see its usage and syntax…
>>> help(Decimal.from_float)
Help on built-in function from_float:

from_float(f, /) method of builtins.type instance
    Class method that converts a float to a decimal number, exactly.
    Since 0.1 is not exactly representable in binary floating point,
    Decimal.from_float(0.1) is not the same as Decimal('0.1').
    
        >>> Decimal.from_float(0.1)
        Decimal('0.1000000000000000055511151231257827021181583404541015625')
        >>> Decimal.from_float(float('nan'))
        Decimal('NaN')
        >>> Decimal.from_float(float('inf'))
        Decimal('Infinity')
        >>> Decimal.from_float(float('-inf'))
        Decimal('-Infinity')

>>> 

This doesn’t really answer any questions as much as peer under the hood. The more we study this module, the more practical use we would hope to discover. It will take a lot of tinkering, one suspects owing to the massive amount of abstraction.
"
45,How can I determine if a dictionary is empty?,"FAQ,Python FAQ",q-a,5,"
Question
Is it possible to determine whether a dictionary is empty?
Answer
Yes, there are several ways to check if a dictionary is empty. The more standard Python method is to use a Boolean evaluation on the dictionary. An empty dictionary (or other containers) will evaluate to a Boolean False. You can do that by testing just the dictionary variable or using the bool() function. Both methods are shown in the following code example.
dict1 = {}

if dict1:
    print(""dict1 Not Empty"")
else:
    print(""dict1 is Empty"")

if bool(dict1):
    print(""dict1 Not Empty"")
else:
    print(""dict1 is Empty"")

Also, it is possible to use the len() function to test whether the dictionary is empty. If it is empty, the function will return 0. This method is shown in the code example below.
dict1 = {}

if len(dict1) == 0:
    print(""dict1 is Empty"")

","
Hello,
why not just print out the dictionary and see if it’s empty?
cheers

Sometimes you program might need to do different operations, based on whether or not the dictionary is empty.
print() will work for us, but not in conditionals for programming

Why not simply use:
my_dictionary=={}

That is also possibility. But empty dictionaries are false, so then you can also just use:
if dict1:
    print(""dict1 Not Empty"")
else:
    print(""dict1 is Empty"")

"
46,Do print() functions evaluate the input before it prints?,"FAQ,Python FAQ",,11,"
Question
In this exercise, we placed expressions and mathematical operations inside of the print() function. Is the input always evaluated first before anything is printed?
Answer
Yes, any expressions and operations inside the parentheses of the print() function is always evaluated first, with priority, then the result is printed out at the end. This can be seen to follow the general rule of the order of operations where anything inside of ( ) is evaluated with highest priority, which in this case would be anything inside the print() function’s ( ).
","
A post was split to a new topic: How did the variable C understood that its assigned to this mathematics

Aside from mathematical operations, can one then assign priorities to a set of variables for Python to evaluate in the background before output?
code_newbie

variables are not evaluated, they refer to concrete values
expressions are evaluated without delay whenever program control reaches them and they are executed, the question/answer here is misleading, print has nothing to do with that

If you want to “assign priorities” to a certain calculation or value inside your complete string of calculation the best to do it is to use parenthesis “()”. With parenthesis you will have the strict control of operation path performed by the code

mathematically speaking, the statement print print (26*68+13/28) returns an incorrect result, as it does not seem to follow BODMAS.
This needs to be enforced by creating separate variables and then adding them together:
a = 25*68
b = 13/28
print(a+b)

I tried print ((26*68+13/28)), but it made no difference to print (26*68+13/28). I wonder if the output would be different based on IDE one is using…

none of that is right




 wglebster:

26*68+13/28


Are you working with python2 or python3? In python2 dividing an integer by an integer will provide an integer (in this case, 0) which is probably not your intention and may explain any errors.
If it’s python3 then I’m not not sure what error you have when computing (26*68+13/28). There will be inevitable rounding errors for irrational numbers and there could be some floating point error which can differ from system to system but it should be fairly minor in a calculation like this.
If you wanted to make it more explicit ((26*68)+(13/28)) could be used but it shouldn’t make any difference for this particular calculation.
It’s worth noting that some calculations will differ with the addition of parantheses as expressions are generally calculated left to right when of the same order (floor division is especially noticeable), see the following for an example-


stackoverflow.com






BODMAS - python


python


  asked by
  
  
    Mr malik
  
  on 10:58AM - 17 May 15 UTC







Python3 operator precedence-
https://docs.python.org/3/reference/expressions.html#operator-precedence




 wglebster:

26*68+13/28


There are multiple possible outcomes for the above. Since multiplication and division take precedence to addition, that takes place first. If we want the addition done first, instead of last, we need to bracket that expression…
25 * (68 + 13) / 28 => 25 * 81 / 28 => 2025 / 28 => 72.32142857142857

I was using whichever Python is running on the codeacademy website, not tried it on my laptop. But also I think I was not using floats… so who knows.

Yeah, that’s helpful… Thanks lol
"
47,What actually happens when returning multiple values in a function?,"FAQ,Python FAQ",,15,"
Question
In the context of this exercise, what actually happens when returning multiple values in a function?
Answer
In Python, when returning multiple values separated by commas, all the values listed are actually wrapped inside a data type known as a tuple, which looks like (1, 2, 3). That tuple is returned, containing each value.
This is also useful because you can do what is known as “tuple unpacking” – if a tuple has multiple values, you can assign the same number of variables to the number of elements in the tuple, so that each variable is assigned to each value in the order they appear in the tuple.
Example
# This is a simple tuple unpacking.
# Each variable is assigned to each 
# corresponding value.
arg1, arg2, arg3 = (1, 2, 3)

# This is a function that returns multiple values.
def times_ten(a, b, c):
  a = a * 10
  b = b * 10
  c = c * 10
  return a, b, c # This will return a tuple containing the values listed.

# Each variable will be assigned to each value in the returned tuple,
# in the order they appear.
new_a, new_b, new_c = times_ten(5, 6, 7)

# new_a = 50
# new_b = 60
# new_c = 70

","
I’m having trouble understanding the purpose of the “return” command to begin with.
In the example from the exercise:
def square_point(x_value, y_value):
  x_2 = x_value * x_value
  y_2 = y_value * y_value

Doesn’t this already assign (and store!) values to variables x_2 and y_2 as soon as the square_point function is called with concrete values of x and y?
What then is the added benefit of return x_2, y_2 in the third line of the function?

@ibagusa, I believe that the return command allows the programmer to use the returned values later on in the code, outside of the function.  It is true that the example assigns a value to x_2 and to y_2 as soon as the function is called, but those values can’t be used outside of that function unless the function “returns” them.  I’m sure my explanation is awkward and imprecise, but I hope it’s accurate.

The discussion at this link explains the purpose of the return command in python (versus print), and I think confirms my interpretation above:


stackoverflow.com






What is the purpose of the return statement?


python, printing, return


  asked by
  
  
    Hitesh Kumar
  
  on 02:44AM - 20 Aug 11 UTC







Functions that are not explicitly intended to PRINT, usually with some sort of special format, should never print, but always RETURN their value(s).
When there are two or more values they can be written in a comma separated list and will be received by the caller as a TUPLE.
>>> def foo(a, b, c):
    if a > b: a, b = b, a
    if a > c: a, c = c, a
    if b > c: b, c = c, b
    return a, b, c

>>> foo(9,8,7)
(7, 8, 9)
>>> 

Note that the return value is a tuple that must be unpacked if we wish to split out the values into separate variables.
>>> a, b, c = foo(9,8,7)
>>> a
7
>>> b
8
>>> c
9
>>> 


It’s because you only need to use return once and define the variables that you want to return beforehand.

Hi @mtf,
can you help us with: Difference between low, high and low_limit, high_limit?
I’m having a hard time understanding how, in this scenario the “return” knew to add the values to low, high without inclusion in the function or a process of defining them.

to be more specific, here is the code snippet:
def get_boundaries(target, margin):
  low_limit = target - margin
  high_limit = margin + target
  return(low_limit, high_limit)
low, high = get_boundaries(100, 20) 

print(""Low limit: "" + str(low) + "", "" + ""high limit: "" + str(high))

How does the return know that low, high are now “low_limit” and “high_limit”?

Hello,
It’s the order that the return is placed:
  return(low_limit, high_limit)

Low first and high 2nd. When you wrote :
low, high = get_boundaries(100, 20) 

it followed the same order. Low gets assigned to low_limit value and high gets assigned the high_limit value. Switch high and low like below:
high, low = get_boundaries(100, 20)
The code doesn’t know high goes to high  and low goes to low just because of the name, but because of the position of the return values.
This swap would give you:
Low limit: 120, high limit: 80

Which is wrong, but shows that it’s the order the code is written that makes it line up.
Not sure if this answers your question, but hopefully it helps.

Really helpful! Thank you @monochromaticmau!

But the function stops at return. Which means, the variables low_limit and high_limit become empty. Then how are values assigned on print call? If the values of these two variables are now empty after function ends, how are they able to take the values after function stops?

The  function stops after it gets to return, but it actually returns a value: return(low_limit, high_limit).
Whenever you attempt to unpack the function, it assigns the items of the returned tuple to your variables in the order of appearance.
arg1, arg2 = get_boundaries(x, y)
will give you
arg1, arg2 = (low_limit, high_limit)
when you print arg1 it gives:
arg1 = low_limit
and printing arg2 gives:
arg2 = high_limit
Basically, it follows ‘First in, First out’.

The exact reason is called variable scope. Scope refers to the namespace for which a variable exists. In the BASIC programming language there was no concept of scope, and this complicated programs in a way you cannot imagine.
In Python and many other languages the default scope for all variables is local scope, meaning the level within the program where you define a variable is where that variable exists and no place else. This is not entirely correct 100% of the time, but for now you may understand the idea here.
Therefore, variables that are created inside the function definition, are local to the function and only that function. There lifetime is limited too, in the sense that they go away after the function returns/ends. This is important because as a programmer, you will probably want to use the same name for a variable in many different functions that you write that serve a similar purposes. In other words, you might always use the variable name rtn or ret or r when returning the result of a mathematical function for the sake of consistency, so when you read your programs/functions years from now you will already know what rtn, ret, or r could mean.
If variables did not have scope, and persisted forever, then all variable names would have to be unique throughout your entire program which would make coming up with useful names much more complicated. Bugs would be very difficult to find, because you would never be able to know which statement modified which variable and when.
With local scoped variables, you never need to think about or worry about this and you can be very consistent throughout all your different functions.
So, the reason you need to use the “return” statement is to make sure the correct local variables are passed back to the calling function. This helps with good coding practices too. Be careful where you put your return statements too; in other words, you should only have one per function and not 14 for example.

Why it doesn’t work when i am writing low and high variable separate.

Hi @method8611079156.
You’ll need to provide a little more information to know what you tried to know what didn’t work. Have a look at this FAQ for a good way to frame your question (you can ignore the bits about creating a new post for now).
At a guess you tried something like the following?
return low_limit high_limit

Which is not valid syntax. return will only return one object. As per the first post this is often a tuple which is created by using the two names low_limit, high_limit separated by the comma.
Or something with two returns?
return low_limit
return high_limit

When a return statement is executed the function itself is exited. No code grouped to this function will be executed following that return statement which includes other return statements. Which is why multiple returns are often sent back as a sequence.
"
48,What are some cool things that Python has been used for?,"FAQ,Python FAQ",,1,"
Question
What are some things that Python is used for, or some Python tools I can make use of to make cool things?
Answer
Python has become an incredibly popular programming language in many fields. It plays a role in lots of popular products like YouTube, DropBox, Instagram, Eve Online, and so many more.
If you’re interested in data science, Python libraries like SciPy, NumPy, and Pandas will allow you to perform powerful analysis and computation.
If it’s video games you want to build, check out existing Python game libraries and engines, like Panda3D or PyOpenGL.
It’s a language that has become widespread across just about every field, so if you put in the time to learn the basics, it’ll be rewarding regardless of the path you choose. And luckily it’s such a popular language that any of the above tools will have lots of online help available.
",
49,If a dictionary is updated with an empty key/value will it erase the contents of the dictionary?,"FAQ,Python FAQ",,2,"
Question
If the dictionary update() is called with no parameters OR an empty dictionary, will the update erase the existing contents of the dictionary?
Answer
NO, calling update() with no parameters or with an empty dictionary will not change any of the existing key/values in the dictionary. The following code example shows both types of empty updates. The existing dictionary remains unchanged.
cities = dict()

cities.update({""San Francisco"": 75, ""Chicago"": 100})
cities.update()
cities.update({})

print(cities)
# {'San Francisco': 75, 'Chicago': 100}

","
2 posts were merged into an existing topic: Do dictionaries preserve order now?
"
50,What happens if a parameter has the same name as a variable defined outside?,"FAQ,Python FAQ",,5,"
Question
What happens when a parameter has the same name as a variable defined outside the function?
Answer
When a parameter has the same name as a variable defined outside, instead of the function using the variable defined outside, it will only reference the value that was passed to the parameter. So, parameters will be used over variables of the same name within a function.
Example
name = ""Josh""

# The parameter has the same name as the variable above.
# The function will not use the variable's value, but the value
# passed into this parameter instead.
def sayHi(name):
  print(""Hi, "" + name + ""!"")

sayHi(""Anne"") 
# This will print out “Hi, Anne!”

# The value of the variable defined outside was unchanged.
# This will print out “Josh”.
print(name)

","
This concept is called shadow a variable. i.e, the argument passed to a formal parameter shadow the variable defined globally.

In the exercise below:
current_year=2048
def calculate_age(birth_year):
age = current_year - birth_year
return age
print(current_year)
print(calculate_age(1970))
when we print calculate_age(1970), how does the function takes into account “age=current_year-birth_year” as calculate_age only has the birth_year?. How does print function know that we have to subtract birth_year from current_year?.

A variable declared in global scope can be polled from inside any function. current_year is global and as such accessible to current_age().

Awesome response! Thank you.
"
51,Can we add a new column at a specific position in a Pandas Dataframe?,"FAQ,Python FAQ",,6,"
Question
Can we add a new column at a specific position in a Pandas dataframe?
Answer
Yes, you can add a new column in a specified position into a dataframe, by specifying an index and using the insert() function. By default, adding a column will always add it as the last column of a dataframe.
Say for example, we had a dataframe with five columns. If we wanted to insert a new column at the third position (index 2), we could do so like this:
# Third position would be at index 2, because of zero-indexing.
df.insert(2, 'new-col', data)

This will insert the column at index 2, and fill it with the data provided by data. When inserting, the columns from index 2 onward will effectively be shifted over to the right by 1 index each. The column that was previously at index 2 would now be at index 3 and so on for the following columns.
","
Hello, I tried adding data using the following method but it didn’t seem to work. Any ideas where I went wrong?
import codecademylib
import pandas as pd

df = pd.DataFrame([
  [1, '3 inch screw', 0.5, 0.75],
  [2, '2 inch nail', 0.10, 0.25],
  [3, 'hammer', 3.00, 5.50],
  [4, 'screwdriver', 2.50, 3.00]
],
  columns=['Product ID', 'Description', 'Cost to Manufacture', 'Price']
)

# Add columns here
sold_in_bulk = pd.dataframe [""Yes"",""Yes"",""No"", ""No""]

df.insert (3, ""Sold in Bulk"", sold_in_bulk)

print(df)

also I’m assuming insert only works on dataframes and if I formatted it as a normal list e.g. sold_in_bulk= [""Yes"",""Yes"",""No"", ""No""] it wouldn’t work?

You have probably solved this already, but, just for future reference, the assumption was off; simply using a list for sold_in_bulk does the trick.

import pandas as pd
df = pd.DataFrame([
[1, ‘3 inch screw’, 0.5, 0.75],
[2, ‘2 inch nail’, 0.10, 0.25],
[3, ‘hammer’, 3.00, 5.50],
[4, ‘screwdriver’, 2.50, 3.00]
],
columns=[‘Product ID’, ‘Description’, ‘Cost to Manufacture’, ‘Price’]
)
Add columns here
sold_in_bulk = pd.DataFrame([“Yes”, “Yes”, “No”, “No”])
df.insert (3, “Sold in Bulk”, sold_in_bulk)
print(df)

I think your sold_in_bulk is a series, not a list by the way.

This is what you needed to do.
df.insert(3, ""Sold in Bulk"", [""Yes"", ""Yes"", ""No"", ""No""])

"
52,Why should I write comments in my code?,"FAQ,Python FAQ",q-a,5,"
Question
Is there a reason to comment code? If I’m writing it, I’m familiar with what it’s doing.
Answer
Writing helpful comments in your programs is an excellent habit! You may understand what you’re writing in the moment, but if you look at that same code six months from now, it may not be so clear, especially as your projects grow in size!
It’s a good idea to briefly explain your code anywhere you think it might help your future self, or other programmers who may read your code.
","
what will happen to the code when its progressing ?

The computer ignores comments, so there’s no performance reason not to use them.

there is one thing i like to know. in my company there is a rule to not explain code in comments. So there usually are no information about it and it is hard to follow up. For me as trainee it is often hard to undertand a complex piece of code.
Is this a usual company approach?

Yes. Useless comments create clutter and make code less readable.
In the professional environment, the goal is to write code that is easy to understand and to read. Comments are usually reserved for referencing issues, documentation of functions and to describe the code that for some reason had to be written in a complicated manner.



 py0167997871:

For me as trainee it is often hard to undertand a complex piece of code.


If there is in fact complex piece of code which is hard to understand - git blame, find out who wrote this piece and tell this person that they did a bad job.
"
53,Can you break down the uses of the temporary variable `word` in the example?,"FAQ,Python FAQ","loops-py,q-a",14,"
Hello there,
Can someone help me to walk through the logic behind the syntax for list comprehension using the example before exercise? I have hard time understanding why we need to enter temporary variable word in front of the for loop?
words = [""@coolguy35"", ""#nofilter"", ""@kewldawg54"", ""reply"", ""timestamp"", ""@matchamom"", ""follow"", ""#updog""]
usernames = [**word** for word in words if word[0] == '@']

Per example, it says that this list comprehension:

Takes an element in  words -> I I understand that this happens via the for loop:
for word in words

Assigns that element to a variable called  word -> I understand that this happens with every for loop when it assigns the value of the element it has found in the list to a temporary variable that we call here word


This is where I get stuck as I do not understand why we have to write word again in code before the for loop? What program “sees” when it hits this and why it can not run the code without it?
Thank you for the logic behind it!
","



 zachg131:

This is where I get stuck as I do not understand why we have to write word again in code before the for loop ? What program “sees” when it hits this and why it can not run the code without it?
Thank you for the logic behind it!


lets look at the example:
words = [""@coolguy35"", ""#nofilter"", ""@kewldawg54"", ""reply"", ""timestamp"", ""@matchamom"", ""follow"", ""#updog""]
usernames = []

for word in words:
  if word[0] == '@':
    usernames.append(word)

the word variable in your question about list comprehension is equivalent to  .append(word)
so its what we are appending to the list, this can be quite handy, for example:
result = [x ** 2 for x in range(1, 11) if x% 2 == 0 ]

this will give us the exponents of all even numbers from 1 till 11.
so we can manipulate what we append to the list, quite useful. Hope this helps

Thank you for your prompt attention and excellent example - I get it now!

At first glance it may be confusing, specially using that example
usernames = [**word** for word in words if word[0] == '@']
It reminded me of that old yo dawg meme (reference)
This is the way I made myself to understand this:
result_list = [expression for iteration_variable in iterable_list if condition]
Here


result_list is the list to be obtained after comprehension of iterable_list


expression is an expression which result will be appended to result_list, provided condition is True


iteration_variable  is a dummy variable which takes the value of each element of iterable_list one at a time, does not need to be previously defined and only is used in the evaluation of expression and condition


condition is a logical expression applied to the current element of iterable_list (that is, to iteration_variable). If the result of condition is True, the result of expression is appended to result_list, if the result of condition is False, nothing happens with the current element of iterable_list and skips to the next element

Hope this helps to get a better insight of fellow python apprentinces.

Really nice explanation. Thanks 

I think a good and easy exemple should be this:
usernames = [word for word in words if word[0] == ‘@’]
Anyway the above example is confusing…
first you take a temp variable let say “X” and in order the program to understand what you are saying you need to say ""hey, when I say X for now on is X "" and then you need to say the “in X if X[0] == ‘@’”…
I am beginner as well, but this I see the things

this was so helpful in understanding the contetn better.

best explanation i’ve seen. thanks for sharing.

Even with this example I don’t understand. Could you help me to understand it in a more simple way?
I’m really having a difficult time understanding this.

What do you not understand?
list comprehension allows us to construct a list.
you can always consult external documentation if you need more information on something.

Great example.
To complement it:
The list comprehension example provided here:
result = [x ** 2 for x in range(1, 11) if x% 2 == 0 ]

Is strictly equivalent to the full code below:
result=[]
for x in range(1,11):
  if x%2 == 0:
    result.append(x **2)

By the way, the result of the code is the square of all even numbers from 1 till 10 (and not 11).
[4, 16, 36, 64, 100]

Hope it helps

i thought (un)till was exclusive:
https://ell.stackexchange.com/questions/33340/is-until-inclusive-or-exclusive
which seems to be the case unless there is a presence.

I am sure you are right as I am not an English native speaker.
The results of the code is the square of all even numbers from 1 inclusive to 10 inclusive.
Please advise if I should correct my original post.




 script2133254651:

I am sure you are right as I am not an English native speaker.


that makes two of us, English isn’t my native language either.



 script2133254651:

The results of the code is the square of all even numbers from 1 inclusive to 10 inclusive.


yea, you are absolutely right. But given i though till was exclusive, till 11 (exclusive) is till 10 (inclusive). So we where saying the same thing
"
54,Why didn't my boolean work?,"FAQ,Python FAQ",,11,"
Question
I wrote my code for the boolean and when I press Run it isn’t accepted; why is this?
Answer
Python, and all programming languages, require you to match their syntax exactly. Note that there are no quotation marks around a boolean value, and that they are capitalized. In other languages you may see booleans written as true and false, but in Python they must be True and False. Keep that in mind for future exercises where you’ll be asked to check if something is True or False so you don’t compare to a string, like ”True”!
Take a look at the code below for a better understanding:
bool_1 = True
bool_2 = False
bool_3 = true     # invalid
bool_4 = false    # invalid
bool_5 = ""true""   # invalid
bool_6 = ""false""  # invalid

","
I just started learning python today so not exactly an expert, but what I noticed is that this program is somewhat strict. you have to write True or False, the capital letters seem important for the first letters. So you cannot write tRue, trUe, truE, TruE and so on…

i used lower case for false and it ran fine but only accepted capitalised true ???

If True corresponds with number 1 why is name_is_maria = 1 incorrect; for age_is_12  I typed age_is_12 = 0 which worked.

I have the same question, can someone advice please?

i have the same question!
can someone help me get the answer?

Entering name_is_maria = 1 assigns the value one to your variable called name_is_maria, just as if you used = 2, =10, = 15.5, or any other value.  Instead, you want to assign it a value of True or False.
After assigning it a value of True, I then entered name_is_maria += 3 to add three to the stored value of True and 1.  The print function then returned the value 4 for me, which demonstrates that the name could be True and have the integer value of 1.

Thanks for your advice!! Really helped me.

I used 0 for False in the first line and it accepted it, but when I tried to used 1 for True in the second line it said invalid. I just wanted to see if it would take 1 and 0 because it said 1 and 0 were equivalent to True and False
Why did it work for False but not for True?

Same exact scenario, can someone go into detail on this? was it a mistake?

Yes, but you STILL didn’t answer the question. We ALL KNOW we aren’t looking to assign “true” or “false” to the INTEGER.
What everyone wants to know, is why, when the lesson DEFINED 1 = TRUE when assigning boolean values (as in assigning the integer “1” to a variable would translate to TRUE) just like the lesson DEFINED 0 = FALSE.
When defining “age_is_12”, using “age_is_12 = 0” WORKED in every case. The program accepted that we are trying to communicate the fact that Maria’s stated age isn’t 12. This would make sense for one to assume that if THAT worked, then the SAME LOGIC would apply the variable “name_is_maria = 1” as in, ""YES her name IS maria. 1 = TRUE"". We are assigning a boolean value of TRUE; AKA 1"". However, the lesson did NOT progress, and instead completely contradicts itself, which understandably would be confusing to anyone who understands basic logic and trusts the lesson being presented as absolute truth.
Of course no one is trying to say that “the number one is a truth”, that is absurd and totally out of context.
"
55,Do all parameters have to be used within a function?,"FAQ,Python FAQ",,13,"
Question
Will a function still work if there are parameters, but some of them are never used within the function itself?
Answer
Functions will still work as normal even if none of the parameters are actually used within the function code itself.
However, doing this may be counterintuitive, as the purpose of parameters is to allow different input values to be used when running a function to produce results based on the input. Not using some of the parameters means that although the input value must be provided in the function call, it’s not used, so it can be a waste of space or memory.
Example
# This function takes 3 parameters, but only uses 
# 2 of them in its code.
def add_two(a, b, c):
  return a + b

# The call still requires inputs for each parameter.
add_two(10, 30, 50) # returns 40

","
In the example, the function called is not the function defined.

@jephos249 can properly address this question. Would it were he could be so obliged.

In this function, why did you use return instead of print()?
Is there any advantage in using return?

As you do more coding, you will find that you use print() less and less.  print() is useful only for showing a result onscreen, but with return, the result can be passed to a variable or to another function.
The famous introductory “hello, world!” expression would be more akin to real-world usage as something like:
def hello(name):
    return ""Hello + "" "" + name + ""!""
# type your name within quotes in place of ""world""
name = ""world""
greeting = hello(name)
print(greeting)


Reading the replies, I see that I mistook the question and was expecting different replies. I misread it as “Do you have to use all the parameters when you call a function?” Does anyone have any insight on this?
I’m thinking of something like a command line tool, where you can add -letters or --commands. I suppose, though, that this might answer my own question. You could hypothetically design a program that potentially uses more parameters, but they are optional.

you got the wrong code.
Here is the correct code that will return 40:
def some_numbers(a, b, c):
	print(a + b)

some_numbers(10, 30, 50)

Make sure you run your code in compiler prior to posting it.

Originally, the example code contained a mistake which would result in a NameError when attempting to run the code. Thank you, @ghulseman and @ajax8473289299 for noticing, and pointing it out. The mistake has been corrected.

Do All parameters have to be used in a function call? It looks like yes they do
def mult_x_add_y(number, x, y):
  print(number*x + y)
mult_x_add_y(10,2)

When I intentionally leave out the last parameter in the call i get an error: TypeError: mult_x_add_y() missing 1 required positional argument: ‘y’

Hello, @dkirkeberg.
Since none of the functions parameters are optional, the arguments are required. The original post, however, refers to the parameters being used inside the function. This code would execute for example:
def mult_x_add_y(number, x, y):
    print(x + y) #didn't use number

mult_x_add_y(10, 2, 4) #prints 6

This would also execute:
def mult_x_add_y(number, x, y = 4): #if an argument is supplied for y it gets assigned, otherwise, the default value of 4 is assigned
    print(x + y) #still not using number, and y is now optional

mult_x_add_y(10, 2) #prints 6
mult_x_add_y(10, 2, 15) #prints 17

Happy coding!

To complement @midlindner’s examples, we have, as would be expected, variants, and also as expected, inherent provisos. The last can be demonstrated thus,
def mult_x_add_y(n, x = 1, y = 0):
    return n * x + y

When we multiply by zero we get zero, hence we have a default value of 1 to permit the multiplication, albeit there is no change. By the same token we add zero, again so there is no change. The return value is an identity of the primary argument, n when the defaults are in effect.

>>> def foo(*args):
	print (type(args))

	
>>> foo(1,2,3,4,5,6,7,8,9,0)
<class 'tuple'>
>>> 

Above we see that any length argument sequence is cast as a tuple.
>>> def foo(*args):
	print (args)

	
>>> foo(1,2,3,4,5,6,7,8,9,0)
(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)
>>> 

Though it mightn’t be so advisable to venture away from the uniform dynamics of the varying inputs, with careful design we can glean out the singular variables we want from the front of the list and lump the rest into another tuple.
>>> def foo(*args):
    a = args[0] or None
    b = args[1] or None
    c = args[2] or None
    d = args[3:]
    print(a,b,c,d)

    
>>> foo(1,2,3,4,5,6,7,8,9,0)
1 2 3 (4, 5, 6, 7, 8, 9, 0)
>>> 

But we need to go back…
>>> def foo(*args):
	print (args)

	
>>> foo()
()
>>> foo(10)
(10,)
>>> 

Nothing in, and a tuple is still returned. A single argument and a tuple is returned with a comma after the value. Why? (10) is not a tuple; (10,), is.
>>> foo(10,0)
(10, 0)

No more added comma. The above is unquestionably a tuple.
>>> foo(10,0, 0)
(10, 0, 0)
>>> foo(10,0, 0, 0)
(10, 0, 0, 0)
>>> foo(10,0, 0, 0, 0)
(10, 0, 0, 0, 0)
>>> 

Back to the above,
>>> def foo(*args):
    a = args[0] or 0
    b = args[1] or 1
    c = args[2] or 0
    d = args[3:]
    print(a, b, c, d)

    
>>> foo(0,0,0,0,0,0,0,0,0,0)
0 1 0 (0, 0, 0, 0, 0, 0, 0)
>>> 

Change the variable names of a, b, and c, and we can return just the result we want, or the result and the residual data if we have some further use of it. Recall that it was mentioned that careful design would be involved.
>>> def foo(*args):
    n = args[0] or 0
    x = args[1] or 1
    y = args[2] or 0
    d = args[3:]
    print(n,x,y,d)
    return n * x + y

>>> foo(0,0,0,0,0,0,0,0,0,0)
0 1 0 (0, 0, 0, 0, 0, 0, 0)
0
>>> 

>>> foo(10)
Traceback (most recent call last):
  File ""<pyshell#47>"", line 1, in <module>
    foo(10)
  File ""<pyshell#45>"", line 3, in foo
    x = args[1] or 1
IndexError: tuple index out of range
>>> 

>>> foo(10, 0)
Traceback (most recent call last):
  File ""<pyshell#48>"", line 1, in <module>
    foo(10, 0)
  File ""<pyshell#45>"", line 4, in foo
    y = args[2] or 0
IndexError: tuple index out of range
>>> 

>>> foo(10,)
Traceback (most recent call last):
  File ""<pyshell#49>"", line 1, in <module>
    foo(10,)
  File ""<pyshell#45>"", line 3, in foo
    x = args[1] or 1
IndexError: tuple index out of range
>>> 

>>> foo(10,0,0,0)
10 1 0 (0,)
10
>>> foo(10, 5, 5)
10 5 5 ()
55
>>> foo(7, 5, 7)
7 5 7 ()
42
>>> 

Mull this over. It bears discussion at some point. If now is not the time, then it should be some time soon.

Is there any way that I used 3 parameters but only want to add value of any two and put another “Null” value 10906×217 22.1 KB

you can assign x to 1

def mult_x_add_y(number, x, y):
print(number * x + y)
mult_x_add_y(1, 1, 1) #results 2

"
56,Why is it not accepting my code?,"FAQ,Python FAQ",q-a,1,"
Question
I followed the instructions and my code is correct, why is my answer not being accepted?
Answer
A lot of common issues are solved by clearing your browser’s cache and pressing ctrl + f5 (cmd + shift + r on Mac) to hard refresh the page. Also be sure to try using Chrome, as it’s typically the most reliable for Codecademy’s environment.
If you’re seeing a grey terminal on the right instead of the normal terminal, and nothing happens when you press run, the issue may be caused by the account you registered with.


First, check to make sure you’ve verified your account through your email.


If you’ve tried everything above and made your account by signing in with your Google account, some users in the same situation have had success creating a new account with a “normal” email, not signing in through Google.


These are just common issues I’ve seen as an advisor, but we also have an official troubleshooting guide you can try as well if nothing above worked out.
",
57,Can transitively related expressions (like a < b and b < c) be shortened?,"FAQ,Python FAQ",,2,"
Question
If we have a transitive relation of expressions combined with and, like (a < b) and (b < c) and (c < d), can this be shortened?
Answer
Yes, this can be done by chaining the expressions with a transitive relation. Because of the order of operations, each and operator has the same precedence which means that they will just evaluate from left to right as they appear in the entire expression.
Example
a = 1
b = 2
c = 3
d = 4

# Original expression
(a < b) and (b < c) and (c < d) # True

# Using chaining, we can shorten this.
# This will evaluate to the same result as above
a < b < c < d # True

","
5 posts were split to a new topic: What is the order of operations for logical operators?
"
58,What are the differences between using if and elif?,"FAQ,Python FAQ","conditionals-control-flow-py,q-a",6,"
so two things:

can someone explain the difference in use of ‘elif’ over ‘if’ in this problem?

def applicant_selector(gpa, ps_score, ec_count):
  if gpa >= 3.0 and ps_score >= 90 and ec_count >= 3:
    return ""This applicant should be accepted.""
  elif gpa >= 3.0 and ps_score >= 90 and ec_count < 3:
    return ""This applicant should be given an in-person interview.""
  else:
    return ""This applicant should be rejected.""
  
def applicant_selector(gpa, ps_score, ec_count):
  if (gpa >= 3.0 and ps_score >= 90 and ec_count >= 3):
    return ""This applicant should be accepted.""
  if (gpa >= 3.0 and ps_score >= 90 and ec_count < 3):
    return ""This applicant should be given an in-person interview.""
  else:
    return ""This applicant should be rejected.""

the top is the solution code and only varies from mine in the use of elif, however, it gave my code the green check mark.

Is there a way to make this code more succinct? It feels a little clunky as I am having to repeat variables that remain the same in various cases/

","
Hi, @jacobgarwin295317990
First, decide what you want to do:


if - elif - else  sets up a chain whereby the second condition will only be evaluated and its block executed if the first if condition does not return True, and else only if both do not return True.


if - if - if sets up a chain in which each if statement will be evaluated ans its block executed if True, regardless of any prior results.


if - if - else  likewise sets up a chain in which both if conditions will be evaluated and their blocks executed if True, but else will be evaluated only if the must recent if (i.e., the second one) is False.


Of course, depending on the specific conditions, as in the case you cite, the results might be the same for every possible set of inputs.
So, consider: In the example you cite, if condition 1 returns True, why should your code even bother to evaluate the second?  Using elif eliminates that need.  It doesn’t seem like much here, but what if the if and elif conditions involved a massive data search or a particularly complex calculation?  You could save some significant computational power by a judicious choice of if - elif vs if - if.
How to simplify? Leverage the facts that (1) the first two lines differ only in the third condition, (2) that the third condition in line 1 can only be True or False, and (3) that executing return halts processing of the function.
# Your own version is equivalent to this:
if condition_1 and condition_2 and condition_3:
    return result_1
if condition_1 and condition_2 and not condition_3:
    return result_2
else:
    return result_3

# ... so how about:
if condition_1 and condition_2:
    if condition_3:
        return result_1
    else:
        return result_2
return result_3

# ... or make use of Python's ""ternary operator"" feature:
if condition_1 and condition_2:
    return result_1 if condition_3 else result_2
return result_3

(And, you could double-up the ternary operator to get a one-liner, but that,IMHO, would be obfuscating, rather than simplifying.)
Once you cover dictionaries, you’ll be able to eliminate many if - elif chains altogether.

Thank you for this explanation! One follow up on your code simplification:
# ... so how about:
if condition_1 and condition_2:
    if condition_3:
        return result_1
    else:
        return result_2
return result_3


wouldn’t you want an “else result_3” instead of “return result_3”? So it appears to me that the return statement is paired with the initial “if” condition_1 and condition_2 thus result_3 will be given in the event that conditions 1 & 2 are met which is not the desired outcome. Maybe I am just confused on the use of “return” to halt a function? Anything that clarifies would me much appreciated!




 jacobgarwin295317990:

return result_3


That line is unreachable.




 jacobgarwin295317990:

So it appears to me that the return statement is paired with the initial “if” condition_1 and condition_2 thus result_3 will be given in the event that conditions 1 & 2 are met which is not the desired outcome.


No. If conditions 1 & 2 are met, then one of either (1) the subsequent if or (2) its following else block will be executed, and the result of both of these is return something, which means that result_1 or result_2 is returned, and the function halts (for that is what return does.).  The line, return result_3 is (in that case) never reached, as @mtf states.
Say that condition_2 is False.  Then the initial if statement returns False, and the subsequent if - else block is not entered, but is completely bypassed and control passes to the subsequent line, return result_3:
condition_1, condition_2, condition_3  =  (1 > 0), (1 < 0), (1 > 0)
result_1, result_2, result_3 = 'result_1', 'result_2',' result_3'

def some_function(condition_1, condition_2, condition_3):
    if condition_1 and condition_2:
        if condition_3:
            return result_1
        else:
            return result_2
    return result_3

print(some_function(condition_1, condition_2, condition_3))

Output:
result_3

Play around with the conditions in line 1 to see how it works.



 jacobgarwin295317990:

Maybe I am just confused on the use of “return” to halt a function?


When return is reached, the function


Evaluates the expression to the right of return to obtain a value


Assigns that value to the calling statement


Halts the function, which disappears (along with any of its local variables) from the call stack (Python’s “short term memory” of active processes) until called again.



Thanks for this explanation!
So putting else before return result_3 is unnecessary, but if we did it it wouldn’t really make a difference in any way, right?
"
59,What common errors should I look for?,"FAQ,Python FAQ",q-a,6,"
Question
This exercise mentions SyntaxError, are there other common error types I should look out for?
Answer
As you continue programming you’ll see common error names like TypeError, IndentationError, and many others, whose sources will become obvious the more you fix them. For an awesome infographic with lots of common errors, check out this PDF image of common errors and what causes them.
 



That awesome image was created by Martin at the website noted in the image: pythonforbiologists.com.
","
thanks for the explintion  

Good …nice presentation about handling errors in Python.

Image is broken, can you reupload it?

The link still worked. Now the image is also fixed 

I can not open the link. can you send me the image?
"
60,Why would we use Python 2 or 3?,"FAQ,Python FAQ",q-a,9,"
Question
Is there a reason to use Python 2 over Python 3, or vice versa?
Answer
In the software industry, some things take years to become the standard. Although Python 3 was released back in 2008, everyone’s code was already in production in Python 2. Given the amount of work it takes to update systems to a different version of a language, and the amount of testing it requires to ensure that a new language update offers more pros than cons, it’s no wonder that many features, programs, and libraries continue to run on Python 2.  Even though Python 2 is the older version, many tasks or companies may still require that you use Python 2.
Today, Python 3 is widespread, and the differences between 2 and 3 are very easy to catch up on. Learning Python 3 will be a matter of learning a handful of differences in syntax and functionality - the fundamentals are all the same, and adapting your learning from one to the other is relatively simple.  If you want to learn Python 2 and then add or switch to Python 3, don’t worry, you will be in good company!  With reading and practice, particularly with developer documentation, you can pick up Python 3 quickly.
As of October 2019, Codecademy Pro on Python teaches Python 3 – this includes the Pro Computer Science and Data Science Paths and multiple skill paths. Paths and include content from the core Python 3 course as well as deeper and broader material on Python to help with the Path outcome (e.g. different instruction with applying Python for data science vs. computer science).  Codecademy’s older free course, Learn Python 2, teaches Python 2.x.  Early access to new courses is one of the benefits of being a Pro member, and Codecademy Pro has a free 7 day trial if you want to try before you buy.
If you’re curious to learn more, here’s Python’s very own documentation on the differences and what’s new in version 3!
","
Consider also, proposed 2.7 end of life (EOL)

It borders on irresponsible to suggest anyone start any project (or even support one) that uses Python 2 at this point. In 2020 all support to be discontinued (after already being prolonged in 2014, when it was originally supposed to end). At this point all the major libraries (TensorFlow, etc.) are implemented in Python 3.
Python 2 can be downright dangerous to teach to beginners because of integer division (not to mention lack of unicode string support). It is not just print() and input() that have changed.

If is dangerous, I am wondering why Codeacademy has Python 2 for beginners. I wish everyone that decide to teach would have a common decision. I am new to Python and I bought a book called Hello World, Computer Programming for kids and other beginners, 2nd edition and unfortunately the author decided to go for Python 2.




 pyplayer94014:

If is dangerous, I am wondering why Codeacademy has Python 2 for beginners


Because at the time it was much better supported with more modules and libraries. It is still the basis of the language and it is never harmful to know the earlier iterations of a language, even while they are going out of vogue and riding into the sunset.
Beginners are not writing production code, but are learning syntax, keyword usage, program constructs, data structures, variables, etc. It is not dangerous at all if one is learning and applying what they learn. Adapting to the current version of the language is a simple matter if they have taken seriously what they have learned and followed up with lots of reading and practice.

Thank you, that is what I thought. It is not dangerous.

From a standpoint of bullet proof code in a production setting facing the web, it stands to good reason that the most recent version is ported to the site. In-house code should meet the latest standards at all times.
For our purposes, though, we need not concern ourselves at this point with the issues that may come with version 2 that are addressed in version 3. If one is supremely interested, then there is ample reading material available online. Look for papers written by professionals as opposed to just opinion blogs or forums (that they may be one in the same notwithstanding).

thanks a lot i just get it

I completed some Python lessons at CodeAcademy Pro in September 2019, before the stated October 2019, so then does this mean that the lessons have been updated/changed since then?
If so, how can I find out which lessons have been updated so I can go back and relearn?
"
61,How does `.pop()` work?,"FAQ,Python FAQ",q-a,65,"
Hey, guys. That loop syntax is very hard to me. I really didn’t understood how to get items from that list with .pop, so I created a solution using .append to match the answer:

index = -1
while len(students_in_poetry) < 6:
students_in_poetry.append(all_students[index])
if len(students_in_poetry) < 6:
index += -1
else:
break
print(students_in_poetry)

","
Where does the .pop() statement go?

If you read the post you are replying to you will see that the member doesn’t know how to use .pop(), either.
The list.pop() method can be used in one of two ways.

Last on, First off. This means it will always take the element at the end of the list.
Selectively, which means at any valid index.

item = items.pop()

item will be the last value in the items list.
item = items.pop(index)

item will be the value at items[index].
We want the six students at the end of the all_students list.
student = all_students.pop()

Hi Roy,
I tried that:
all_students = [“Alex”, “Briana”, “Cheri”, “Daniele”, “Dora”, “Minerva”, “Alexa”, “Obie”, “Arius”, “Loki”]
students_in_poetry = 
index = 0
while len(students_in_poetry) < 6:
students_in_poetry = all_students.pop()
print(students_in_poetry)
index += 1
but I have this answer
Value for students_in_poetry did not match ['Loki', 'Arius', 'Obie', 'Alexa', 'Minerva', 'Dora'] , (was Minerva ) ???
I tried many value to replace < 6  but it doesn’t work .
Something else, I don’t understand is why to use .append (in get stuck), we cannot use only .pop ???
Thx

Wow, I get it.  I was close…

While not telling me your solution, what was the idea that changed your function? I have tried many different variations, including something similar to what you wrote but I cannot seem to get the correct function.
best,
J

There are two things to keep in mind about .pop().

What we pop can be assigned to a variable, or used in an expression.
It shortens the list by one element.

Since we are using while, then what will the condition be set at? What are we to do with the popped element?

Having the same issue. This explanation/exercise is very poorly worded.

The lesson text is brief, but it does explain perfectly how while works. By now we should be well familiar with conditional expressions.
while condition:
    # do this

When the condition is not met, the loop ceases.

While the length of the students_in_poetry list is less than 6 , use .pop() to take a student off the all_students list and add it to the students_in_poetry list.

students_in_poetry = []
while len(students_in_poetry) < 6:
    # do this

Since the length of students_in_poetry is 0, the loop body code will execute.
student = all_students.pop()
students_in_poetry.append(student)

Notice that the students_in_poetry list is growing as we append each student, which makes sense. Once that list reaches 6 in length, the loop ceases.
:
There is a caution that we should be aware of, something that was brought up earlier… infinite loops. Can we predict what would cause the above loop to go on forever?

Great discussion, I want to add how I viewed it. Building onto the hint explanation the full answer is
while len(students_in_poetry) < 6:
  student = all_students.pop()
  students_in_poetry.append(student)

We want to learn how we arrived at this.
Firstly, the task is to fill up poetry class students as long as the number of students falls below 6.
Next, we want to remove the students from the pool of “total students” to avoid double counting [as we plan to add them to poetry class].
Lastly, after removing the students from the pool of “total students” we add them through .append to students_in_poetry.

One more way to go about it:
while len(students_in_poetry) < 6:
  students_in_poetry.append(all_students.pop())

print(students_in_poetry)


I solved it fairly similar:
all_students = [""Alex"", ""Briana"", ""Cheri"", ""Daniele"", ""Dora"", ""Minerva"", ""Alexa"", ""Obie"", ""Arius"", ""Loki""]
students_in_poetry = []

while len(students_in_poetry) < 6:
  students_in_poetry.append(all_students[-1])
  all_students.pop()
print(students_in_poetry)

So I append the last student on the list, then remove them until the poetry class reaches a limit of 6 students.
Hope that it can inspire.

Can anyone explain why the code says < 6 for poetry students? Capped at 6 is supposed to mean =< 6 (if I’m not wrong). Also the use of .pop is not explained prior to this exercise so had to guess

The loop will keep iterating until that condition fails, which means there will be exactly 6 members in the capped list.
Not sure that pop has not been covered yet. It should have come up in the unit on lists and or dictionaries, which both have a pop method.
list.pop(index)

pops from anywhere in the list;
list.pop()

pops the last item from the list.

Hi i have worked upon different solution which does not use pop() function.
Below is the code :
all_students = [“Alex”, “Briana”, “Cheri”, “Daniele”, “Dora”, “Minerva”, “Alexa”, “Obie”, “Arius”, “Loki”]
students_in_poetry = 
def add_student(index):
students_in_poetry.append(all_students[index])
return (students_in_poetry)
index=-1
while index>(-7):
add_student(index)
if index == (-6):
print(students_in_poetry)
index+= (-1)
print(students_in_poetry)
The above solution is not using any pop(). I tried to use python that i have learned so far.
Kindly help whether finding the solution in this way is correct or not. Or using pop() has any added advantage that maybe i am missing.
Moreover , i can add starting name also : for ex - starting from Alex.
Kindly give any suggestions to improve this code also.

One advantage that pop offers is that it removes the item from the list, and lets us assign it to another list. Your method does nor remove the names that are assigned to the new list.
>>> all_students = [""Alex"", ""Briana"", ""Cheri"", ""Daniele"", ""Dora"", ""Minerva"", ""Alexa"", ""Obie"", ""Arius"", ""Loki""]
>>> students_in_poetry = []
>>> n = len(all_students)
>>> while len(all_students) > n - 6:
	students_in_poetry.append(all_students[-1])
	all_students = all_students[:-1]

	
>>> all_students
['Alex', 'Briana', 'Cheri', 'Daniele']
>>> students_in_poetry
['Loki', 'Arius', 'Obie', 'Alexa', 'Minerva', 'Dora']
>>> 

Above we use list slicing to shorten the list on each pass. If you have not studied the slice method, then we will need to revert to an indexed approach.
>>> all_students = [""Alex"", ""Briana"", ""Cheri"", ""Daniele"", ""Dora"", ""Minerva"", ""Alexa"", ""Obie"", ""Arius"", ""Loki""]
>>> students_in_poetry = []
>>> n = len(all_students)
>>> m = n - 1
>>> while len(all_students) > n - 6:
	students_in_poetry.append(all_students[-1])
	del(all_students[m])
	m -= 1

	
>>> all_students
['Alex', 'Briana', 'Cheri', 'Daniele']
>>> students_in_poetry
['Loki', 'Arius', 'Obie', 'Alexa', 'Minerva', 'Dora']
>>> 


Thanks sir for the feedback
For 1st code with slicing method i have found some correction because it was not working.
below in corrected code:
all_students = [“Alex”, “Briana”, “Cheri”, “Daniele”, “Dora”, “Minerva”, “Alexa”, “Obie”, “Arius”, “Loki”]
students_in_poetry = 
n = len(all_students)
while len(students_in_poetry) < 6:
students_in_poetry.append(all_students[-1])
all_students = all_students[:-1]
print(all_students)
print(students_in_poetry)
2nd code is working fine.
Thanks again for the help

Hello!  I have done the exercise the correct way, but had this originally and wanted to know why the += .pop() situation worked this way: I’m getting an output that is taking each letter of each name and making it into its own item. Why does .pop() in this case remove individual letters and not the entire item?
all_students = [“Alex”, “Briana”, “Cheri”, “Daniele”, “Dora”, “Minerva”, “Alexa”, “Obie”, “Arius”, “Loki”]
students_in_poetry = 
index = 0
while index < 6:
students_in_poetry += all_students.pop()
index += 1
print(students_in_poetry)
print (all_students)
result:
[‘L’, ‘o’, ‘k’, ‘i’, ‘A’, ‘r’, ‘i’, ‘u’, ‘s’, ‘O’, ‘b’, ‘i’, ‘e’, ‘A’, ‘l’, ‘e’, ‘x’, ‘a’, ‘M’, ‘i’, ‘n’, ‘e’, ‘r’, ‘v’, ‘a’, ‘D’, ‘o’, ‘r’, ‘a’]
[‘Alex’, ‘Briana’, ‘Cheri’, ‘Daniele’]




 tera3519027342:

students_in_poetry += all_students.pop()


students_in_poetry is a list. The only thing that can be concatenated to a list is another list.
... += [all_students.pop()]

Because +=, when used with lists, works like lst.extend(), i.e., it treats the right operand (or the argument, in the case of extend()) as an iterable, and appends each of the elements of the iterable to the list.
So when the Python interpreter sees this:
students_in_poetry += all_students.pop()

It first executes all_students.pop(), which returns, the first time around, ""Loki"".
… and then executes students_in_poetry += ""Loki"", which, as noted by @mtf, is  treated as
students_in_poetry += ['L', 'o', 'k', 'i']
"
62,Why do some methods use dot notation when others don’t?,"FAQ,Python FAQ",,14,"
Question
Why do some methods use dot notation when others don’t?
Answer
Python is an object-oriented language, meaning it’s built around the idea of objects making things more scalable and reusable. You’ll be introduced to objects in depth later in the course, but for now think of objects as being built from blueprints that specify that object’s properties and methods.
Dot notation allows us to use methods belonging to an object. For example, if we had a Car object it might have an ignition( ) method that we can use to turn the car on. Strings are objects just like a Car could be, and they have methods you can make use of, like upper( ) and lower( ).
Other methods that don’t use dot notation are not dependent on being attached to an object, and might even be built into the language, like the len( ) method you learned about!
","
An easier way to think about it would be that the methods using dot notation do something to the variable while the others tell us something about it.

In the course it is mentioned that
Methods that use dot notation only work with strings.
On the other hand, len() and str() can work on other data types.
So can you give some example on the the behalf of above mentioned statements




 rishikushwaha:

Methods that use dot notation only work with strings.


that is not entirely true, there are also methods for other data types:
print ['a', 'b', 'c'].pop(1) # will output: b

so methods are data type specific while built-in function will work on multiple data types:
len(""string"")
len(['a', 'b', 'c'])

you will grasp this better once you learned about functions, classes and methods

2 posts were split to a new topic: The len() built-in function

Is that strictly true since str() would do something with the variable by turning it into a string, rather than just tell us something about it like len() may do?

str() doesn’t actually change the variable, but tells us what the string version would be, so it’s still telling us something about the variable.

Why do we use empty parenthesis “( )” in using dot notation?

calling functions and methods requires parenthesis. The parentheses don’t have to be empty, for example:
console.log('hello world');

we use the dot notation (log is a method of console object), and we supply an argument between the parentheses (hello world)

Methods are blocks of code that are associated with an object. They are called using dot notation, the object name first: obj.method().  sort(), for example,  is a method belonging to the list object, and it is called using my_list.sort(), sorting the list in place.
Functions are stand alone objects.  They are called without any association to an object, and generally work with a variety of objects.  sorted(), for instance, is a function. It works on any iterable, and returns a new, sorted version of the iterable.
If you call a method or function using the parentheses, the interpreter assumes that you want to run the function or method.
If you call a method or function without parentheses, the interpreter assumes that you want to return the function or method.
>>> my_lst = [5,3,2,6]
>>> s_lst = sorted(my_lst)
>>> print(sorted)   # no parentheses
<built-in function sorted>
>>> print(s_lst)
[2, 3, 5, 6]
>>> print(my_lst)
[5, 3, 2, 6]    # unchanged
>>> my_lst.sort()
>>> print(my_lst)
[2, 3, 5, 6]     
>>> print(sort)  # no parentheses, no object
Traceback (most recent call last):
  File ""<pyshell#7>"", line 1, in <module>
    print(sort)
NameError: name 'sort' is not defined
>>> print(my_lst.sort)    # no parentheses, object specified
<built-in method sort of list object at 0x00000241AF652B48>
>>> 


You can obtain a list of built-in functions by typing dir(__builtins__) at the >>> prompt in a shell. For a list of the methods of an object, type dir(obj) where obj is the object name (list, str, int) , or any object of the type, i.e.,  dir(‘abc’) for a list of string methods.

What about .isalpha() and .isdigit()? .They don’t seem to modify the strings they were called on. It would be nice if it were that simple, but it doesn’t seem to be.
The input() method doesn’t tell you anything about its prompt - it returns the user’s input. I suppose that is somewhat of a fair “exception”, though.
The print() method doesn’t tell you anything about the data it is called on (strictly speaking - we’re talking about return values, right?).


print() specific details
If you print the result of a print statement, the inner print statement will still executed, and then you get None because that inner print statement returned nothing (technically, it returned None) to the outer print function.

You might go on to argue that it doesn’t modify the data either. That would also be correct. I didn’t say that it had to be one or the other - I was simply saying that it doesn’t seem to be that simple.
Also, instead of writing len(""hello"") I could write ""hello"".__len__() which is still only telling me the length (to be fair, this isn’t a “regular” case).
Another “exception” to this is the .split(separator) method. Test it out. It doesn’t modify a string at all. Instead, it creates a list of strings. If you don’t assign that list to anything, then the information is just lost because it’s useless.
Since .split() doesn’t modify a string, .join() just had to join the fun. It’s called on a string that doesn’t get modified. Its parameters don’t get modified either! It just creates a string that is a chain of all its arguments, separated by the given separator.
In short, there are multiple methods that don’t follow this “rule” and there are probably many more. I personally don’t have a shortcut way of memorizing it, other than the fact that there are a billion string methods in just about every language. If you just keep using a language, you’ll see patterns in certain places.

That’s a fair question. The short and simple answer is that what I stated is a rule of thumb. It’s right in most cases, but it’s not always. I have a more complicated summing up, but it’s not as easy to understand. Here it is:
Functions using dot notation are attached to a specific object and will only work on that object. Multiple objects can have a function that does the same thing (e.g., all strings have a .upper() function), but if you tried to use .upper() on a non-string, it would tell you that the function doesn’t even exist. This is because the .upper() function has not been assigned to non-strings. You could assign a .upper() function to it, but it is not built in (and it wouldn’t do the same thing).
Functions without dot notation are general functions that can usually be passed any object. For example, the len() function can be used on strings, arrays, lists, dictionaries, etc. and will still work fine. It is not restricted to one data type.
So, is my “rule” true? No. But it’s usually the case. In most cases that a function is only assigned to one data type (dot notation), it’s because you’re altering the data in a way that wouldn’t make sense in other data types. Most of the time that you use a method, it’s because you’re getting information that exists in many different data types.
But there are exceptions. There is information about a string that would make sense about an integer, and there are things you can do to a string that you can also do to an integer.
Let’s test my more complicated rule on your examples:
.isalpha() would not make sense in any context but a string (why would you ask an integer or array if it is made of letters of the alphabet?) so it uses dot notation
.isdigit() would not make sense in any context but a string (an integer or float will always be made of digits, and others will not be) so it uses dot notation
input() works on most data types, so it should be a method.
print() works on most data types, so it should be a method.
I’m not going to argue your len() example since, as you stated, that’s not a usual use. I’m not sure what’s going on there. (Maybe the double underscores signify that you’re calling a method? I really have no idea. Might make a good google search)
.split() and .join() don’t make sense in any context but strings, so they use dot notation (they might make sense in the context of arrays, lists, etc., but they would go about it in completely different ways, so you couldn’t use the same method)
I hope that clears things up a bit. Maybe I should have stated that there are exceptions in my first message, but I think it’s simpler for people to see at first a rule of thumb. If they’re interested, I guess they can now read on to this. 
(Just a warning: my python’s a bit rusty. I might have accidentally said something from JS. Please forgive me. They’re not extremely different, so hopefully, the idea I’m trying to get across will still make sense if that happens)

I wasn’t really confused in the first place, just curious about how much that applies, but I do think that is a much clearer explanation and is a good way of relating objects, methods, and dot notation - methods with dot notation are called on a specific data type (including a user-created class) because they wouldn’t make sense on other data types, while those without dot notation are more general and can be called on a variety of data types. Methods without dot notation are also used for things more complicated than that, but it’s a generally good way of understanding it.
Your ‘rule of thumb’, in general, describes the result of the use of dot notation pretty well, but it can still be important to keep in mind that it’s not necessarily true for every single method.


details on .__len__() example
As for that example, I’m near certain that calling thing.__len()__ is equivalent to len(thing). I think it has something to do with how Python is built, and I think that behind the scenes len(thing) is actually thing.__len()__ - I could be wrong though, so don’t take my word for it.



some irrelevant-to-main-point notes
If you write a float as a string and then call .isdigit() on it, it will actually return False, because the decimal point/period, ., is not a digit. Then again, if you really wanted to know if it’s an integer, you can just ask it for its type (which ends up being a method that follows your ‘rule’).

So… in summary - your rule of thumb does work pretty well for people (especially those new to programming) to remember what uses dot notation and what doesn’t, but it can cause confusion in some cases. However, your deconstruction of what each method is for and how that influences whether or not it is written with dot notation is, in my opinion, a clearer and more accurate explanation that helps deeper understanding. 

>>> dir(str)

The above will output a list of all the attributes of the str class. Atributes that behave as functions are methods of the class.
"
63,"Print() is a function, but is being called inside another function. Is this okay?","FAQ,Python FAQ",,5,"
Question
Within the context of this exercise, we placed a print() function within another function. Is it okay to place function calls inside another function?
Answer
Yes, you have functions calls within another function. You can think of functions as generally being a collection of multiple lines of code. These lines can be statements, expressions, and even other function calls.
When you run a function that calls another function, it will go through its code lines as usual, and when it gets to the function call, it will complete that call, and then continue with its next lines of code as usual.
Example
def sayHi():
  print(""Hi!"")

def sayWords():
  sayHi() # The function call will run and complete.

  # After the function call above completes, then Python
  # will continue with the next code lines in the function.
  print(""How are you?"")

","
def Hello world ()
print(""Hello""0

Hi, Marty – Not sure if you posted a question here, but here are a couple of comments:
To post code, use the </> icon that is found in the middle of the menu bar at the top of the text box you are typing in.
def Hello world ()
    print(""Hello"")

There are a couple of syntax errors (or typos)  here, along with one style error.  The style error is that we generally do not begin function names with uppercase letters.  Can you find the syntax errors?

Hello um, how would i know when the function ends after so it doesn’t repeat any code i’m doing.

A Python function ends when the indentation is removed.
def foo():
    # code body

print (foo())    # this line is not in the code body of the function

"
64,Does the zip function work with lists of different lengths?,"FAQ,Python FAQ",,12,"
Question
Do the lists passed to the zip() function have to be the same length?
Answer
The zip() function will only iterate over the smallest list passed. If given lists of different lengths, the resulting combination will only be as long as the smallest list passed. In the following code example, list_two contains more elements than list_one so the resulting merged list will only be as long as list_one.
list_one = ['Joe', 'Mark', 'Jane']
list_two = [ 100, 34, 87, 23, 65 ]
merged = zip(list_one, list_two)
print(list(merged))
# [('Joe', 100), ('Mark', 34), ('Jane', 87)]

It is possible to use the cycle() function from itertools to repeat values from the shorter list. This will allow zip() to iterate over all the elements from the longer list. In this example, cycle() is used to repeat values from list_one and the resulting merged list will now contain all values from list_two.
from itertools import cycle
list_one = ['Joe', 'Mark', 'Jane']
list_two = [ 100, 34, 87, 23, 65 ]
merged2 = zip(cycle(list_one), list_two)
print(list(merged2))
#[('Joe', 100), ('Mark', 34), ('Jane', 87), ('Joe', 23), ('Mark', 65)]

","
Hello,
Why the sublists created by “zip” command are coming out in curly brackets ( ) and not in square brackets  to identify that it is essentially a list?
Thank you for your insight!

look at the below example:
myList = ['a', 'b', 'c']
myTuple = ('a', 'b', 'c')

we have a list (myList) and a tuple (myTuple), a tuple is very similar to a list, except tuples are immutable.
Given values returned by zip don’t have to be mutated, a tuple is more efficient.
https://www.tutorialspoint.com/python/python_tuples.htm

Thank for your fast and thorough response, it has been very helpful!

Can we merge more than 2 list with this zip tool?

Some questions we can answer by trying…
>>> a, b, c = [1, 2, 3], [4, 5, 6], [7, 8, 9]
>>> list(zip(a, b, c))
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
>>> 


Thanks for the explanation.
Had to google what immutable meant, for those who are also on the same boat I was it means it cannot change.

Can you explain how to use cycle().

cycle() can be used to pair up characters from a short sequence with characters in a long sequence.
a = list('abcdefghijklmnopqrstuvwxyz')
b = [1, 2, 3, 4]

Now we can zip the two together. Normally zip() will stop when it reaches the end of the short sequence so when we do this,
x = list(zip(a, b))

we get,
[('a', 1), ('b', 2), ('c', 3), ('d', 4)]

but when we use cycle() on the short sequence we get,
z = list(zip(a, cycle(b)))

[('a', 1), ('b', 2), ('c', 3), ('d', 4), 
 ('e', 1), ('f', 2), ('g', 3), ('h', 4),
 ('i', 1), ('j', 2), ('k', 3), ('l', 4),
 ('m', 1), ('n', 2), ('o', 3), ('p', 4),
 ('q', 1), ('r', 2), ('s', 3), ('t', 4),
 ('u', 1), ('v', 2), ('w', 3), ('x', 4),
 ('y', 1), ('z', 2)]

Nice explanation. Thank you !

Why I’m getting error as cycle() is not defined
a = [1, 2, 3, 4]
b = [“x”, “y”, “z”]
zipping_cycle = zip(a, cycle(b))
new_list2 = list(zipping_cycle)
print(new_list2)

Did you import cycle from itertools?
"
65,What are some cool things that Python has been used for?,"FAQ,Python FAQ",,1,"
Question
What are some things that Python is used for, or some Python tools I can make use of to make cool things?
Answer
Python has become an incredibly popular programming language in many fields. It plays a role in lots of popular products like YouTube, DropBox, Instagram, Eve Online, and so many more.
If you’re interested in data science, Python libraries like SciPy, NumPy, and Pandas will allow you to perform powerful analysis and computation.
If it’s video games you want to build, check out existing Python game libraries and engines, like Panda3D or PyOpenGL.
It’s a language that has become widespread across just about every field, so if you put in the time to learn the basics, it’ll be rewarding regardless of the path you choose. And luckily it’s such a popular language that any of the above tools will have lots of online help available.
",
66,Do I always need to include comments?,"FAQ,Python FAQ",q-a,3,"
Question
Do I need to write comments for any code that I write, or is there some standard I should follow?
Answer
It’s a good idea to write comments for anything that is potentially ambiguous. If possible, avoid ambiguous variable/function/class names. But if it can’t be helped, comments can clear up confusion.
Another good reason to write comments is to explain functionality. A very common practice is writing documentation (via comments) for each function in your program. You’ll typically see a description of what it does and how to use it, as a minimum.
Comments will end up making your code easier to maintain because it’ll help you, and other programmers who read it, remember what was going on when you wrote it six months ago!
","
heyo great question!!!

good question big homie
"
67,If a dictionary is updated with an empty key/value will it erase the contents of the dictionary?,"FAQ,Python FAQ",,2,"
Question
If the dictionary update() is called with no parameters OR an empty dictionary, will the update erase the existing contents of the dictionary?
Answer
NO, calling update() with no parameters or with an empty dictionary will not change any of the existing key/values in the dictionary. The following code example shows both types of empty updates. The existing dictionary remains unchanged.
cities = dict()

cities.update({""San Francisco"": 75, ""Chicago"": 100})
cities.update()
cities.update({})

print(cities)
# {'San Francisco': 75, 'Chicago': 100}

","
2 posts were merged into an existing topic: Do dictionaries preserve order now?
"
68,Can we add a new column at a specific position in a Pandas Dataframe?,"FAQ,Python FAQ",,6,"
Question
Can we add a new column at a specific position in a Pandas dataframe?
Answer
Yes, you can add a new column in a specified position into a dataframe, by specifying an index and using the insert() function. By default, adding a column will always add it as the last column of a dataframe.
Say for example, we had a dataframe with five columns. If we wanted to insert a new column at the third position (index 2), we could do so like this:
# Third position would be at index 2, because of zero-indexing.
df.insert(2, 'new-col', data)

This will insert the column at index 2, and fill it with the data provided by data. When inserting, the columns from index 2 onward will effectively be shifted over to the right by 1 index each. The column that was previously at index 2 would now be at index 3 and so on for the following columns.
","
Hello, I tried adding data using the following method but it didn’t seem to work. Any ideas where I went wrong?
import codecademylib
import pandas as pd

df = pd.DataFrame([
  [1, '3 inch screw', 0.5, 0.75],
  [2, '2 inch nail', 0.10, 0.25],
  [3, 'hammer', 3.00, 5.50],
  [4, 'screwdriver', 2.50, 3.00]
],
  columns=['Product ID', 'Description', 'Cost to Manufacture', 'Price']
)

# Add columns here
sold_in_bulk = pd.dataframe [""Yes"",""Yes"",""No"", ""No""]

df.insert (3, ""Sold in Bulk"", sold_in_bulk)

print(df)

also I’m assuming insert only works on dataframes and if I formatted it as a normal list e.g. sold_in_bulk= [""Yes"",""Yes"",""No"", ""No""] it wouldn’t work?

You have probably solved this already, but, just for future reference, the assumption was off; simply using a list for sold_in_bulk does the trick.

import pandas as pd
df = pd.DataFrame([
[1, ‘3 inch screw’, 0.5, 0.75],
[2, ‘2 inch nail’, 0.10, 0.25],
[3, ‘hammer’, 3.00, 5.50],
[4, ‘screwdriver’, 2.50, 3.00]
],
columns=[‘Product ID’, ‘Description’, ‘Cost to Manufacture’, ‘Price’]
)
Add columns here
sold_in_bulk = pd.DataFrame([“Yes”, “Yes”, “No”, “No”])
df.insert (3, “Sold in Bulk”, sold_in_bulk)
print(df)

I think your sold_in_bulk is a series, not a list by the way.

This is what you needed to do.
df.insert(3, ""Sold in Bulk"", [""Yes"", ""Yes"", ""No"", ""No""])

"
69,Why should I write comments in my code?,"FAQ,Python FAQ",q-a,5,"
Question
Is there a reason to comment code? If I’m writing it, I’m familiar with what it’s doing.
Answer
Writing helpful comments in your programs is an excellent habit! You may understand what you’re writing in the moment, but if you look at that same code six months from now, it may not be so clear, especially as your projects grow in size!
It’s a good idea to briefly explain your code anywhere you think it might help your future self, or other programmers who may read your code.
","
what will happen to the code when its progressing ?

The computer ignores comments, so there’s no performance reason not to use them.

there is one thing i like to know. in my company there is a rule to not explain code in comments. So there usually are no information about it and it is hard to follow up. For me as trainee it is often hard to undertand a complex piece of code.
Is this a usual company approach?

Yes. Useless comments create clutter and make code less readable.
In the professional environment, the goal is to write code that is easy to understand and to read. Comments are usually reserved for referencing issues, documentation of functions and to describe the code that for some reason had to be written in a complicated manner.



 py0167997871:

For me as trainee it is often hard to undertand a complex piece of code.


If there is in fact complex piece of code which is hard to understand - git blame, find out who wrote this piece and tell this person that they did a bad job.
"
70,Why is it not accepting my code?,"FAQ,Python FAQ",q-a,1,"
Question
I followed the instructions and my code is correct, why is my answer not being accepted?
Answer
A lot of common issues are solved by clearing your browser’s cache and pressing ctrl + f5 (cmd + shift + r on Mac) to hard refresh the page. Also be sure to try using Chrome, as it’s typically the most reliable for Codecademy’s environment.
If you’re seeing a grey terminal on the right instead of the normal terminal, and nothing happens when you press run, the issue may be caused by the account you registered with.


First, check to make sure you’ve verified your account through your email.


If you’ve tried everything above and made your account by signing in with your Google account, some users in the same situation have had success creating a new account with a “normal” email, not signing in through Google.


These are just common issues I’ve seen as an advisor, but we also have an official troubleshooting guide you can try as well if nothing above worked out.
",
71,"When using iloc to select ranges of Pandas dataframe rows, can we skip rows?","FAQ,Python FAQ",,10,"
Question
When using iloc to select ranges of Pandas dataframe rows, can we skip rows? For instance, can we choose to select every second or third row only?
Answer
You can! Selecting multiple rows using .iloc is very similar to list slicing in Python. There are a few ways to select rows using iloc.
To select just a single row, we pass in a single value, the index. For example with Python lists,
numbers[0] # First element of numbers list
And with Dataframes, we would do something similar,
orders.iloc[0].
Selecting a range of elements of a list and a range of rows in Pandas is also very similar.
# Python list
numbers[3:7]

# Pandas
orders.iloc[3:7]

To skip a certain number of indexes per index, we can include a third, step, value.
# This selects values at indexes 0, 3, 6, 9.
# Python list
numbers[0:10:3]

# This selects rows at indexes 0, 3, 6, 9
# Pandas
orders.iloc[0:10:3]

","
Another way to do so is: orders.iloc[[0, 2, 4, 6]] which will return only even rows

Is there a way to return the last two rows and the second row all within iloc? I’ve got the below data from the example
import codecademylib
import pandas as pd

df = pd.DataFrame([
  ['January', 100, 100, 23, 100],
  ['February', 51, 45, 145, 45],
  ['March', 81, 96, 65, 96],
  ['April', 80, 80, 54, 180],
  ['May', 51, 54, 54, 154],
  ['June', 112, 109, 79, 129]],
  columns=['month', 'clinic_east',
           'clinic_north', 'clinic_south',
           'clinic_west']
)
april_may_june = df.iloc[-2:]


april_may_june = df.iloc[[-2, -1 ,1]]

I tried this, but I am not getting the answer as expected. I got last two rows.

may_june_february = df.iloc[[4:,1]]
OR
may_june_february = df.iloc[[4,5,1]]

or if you want all even rows and are too lazy too type them all:
#use list slicing
df.iloc[::2]


The pandas docs mention a way to do this using a lambda function.
this returns only the even rows
df.iloc[lambda x: x.index % 2 == 0]

and if you wanted odds
df.iloc[lambda x: x.index % 2 == 1]

Pandas Documentation on .iloc()

you can try the syntax below
april_may_june = df.iloc[-3:]
This syntax will select the last 3 rows of dataframe




 digital1288277484:

df.iloc[[-2, -1 ,1]]


for selecting the last two rows only needs
df.iloc[[-2, -1]]
"
72,Why doesn’t Python automatically convert the number to a string?,"FAQ,Python FAQ",q-a,22,"
Question
Why doesn’t Python automatically convert the number to a string?
Answer
The answer becomes more clear as you learn to debug larger projects, and was carefully thought out when the language was being designed. In Python, and many other languages, the belief is that explicit is better than implicit. This means you should write your code with explicit functionality because by doing so, errors produced will help you understand where you went wrong.
For example, if we don’t convert a number to a string before concatenating it with a string, it gives a specific error that we are accustomed to looking for. However, if Python did this conversion automatically and, somehow, there was a bug in our program, it wouldn’t throw an error message because it converted as the language intended behind the scenes, but produced some unexpected output.
","
hi
is using quotations the same as using the str() , or are there any differences?

Using quotes is how we define a string. The str() function is for casting a non-string to a string.
str(42)            # '42'

str(True)          # 'True'

str([1,2,3,4,5])   # '[1, 2, 3, 4, 5]'

str({'one': 1})    # ""{'one': 1}""

Eg.
def digit_sum(n):
    total = 0
    for x in str(n)
        total += int(x)
    return total

When n is 12345, str(n) will be ‘12345’, an iterable.

This doesn’t makes exact sense considering Python supports implicit Data type conversion!

In the context of for Python cannot implicitly create an iterable from an integer. Integers cannot be split.

Hi mtf,
My comment was for this particular answer:
“The answer becomes more clear as you learn to debug larger projects, and was carefully thought out when the language was being designed. In Python, and many other languages, the belief is that explicit is better than implicit. This means you should write your code with explicit functionality because by doing so, errors produced will help you understand where you went wrong.”

If errors occur in an explicit, declarative environment, they occur for a specific reason. Loosely typed environments need tight reins, aka, nearly explicit. They must be able to safely morph one type to another in a meaningful way. We are still in charge of providing that meaning.
There can be no question as to the value of explicitness. What is, is. Implicitness is rife with gray area that needs to be thought over.
JavaScript arrow functions, and Ruby methods share one thing in common… Implicit return.
const f = x => x ** 2;

 >  const f = x => x ** 2
>- undefined
 > f(2)
<- 4
 > f(3)
<- 9
 > f(4)
<- 16


I guess I understand what you are trying to say. However, your answer will make sense only to a seasoned programer who is trying to pick up Python as a new laguage; like me.
For a newbie, it doesnt makes much sense. Also, without going in with a bit detailed explanation it sounds wrong to say that Python expects the Programmer to do explicit data casting for functions & operators which is not really the case since you can add a float & integer to get a float in python unlike some other languages.

What ever I say is refutable. That is stipulated. Discussion should emerge and then form a web. I’ve  not got stuck to that yet, but hey, stuff happens.

I like explicit having worked with implicit languages like 4GLs but it is still confusing to a Python newbie e.g. var = 3 then 3 is a string but string + 2 + string gives an error unless I put in str(2) …which implies that the interpreter assumed the 2 was an integer!




 oldruth:

I like explicit having worked with implicit languages like 4GLs but it is still confusing to a Python newbie e.g. var = 3 then 3 is a string but string + 2 + string gives an error unless I put in str(2) …which implies that the interpreter assumed the 2 was an integer!


if i do:
var = 3
print type(var)

we can clearly see it gives integer as response. If you do:
var = ""3""
print type(var)

then you have a string


number = 5
print “the number is :  %s” % (number)
print ""the number is : "" + number

in the above snippet,
the line 2 gets executed successfully, but the line 3 throws an error. So this means Python implicitly converts the number to string in the second line right ?




 blogplayer55476:

So this means Python implicitly converts the number to string in the second line right ?


If you mean,
>>> n = 5
>>> print (""Number = %s"" % n)
Number = 5
>>> n = 5.2
>>> print (""Number = %s"" % n)
Number = 5.2
>>> 

then, yes, it must be cast to string. Since there is no concatenation (only interpolation) we don’t have to explicity convert it as we would in the latter case. Much as the .format() method does…
>>> print (""Number = {}"".format(n))
Number = 5.2
>>> 

By rights, though, we should still tell the template what type to expect, %d, %i or %f. It tells the reader, as well what types are referenced by the variables.

Why does str() not change variables into a string? For example when I put:
variable = ""some text""

print str(variable)


Why is the output on the console “some text” instead of “variable”?

variable is only a label, not a value. It references a string object, so when we print the variable, the string it points to is what prints.

lets say we want a integer from the user:
user_input = raw_input(""enter a integer: "")

but raw_input stores the result as string:
print type(user_input)

so we need to cast to integer:
user_input = int(user_input)

if this casting would cast the label/variable, we wouldn’t be able to convert the user input to integer, that wouldn’t be very inconvenient.

I can also use a comma though, is there any reason for why I should use str() or int() etc? instead of a comma?
This
print ""The value of pi is around "" + str(3.14)

And this
print ""The value of pi is around"", 3.14

Look exactly the same in the console.

converting/casting data types is used for much more then just this simple print statement.

When I print “The value of pi is around 3.14”, the console prints the exact same thing as when I print ""The value of pi is around "" + str(3.14).
What’s the purpose of converting 3.14 to a string in this case?

its about the concept, the value might come from user input or a database, then you need to convert to string, you might not always have the luxury to just put the value in the string.
"
73,What is the use of points with very large dimensions?,"FAQ,Python FAQ",q-a,1,"
Question
In this exercise on representing points in Python, it is noted that we can represent points of arbitrary dimension with lists. In practice, would we often utilize lists of dimension greater than the three spatial dimensions?
Answer
First, it’s important to understand that “dimensions” aren’t necessarily spatial dimensions ( [x, y, z] or [length, width, depth], etc.). When we refer to dimensions, we are specifically speaking about the number of factors that we’re judging an object, or piece of data, against. For example, when we’re reading the position of a point in three-dimensional space, we’re judging its position against three fixed axes; these three axes are the only factors that we care about in this context. In data science and machine learning, we will often encounter circumstances where a result or computation depend on many more factors and, hence, many more dimensions.
Let’s make this concrete with an example. Suppose that you have an application that takes an image and attempts to identify it as one of fifty categories. Maybe the first category is “cat”, the second is “dog”, the third is “human”, and so on. It’s possible that your application creates a list of fifty percentages which gives you an estimate of its confidence that the image belongs to each category. So, if your application creates the list L for some image I, then L[0] is the probability that I is an image of a cat, L[1] is the probability that I is an image of a dog, and so on up to L[50]. In this case, our problem calls for fifty dimensions.
These kinds of circumstances are very common. So it may be helpful to think of dimensions as the number of factors which are important for your problem.
",
74,Did you double check the placement of `return`?,"FAQ,Python FAQ","loops-py,q-a",80,"
Question
As per this lesson, one common user challenge is the placement of return within their functions.
Answer
To quote python’s documentation: ""  return  leaves the current function call with the expression list (or None ) as return value."" The most important thing to take note of here is that it leaves the function. This means that when return is entered, the function will end. So return values are mutually exclusive. A function cannot hit return True over and over until its false, it will end as soon as it touches the first return. This quote below is a good metaphor:






return is the keyword used to pass back a return value to the caller of the function. After doing so, the function is done, kind of like handing in an exam
if the return keyword is nested in a loop, the return keyword will simply “stop” the loop. Like an exam where you haven’t completed all the questions but you decide to hand the test in (return it to the teacher)


In regards to the current lesson, here is a hint from this same moderator:






The moment you determine list b isn’t the reverse of list a, you could return False. You don’t have too make the remaining iterations, given you already know what you need to know


I hope these help, feel free to discuss below and help each other solve this challenge.
","
This code isn’t making any sense to me. Here’s what I’ve got:
def reversed_list(lst1, lst2):
for i in range(len(lst1)):
if lst1[i] == lst2[(-i - 1)]:
return True
else:
return False
Here’s my problem:
when I have the second print() run through my code, it shows up as true.
The two lists are lst1 = [1, 5, 3] and lst2 = [3, 2, 1]
So in theory, on the second run-through of the loop, it’s doing this:
if lst1[1] == lst2[-1 - 1]:
return True
else:
return False
I know that lst1[1] is equal to 5 and lst2[-1 -1] is lst2[-2] which is equal to 2. These are clearly not equal, yet I’m getting a True return.
Can someone explain why this is?




 triangularapple:

So in theory, on the second run-through of the loop, it’s doing this:


unfortunately, your code never gets to the second iteration/run through of the loop
By default, a function returns None at the end of the function. If we want to return something else at the end of the function, we can use the return keyword.
Given return is the last thing a function does, when a return keyword is reached, the function ends

I think I understand. So I only want to stop the function by returning if the return gives the answer I’m looking for. Otherwise the return needs to function outside of the loop?




 triangularapple:

So I only want to stop the function by returning if the return gives the answer I’m looking for


The moment you determine list b isn’t the reverse of list a, you could return False. You don’t have too make the remaining iterations, given you already know what you need to know

You should return when you’re done. Doing it any earlier makes no sense at all and doing it any later is pointless.


db78863a90d9938a3a730ad454180c307d5350de.png1366×768 89.9 KB

here its alright if i do this, the new value of lst2_new comes out just fine. but then i put the full code
""def reversed_list(lst1,lst2):
lst2_new=
while len(lst1)>len(lst2_new):
lst2_new.append(lst2[-1])
lst2=lst2[0:-1]
if lst2_new == lst1:
return True
else:
return False ""
it doesnt work.


image.png1366×768 92.2 KB

see it doesnt work, why???

if anyone could post the official solution here I would appreciate it.
The following supposedly “solves it” but it still doesn’t  solve for reversed_list(, )
def reversed_list(lst1, lst2):
for i in range(len(lst1)):
for i in range(len(lst2)):
if lst1[i] != lst2[i * -1 - 1]:
return False
else:
return True
#Uncomment the lines below when your function is done
print(reversed_list([1, 2, 3], [3, 2, 1]))
print(reversed_list([1, 5, 3], [3, 2, 1]))
print(reversed_list(, ))

We cannot see the indentation, but if the return statements are inside the loop, then the program does not run to completion.
Do we really need a nested loop? Can we do this with a single loop? You have the idea, already to use negative indices on one list.
s = [0, 1, 2, 3, 4, 5, 6]

Given the above list, let i equal 0 and let j equal -i - 1
i == 0; j == -1
s[i] == 0
s[j] == 6

Increment i and compute j.
i == 1; j == -2
s[i] == 1
s[j] == 5

Increment i and compute j.
i == 2; j == -3
s[i] == 2
s[j] == 4

and so on to `i == 5; j == -6.
What this means is we can iterate over one list and compare lst1[i] to lst2[j]. If there is no match, return False, else do nothing (so no else clause). Once the loop completes a full run, then and only then, return True.

Thank you very much.

Can anyone please help me in understanding why my code is not working:
def reversed_list(lst1,lst2):
  lst2rev = lst2[-1::-1]
  for index in range(len(lst1)):
    if lst1[index] != lst2rev[index]:
      return False
    return True

it’s returning True for this list - print(reversed_list([1, 5, 3], [3, 2, 1])).
The problem is it is only reading the first index i.e. lst1[0] and comparing 0th index of the reversed list. Can you please help in explaining why it’s not iterating over rest of the indexes.
Thank you

return is the keyword used to pass back a return value to the caller of the function. After doing so, the function is done, kind of like handing in an exam
if the return keyword is nested in a loop, the return keyword will simply “stop” the loop. Like an exam where you haven’t completed all the questions but you decide to hand the test in (return it to the teacher)

Thank you for the explanation, however there have been cases of loops where return is used and the loop has iterated over all the elements without returning after the first one. So in this code which I posted earlier what should I modify - I used print in place of return and in the output I get comparison between each and every element of the two lists, printing True/False 5 times.
This is the code in the answer to the problem, and this one is working just fine despite using return -
def reversed_list(lst1, lst2):
  for index in range(len(lst1)):
    if lst1[index] != lst2[len(lst2) - 1 - index]:
      return False
  return True





 famafrench:

This is the code in the answer to the problem, and this one is working just fine despite using return -


except in this case, return True is outside the loop, where in your case it was nested in the loop.
which gives quite a difference, the correct solution only gives true when lst2 is lst1 in reverse
your function gives true if the first item of lst1 equals the last item of lst2.

Thank you so much! This explains.


Why is this wrong?
when flipping True and False and changing == for != it is correct…  I don’t understand why can’t it be done the other way around.
HELP!

because return is the last thing a function does, when a return keyword is reached, the function ends
so with the code you currently have, if the first element of lst1 equals the last element of lst2, true will be returned, thus the function ends. At this point, we haven’t even verified all the other elements in the lists, so we can already have a false positive.
lets say the first element of lst1  doesn’t equal the last element of lst2 (at which point false should be returned, which isn’t happening)
the loop will continue with the second and element second to last element of lst2, compare them, if they equal, return true. Yet again false positive

Why does the code below not work?
def reversed_list(lst1, lst2):
  lst3 = lst2[::-1]
  for index in range(len(lst1)):
    if lst1[index] == lst3[index]:
      return True
    else:
      return False

It returns True for both tests!

return means handing back data, which means the function is done. However, in your program, this means the loop only makes a single iteration.
so the only compared are the first value of lst1 and the last value of lst2. If these values are equal, your program assumes lst2 is the reverse of lst1.
"
75,Can variables be reassigned to another data type?,"FAQ,Python FAQ",,11,"
Question
After a variable is assigned to an initial value, can the variable later be reassigned to another value that is of a different data type than its initial value?
Answer
Yes, variables in Python can be reassigned to a new value that is a different data type from its current value. In fact, variables can be reassigned to any valid value in Python, regardless of its current value.
Variables are essentially like an empty box, that can contain something like a string, number, or other value. When you assign it a value, the box will contain that value, and when you reassign it, it will empty out the old value, and the new value will be placed inside of it.
Example code
# This variable is initially assigned as a string.
var = ""Hi there""

# It can be reassigned to any other value, regardless of the type.
var = 35
var = False

","
Do we place a divider or How do we know that the value of the second variable will be taken?

The assignment operator, = (it is not an “equals sign”),  does the work. Each time the Python interpreter sees this symbol, three things happen:

the expression on the right side of the symbol is evaluated to obtain a value.
that value is placed in a memory location

the address of that location is assigned  to the variable on the left of the symbol.

Once this is accomplished, the value is bound to the variable.

so can we define a variable a specific type? like var should be an integer type throughout the program.
var = 10
And if any other type value is assigned to var it should throw an error stating type mismatch?
var = ‘sleep’.

Not in Python! Python types variables at the time of assignment. Some people call it “duck typing,” as in, “if it walks like a duck…” etc.
You can reassign any variable at any time without error.

Declaration and definition are done at the same time?

Not explicitly. In Python, we do not declare variables. The assignment statement  does everything: it tells the interpreter to evaluate the expression on the right, place its value in memory, and assign the memory address to the variable on the left.
The interpreter keeps track of the number of references to the address, and when that number is zero, the memory is released (actually, tagged for “garbage collection”). Any type of object can go in any address. Again, there is no explicit typing or variable declaration; it’s all “under the hood.”


What is the life span of a variable in python?
Is there any concept of variable that is not recently used is GC’d or something like that?


hi Patrickd ,   thank you for your answers

Yes, Python uses garbage collection.  The life span is as long as it is referenced and then once it isn’t anymore however long it takes before the garbage collection gets it - as a side note, it is possible to run the GC manually.
One interesting life span is for default values of functions, they are evaluated once and not each time the function is called, so if you used something mutable you could have some weird side effects, like so:
def test(lst=[]):
    lst.append(0)
    print list

test()
#[0]
test()
#[0, 0]


Can you please clarify the concept of duck typing & duck test?
"
76,What is the order of operations for logical operators?,"FAQ,Python FAQ","conditionals-control-flow-py,q-a",15,"
Is there an order of operations for control flow? Like does the and come before the multiplication or is there an order for and, or, not, etc. ?
","
Logical operators have operator precedence the same as other operators (relational, arithmetic, etc.). The highest precedence belongs to not, followed by and, and finally by or.
Like other operations, grouping takes precedence, so we must evaluate bracketed expressions first, if they exist.

http://www.mathcs.emory.edu/~valerie/courses/fall10/155/resources/op_precedence.html


Excuse me but how this operator precedence can be useful? What are some examples of using it actually?
Thank you in advance.

print(True or False and False)     # and has precedence
print((True or False) and False)   # parentheses change precedence

print(not False or True)        # not has precedence
print(not (False or True))      # parentheses change precedence

Output:
True
False
True
False


Thank you very much. Each time one of my questions is answered i get that ""Ooooh now i get it "" feeling!!!

Hello, would you explain to me why it prints only one statement?

If you’re referring to the order of operations performed by @patrickd314, then only output is gained after evaluating through the input expressions. So for example,
print (not False or True)

Not False is evaluated first to become “not False” aka True. After that the or operator takes two True values to output a single outcome of True.

Hope that answers your question!

Yes, i understand it now, thank you. But for me the first part of
print(True or False and False)     # and has precedence
print((True or False) and False)   # parentheses change precedence

was more confusing.
It wasn’t obvious a little that these are not just expressions but parts that require certain answers to be “True” or “False”. For example:
“True and True” is True but “True and False” is False.
So expression with “and” needs to be only “True and True” to be True. And expression with “or” only requires one element to be “True” for it to be True.
In my experience at first i just looked at them as simple comparisons similar to what you can find in math and you just need to solve them. So i thought that “False and False” had to be “True” expression )

Gotcha. Yep, I was confused on this just like you mentioned for like the longest time until I briefly went through the introduction to logic course offered free from stanford:
http://intrologic.stanford.edu/public/index.php
I did not finish the whole thing as the thing becomes very theoretical and very complex towards the end, but covered enough to understand how the boolean operators work within logic. It’s a pretty good course to check out in general!

Wow, thank you very much!

Good question. Was wondering the same thing.

Thanks, for sharing.

well personally when i first saw i compared to what I know in math. Being that “and” has precedence. In the first expression “False and False” had to be answered first which is True and what’s left to process would be “True or True” which is True. In the second expression, parentheses has precedence so “True or False” would be answered first which is “True” and then “True and False”, which will answer “False”.




 i_mayor:

In the first expression “False and False” had to be answered first which is True


Hmmm…

Yeah… but you did the same mistake as i did )
False and False = “False”, not “True”.
That’s what i was talking about, mathematical approach ))
"
77,Why is the average returned incorrect?,"FAQ,Python FAQ",q-a,24,"
Question
Why is the average returned incorrect?
Answer
Be sure to write your return statement outside of the loop, otherwise your loop can only possibly run one time before return is executed. As soon as a function executes a return statement, it exits immediately and gives whatever value that is.
Your return statement should be on the same indentation level as the for loop so that it’s inside of the function, but outside of the for loop.
","
2 posts were split to a new topic: Student is not defined

My issue was declaring my var outside of my function:
wrong:
results[]
def get_class_average(class_list):

right:
def get_class_average(class_list):
  results = []


For some reason it looks like my for loop is not including tyler.  From my review it appears that my indentation is correct.
The code runs outside of that, but the I receive the following message:
get_class_average([alice, lloyd]) returned 80.55 instead of 85.85 as expected


gist.github.com


https://gist.github.com/codecademydev/9e08238cc78af3e7da9041e7d7036845
script.py
lloyd = {
  ""name"": ""Lloyd"",
  ""homework"": [90.0, 97.0, 75.0, 92.0],
  ""quizzes"": [88.0, 40.0, 94.0],
  ""tests"": [75.0, 90.0]
}
alice = {
  ""name"": ""Alice"",
  ""homework"": [100.0, 92.0, 98.0, 100.0],
  ""quizzes"": [82.0, 83.0, 91.0],
This file has been truncated. show original







Thanks as always for the responses.  They help more than you know!

def get_class_average(class_list):
  results = []
  for student in class_list:
    results = get_average(student)
return results

Study the code above and see if an issue doesn’t surface.

I tried that but I still get an error message that says ‘get_class_average([alice, lloyd]) returned 80.55 instead of 85.85 as expected’. I tried so many things but it doesn’t seem to work they way I want it to.

So may I take it then that you have not found the error?



 mtf:

results = get_average(student)


In the above, results will only be that last student in the class_list. We need to append to that list so it grows with each student average computed.

Thanks, man. You’re the best!!

That code depends on other code which you’re not showing.
You might want to test your function yourself, and consider whether you agree with that it should return a number and then see if the result is indeed a number, or not.

Im still confused, it seems like my .append does nothing and I’ve tried it several different ways
def get_class_average(class_list):
  results = []
  for student in class_list:
    total = 0
    total = total + get_average(student)
    results.append(total)
  return total

Ive also done return instead of total like in the example above and ive tried several different things in the .append()
I am very confused as to what is going wrong
def get_class_average(class_list):
  results = []
  total = 0.0
  for student in class_list:
    total += get_average(student)
    results.append(total)
  return total

def get_class_average(class_list):
  results = []
  for student in class_list:
    results = get_average(student)
    results.append(get_average(student))
  return results

none of these work, I cant remember all the other ways Ive tried to figure this out and nothing works
I scrolled through the forums and someone is saying that this should work but it isnt, it’s coming back with get_class_average([alice]) should return a number
def get_class_average(class_list):
  results = []
  for student in class_list:
    results.append(get_average(student))
  return results


In order for that to return a number we need to take the average.
return sum(results) / len(class_list)

ugh, thank you.
is this a bad omen if I’m struggling this much this early on with seemingly simple things?

Not an omen, just an indication that your brain is working. Confusion is a good sign, not a bad one.

thank you again, I think I needed that as well

def get_class_average(class_list):
  results=[]
  for student in class_list: # this is for looping(making action for every student)
    results.append(get_average(student)) # this helps to add get_average result into results list
  return average(results)    # returns result


Really, why does the code on the right is wrong and the code on the left is right? (The rest of the code is exactly as the exercise.
It says exactly the same thing with a different nomenclature.

image.png848×175 17.6 KB

My full code:


gist.github.com


https://gist.github.com/jubadodia/cf124f2ea4bf3aa466da06687801c703.js
gistfile1.txt
lloyd = {
  ""name"": ""Lloyd"",
  ""homework"": [90.0, 97.0, 75.0, 92.0],
  ""quizzes"": [88.0, 40.0, 94.0],
  ""tests"": [75.0, 90.0]
}
alice = {
  ""name"": ""Alice"",
  ""homework"": [100.0, 92.0, 98.0, 100.0],
  ""quizzes"": [82.0, 83.0, 91.0],
This file has been truncated. show original








Those do very different things. When you read it, make sure you’re not reading what you expect it to say, because then you’ll skip over the difference just because you don’t expect it to be there.
You can also edit one to match the other, when they are more similar you may have an easier time finding the difference. You can also run it through a diff program once you think they’re identical (they’re short enough to eyeball for the difference though) (and you still have to pay attention to what edits you’re making, obviously, or you may end up eliminating the difference without noticing)

@ryan.hurley.btc
When you are adding the weights to the quizzes tests and homework it should be multiplied (*), not added.
like this:
 total = homework *.1 + quizzes * .3 + tests * .6


Is there a way to print this result so we can see what the average is? Just spent half hour trying to print the result LOL

We can insert print statements at any point in our program, then comment them out after we’ve seen what prints at that point. To see the final result, we can print the call expression…
print (get_class_average(students))
"
78,How can I break down these problems into easier parts?,"FAQ,Python FAQ",q-a,50,"
Question
How can I break down these problems into easier parts?
Answer
This is a key part of problem solving in programming, so be on the lookout for hints about how to break down the problem when going through the instructions. In the digit_sum exercise, we know a few things:

Our function takes some positive integer n as input.
If we convert that input to a string using the built-in str() function, we can iterate through it using a for each loop to get each “character” (digit) in the string.
We can do something with each digit inside of that for each loop.
We must return the result at the end, not inside of the loop.

","
2 posts were split to a new topic: Explain why my code wouldn’t be a solution to this exercise?

A post was split to a new topic: Provided digit sum solution is confusing

Hi,
Could you review my code below:
> 
> def digit_sum(x):
>     n = len(str(int(x)))
>     t = 1
>     a = 0
>     while n - t >= 0:
>         a += int(x / (10 ** (n - t)))
>         t += 1
>     return a

When I test the code with x=123, which is:
print digit_sum(123)
It gives me 136 instead of 6. Any idea??? Thank you!!

Let’s rule out what we cannot do, then work toward what we can do…
Can we iterate over an integer?
>>> for x in 123456789:
	print (x)

	
Traceback (most recent call last):
  File ""<pyshell#30>"", line 1, in <module>
    for x in 123456789:
TypeError: 'int' object is not iterable
>>> 

That rules out being able to simply add the digits in a loop. But does it, really?
>>> for x in str(123456789):
	print (x)

	
1
2
3
4
5
6
7
8
9
>>> 

Now we have a basis for iteration, and we know how to keep a running sum… a = a + x. However since x is a string, we will hit a snag…
>>> total = 0
>>> for x in str(123456789):
    total += x

    
Traceback (most recent call last):
  File ""<pyshell#36>"", line 2, in <module>
    total += x
TypeError: unsupported operand type(s) for +=: 'int' and 'str'
>>> 

No problem, since we know about the str() constructor, we must know about the int() constructor, too.
>>> total = 0
>>> for x in str(123456789):
    total += int(x)

    
>>> print (total)
45
>>> 

So we used three operators, =, in, and +=; one loop, for, and two built-in’s, str(), and int(). This is the simplest approach to this problem using basic arithmetic.
The less naive approach uses maths, but very few learners will arive at this one, since some concepts are still pretty new, if not completely foreign.
//           =>  floor division
%            =>  modulo

Modulo will give us the last digit if our divisor (modulus) is 10…
123 % 10     =>  3

Floor division will reduce it by one digit if we divide by 10…
123 // 10    =>  12

So now we set up a loop to carry out the cycles until we reduce the number down to zero…
>>> total = 0
>>> x = 123456789
>>> while x > 0:
    total += x % 10
    x //= 10

    
>>> print (total)
45
>>> 

Now we get to your method, that of progressively decreasing by powers of 10 and dividing. Something to consider,
n = len(str(int(x)))

x is already stipulated to be an integer so the int() function is not needed. We can however make use of the length, as you have deduced.
>>> total = 0
>>> x = 123456789
>>> for n in range(len(str(x)) - 1, -1, -1):
    y = x // 10 ** n
    total += y
    x -= y * 10 ** n

    
>>> print (total)
45
>>> 

We’ve seen how the solutions have grown in complexity and one must ask, which of these is the simplest?

def digit_sum(n):
  // create two variables: first to store the numbers as string and the other to store the overall total
  to_string = str(n)
  total = 0
  
  // loop through the string, convert it to an int and store it in the total
  for s in to_string:
    total += int(s)

  // return the total  
  return total 

print digit_sum(1234)


Any idea what the problem is here? I just tried the mathsy method:
def digit_sum(n):
  n = str(n)
  total = 0
  for digit in n:
    q = int(n) % 10
    total += q
    q //= 10
  else:
    return total
print digit_sum(6061)


I just tried doing the 3 backdashes before and after this post, and it still won’t convert to code format…

if you try the mathsy method, why would you convert to string?

To be able to iterate through all of the items in the number, right?




 jjhiggins97:

To be able to iterate through all of the items in the number, right?


No, the mathsy approach allows us to work with the integer.
lets say we need the digit sum of 123456, we can get the last digit by using the modulo operator. then to remove the last digit, we can divide by 10. one hundred and twenty-three thousand, four hundred and fifty-six (123, 456) divided by ten and rounded down is twelve thousand, three hundred forty-five (12, 345). We have successfully removed the the last digit.
now we can extract the 5 (new last digit) using the modulo operator and so forth.
the whole point of this approach is to avoid using strings. My question was intended as such 

I have just started learning Python and was not aware of floor division hence used my own approach to get the sum of digits
def digit_sum(n):
total = 0
q = n/10
r = n%10
print “Input Number is : %s” %n
while r > 0:
print “remainder : %s” %r
print “Number is : %s” %q
total += r
r = q % 10
q = q/10
return total
print “Sum of Digits is: %s” %digit_sum(123456)




 dataninja77165:

q = n/10


In Python 2 the above is integer division, so floor division is not required since the quotint is an int. In Python 3 we either have to use floor division or invoke the int() constructor on the quotient so we don’t get a float.
15 / 10   =>  1.5
1.5 % 10  =>  1.5

def digit_sum(n):
a = str(n)
total = 0
if n > 0:
for b in a:
total += int(b)
return total
print total
digit_sum()
How to call the function here? and is this alright?




 orientus:

How to call the function here? and is this alright?


close, the function has a parameter (n), so you need to provide an argument at function call

def digit_sum(n):
val = str(n)
count = len(val)
total = 0
while count > 0:
total += int(val[count-1])
count -= 1
return total
print digit_sum(434434)

any potential problems here? works for me:
def digit_sum(n):
  text = str(n)
  summe = 0
  for i in text:
    summe += int(i)
  return summe



def digit_sum(n):
for number in str(n):
int(number) = int(number) + int(number)
return number
print digit_sum(1234)

Getting "" File “python”, line 3
SyntaxError: can’t assign to function call""
What does it mean?

here:
int(number) =

you try to assign to function call, but you can not assign to function call (int() is a function call)

Thanks. Then how am I supposed to use int to do the addition?
"
79,When do we need `from` and `import` vs just `import`?,"FAQ,Python FAQ","general,q-a",7,"
Modules Exercises 1
import sentence is
from datetime import datetime

Okay, I see.
But Exercises 2
import random

Why is there no from word?
What is the differences between them?
","
The datetime module gives you access to several classes, among them date, time and datetime.
If you want to make use of the datetime class of the datetime module (yes, it’s confusing: same name for two different things), you have two choices:
(1) Import the module and prefix the class with datetime using dot notation:
import datetime
d = datetime.datetime(2000, 12, 31)  # This is a datetime object; note the dot notation
print(d)
# Prints 
2000-12-31 00:00:00

or…
(2) Use from to import the class and then just use the class name, omitting the dot notation:
from datetime import datetime
e = datetime(2000, 12, 31)   # no dot notation needed to create a datetime object
print(e)
# Prints 
2000-12-31 00:00:00

The same relation holds with modules and functions which they may contain:
import random
p = random.randint(0, 10)   # this is a function accessed via dot notation
print(p)   

# or

from random import randint
q = randint(0, 10)   # no dot notation needed for this function
print(q)    

# Prints
6
2

(Edited to correct a mistake in the final example.)

I see. Thank you for your clear explanation.
I really appreciate you.

a= randint(0,100)
is randint a class or a method inside a class?

Is it possible to import more than just one class from a module?

Yes we can import multiple objects or classes at once
from math import log,pi,ceil,floor

print(pi,log(32,2),ceil(3.2),floor(3.2))

Output:
3.141592653589793 5 4 3

It appears to be a method of the “random” class. See https://docs.python.org/3/library/random.html for reference.
"
80,Does exponentiation in Python work with negative exponents?,"FAQ,Python FAQ",,6,"
Question
In this exercise, the exponent operator is used for positive exponents. Does exponentiation work with negative exponents as well?
Answer
Yes, in Python, exponentiation does work with negative exponent values, the same way it would apply in mathematics. When performing exponentiation with a negative exponent, it is the same as getting the inverse of exponentiation done with the exponent as a positive value.
Example code
base = 2
exp = -1

# Both of these results will be 0.5
result1 = base ** exp
result2 = 1 / base ** exp

edited April 28, 2020
# result2 = 1 / (base ** -(exp))  =>  incorrect

","
8 posts were split to a new topic: 2nd question in this exponent excercise

Should not result 2 =  1 / (base ** (exp)) without the negative in front of the exp since it is already being divided?

Good catch. The example doesn’t look like it was tested. (Yours truly is guilty of this, sometimes, too.)
>>> 2 ** -1
0.5
>>> 1 / 2 ** -1
2.0
>>> 1 / 2 ** 1
0.5
>>> 

Going to edit this topic to correct the error.

I think that you were right the first time. Since exp is assigned -1, you would have to negate that when the number is in the denominator.
>>> 2 ** -1
0.5
>>> 1/2**-1
2.0
>>> 1/2**1
0.5
>>> base=2
>>> exp=-1
>>> base**exp
0.5
>>> 1/base**exp
2.0
>>> 1/base**-(exp)
0.5


I agree. The first time was ok.
I also tried & checked the following syntax
result2 = 1 / base ** (-exp)

All of them prints “0.5”
"
81,"When writing lambda functions with if/else, do we need to include backslashes?","FAQ,Python FAQ",,5,"
Question
In the context of this exercise, the example lambda functions, which use an if/else statement, were written using a backslash (\). Do we always need to include backslashes when writing lambda functions using if/else?
Answer
No, you do not always need to include backslashes \ when you write lambda functions with if/else statements.
In Python, the backslash character \, also called the “line continuation character”, is used to join two lines of code. When you have a backslash at the end of a code line, Python will continue reading the next line of code as though the lines are part of a single line of code.
We use backslashes for the main purpose of making the code easier to read, by decreasing the length of the code lines. In particular, lambda functions can become quite long and hard to read because they are a single line, which is why we usually apply backslashes to divide them into multiple lines.
Example
# A statement as a single line
print 1 + 3

# The same statement split into multiple lines
print \
1 + \
3

One important thing to keep in mind is that there cannot be any characters or spaces after a backslash. A backslash must be the very last character of a code line. Otherwise, an error will be thrown.
","
I’m slightly confused by the if and else used in this exercise. In an earlier exercise these were used but the true part of the if was written before the if but the example didn’t follow this layout, see below :
def myfunction(x):
    if x > 40:
        return 40 + (x - 40) * 1.50
    else:
        return x

my expectation was that it should have been written like this in order for it to be successfully executed :
def myfunction(x):
        return 40 + (x - 40) * 1.50
    if x > 40:

    else:
        return x

how does python identify the true part within this code, the false part I understand is clearly stated when entering else ?

Hello, @script0351949381. Not sure I understand your question. The first example is a ‘textbook’ if ... else block of code:



 script0351949381:

def myfunction(x):
    if x > 40:
        return 40 + (x - 40) * 1.50 #executed if x > 40 evaluates to True
    else:
        return x #executed if x > 40 evaluates to False



The second example will throw an error because there is no indented code  following the if x > 40:.
We could modify the code to run without error, but it would not provide the same result as the first example.



 script0351949381:

def myfunction(x):
    return 40 + (x - 40) * 1.50 #nothing beyond this line would be executed
    #the return above returns the value to the caller, and effectively terminates the function
    if x > 40:
        pass #this will allow the code to run
    else:
        return x



You may have been referring to this type of expression:
def myfunction(x):
    return 40 + (x - 40) * 1.50 if x > 40 else x
    #the expression preceding x is returned if x > 40 otherwise x is returned

The above is the Python version of a ternary operator or conditional expression. The placement of the expressions is how Python knows what is what.




 midlindner:

ove is the Python version of a ternary o


Thank you. I think what is confusing me is in your last example the true part of the if is at the start of the function (return 40 + (x - 40) * 1.50 ) however within my first example the true part of the function is post the if x > 40: i guess this means that the placement of the true part isn’t integral? apologies if I haven’t explained myself well.

The ternary operator is like shorthand for the standard if ... else. Using the ternary operator limits us somewhat. We can’t execute multiple lines of code if True or if False. We just assign a value either to a variable or as an argument to another function or method like print() or return. The placement of the various parts depends on which method you are using:
#simple variable assignment:

#ternary
my_variable = value_if_true if boolean_expression else value_if_false

#if ... else
if boolean_expression:
    my_variable = value_if_true
else:
    my_variable = value_if_false

"
82,Can dir() be called on a class?,"FAQ,Python FAQ",,5,"
Question
In this exercise, it states that dir() can be called on an object to investigate its attributes. Can dir() also be called on a class?
Answer
Yes, you can use dir() to examine a class in addition to calling it on an object of a class. In the following code example, you can see that the dir() call on the object of class Examine shows the instance variable created in the object while the call for the class does not.
class Examine:

    class_var = ""This is a class variable""

    def __init__(self):
        self.inst_var = ""This is an instance variable""


myobj = Examine()

print(dir(Examine))
# OUTPUTS: ['__doc__', '__init__', '__module__', 'class_var']

print(dir(myobj))
# OUTPUTS: ['__doc__', '__init__', '__module__', 'class_var', 'inst_var']

","
Why when print(dir(Examine)),'inst_var' is not listed in there???

Hi @vickytian4068895214,
When executed, the __init__ method in the example creates a variable, inst_var, that is only part of the instance that is being created. It is not part of the Examine class.
For the __init__ method to create an object that is part of the Examine class, it would need to do something like this:
    def __init__(self):
        self.inst_var = ""This is an instance variable""
        # creating a new class variable
        Examine.new_class_variable = ""new_class_variable""

Then after the first instance of the class is created, the Examine class would have a class variable, new_class_variable. Be careful, however, when writing code wherein an instance of a class modifies the class itself.

It will show instance variable.

Traceback (most recent call last):
  File ""script.py"", line 13, in <module>
    print(c.read())  # 0
AttributeError: 'NoneType' object has no attribute 'read'

It wont print type© Only print this error
"
83,Can the __init__() method return a value?,"FAQ,Python FAQ",q-a,1,"
Question
Is it possible to return a value from the __init__() method in a class?
Answer
The __init__() method should either have no return statement at all (the most common and preferred usage) or it may have a return statement that returns the value None. If the method attempts to return a value other than None, Python will report the error “TypeError: __init__() should return None”.  If the method needs to report an error condition, then an exception should be raised.
",
84,What is the difference between `=` and `==` in Python?,"FAQ,Python FAQ",,2,"
Question
What is the difference between = and == in Python? Is there any relation?
Answer
In Python, the operators = and == serve very different purposes, and don’t have much relation at all other than similar syntax.
The = operator is used for assignment, such as when assigning a value to a variable.
The == operator is the relational operator for checking equality of two values. If the values are the same, it will return True, and will return False otherwise.
Example
# Assignment
number = 3

# Comparison
number == 30 # False

","
Okay, that actually clears things up and, until now, didn’t realize I had it a bit wrong. Thanks!
"
85,Do the values in plt.axis() always have to be in increasing order?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, do the values in plt.axis() always have to be in increasing order, as in plt.axis([min_x, max_x, min_y, max_y])?
Answer
No, we can actually set the values for the axis to be in decreasing order as well.
If we take the example plot in the exercise, say that instead of setting the axis to this:
plt.axis([0, 3, 2, 5])
we instead set it to these values, with both the x and y min and max values reversed:
plt.axis([3, 0, 5, 2])
What this will do is not throw an error, but instead the graph will be essentially drawn inverted, both on the x axis and the y axis. The x axis will be for x values from 3 to 0, and the y axis will be for values 5 to 2, both in decreasing order.
As a result, you have the option, if ever needed, to draw the graph with axes in reverse or decreasing order, which is a nice feature to have.
",
86,"In a CSV file, does spacing matter before and after commas?","FAQ,Python FAQ",q-a,1,"
Question
In a CSV file, does spacing matter, such as before or after commas?
Answer
Yes, in most cases for CSV files, Pandas will separate the data by the commas, and will keep any spaces that were included before or after a comma.
Because of this, it is important that when creating a CSV file, each value should only be separated by a comma without any unwanted whitespace before or after the commas, since they will not be removed automatically.
Example CSV row
name, date, location

For the above example, when reading the data from this CSV, it will include the leading spaces for ’ date’ and ’ location’.
",
87,"Do I need to make students a list of their string names, or the variable names?","FAQ,Python FAQ",q-a,1,"
Question
Do I need to make students a list of their string names, or the variable names?
#Answer
The students list is going to be used to access the entire dictionaries, so we should fill it with the variable names used to name each student dictionary, lloyd, alice, and tyler, without quotes around them.
Putting quotes around their names makes them string values, not variable names that we can reference later.
",
88,What if I want a backslash in my string?,"FAQ,Python FAQ","q-a,strings",4,"
When I did this exercise I wondered how I would print a backslash if backslash was the escape character.  As it turns out, you just put another backslash next to it!


gist.github.com


https://gist.github.com/codecademydev/e9473f53e7035efe9681a00f030e81e1
script.py
print(""Testing if I can print a \\"")








yields:
Testing if I can print a \
","
Great exploration to resolve your own question. This is being saved for anyone else who wonders the same thing!

Another thing you can do is put r (for raw) in front of the string like so:
print (r""Testing if I can print a \\"")

That will print Testing if I can print a \\.
There is one little thing with r though, backslash is still an escape for quotes, so you can’t end your string with a single backslash like so:
print(r""Testing if I can print \"") // End if line error

You would need to put a space, full stop or something else to sperate the backslash and quote. You could double backslash but it will then print a double backslash though.

Pretty cool! Thanks for sharing.
"
89,When is each type of plot used?,"FAQ,Python FAQ",q-a,2,"
Question
In the context of this lesson, when is each type of plot used?
Answer
Bar Chart
A bar chart is used to show the frequency or count of data that fall under different categories. For example, showing the number of students in a university per major.
Side-by-side Bar Chart
These are used when there are multiple sets of data, sharing the same axis values. Taking the example for the bar chart above, we might have multiple universities, which we want to show the number of students per major, by university side-by-side.
Stacked Bars
Stacked bars are used when we want to keep track of the total between multiple sets of data. For example, if we needed to graph the total income for 3 items of a store which are “monitor”, “mouse”, and “keyboard”. The x values represent days of the week, and the bars represent income, with each “layer” being the income for an item. There would be 3 layers, and the total bar height for each day would be the total income of all items.
Histogram
A histogram is used to show how many values in a dataset fall between different ranges of numbers, known as bins. For example, showing the number of people by age, where each bin is a range of ages (10-20, 20-30, …).
Pie Chart
Pie charts are used when displaying the frequencies or fractions of data over the whole. For example, showing how much of the total money spent in a month is spent towards groceries, entertainment, gas, and loans. Each wedge of the chart shows the fraction of the total amount spent toward a certain expense.
","
Thankyou very much @jephos249 for your answer.
"
90,When do we need `from` and `import` vs just `import`?,"FAQ,Python FAQ","general,q-a",7,"
Modules Exercises 1
import sentence is
from datetime import datetime

Okay, I see.
But Exercises 2
import random

Why is there no from word?
What is the differences between them?
","
The datetime module gives you access to several classes, among them date, time and datetime.
If you want to make use of the datetime class of the datetime module (yes, it’s confusing: same name for two different things), you have two choices:
(1) Import the module and prefix the class with datetime using dot notation:
import datetime
d = datetime.datetime(2000, 12, 31)  # This is a datetime object; note the dot notation
print(d)
# Prints 
2000-12-31 00:00:00

or…
(2) Use from to import the class and then just use the class name, omitting the dot notation:
from datetime import datetime
e = datetime(2000, 12, 31)   # no dot notation needed to create a datetime object
print(e)
# Prints 
2000-12-31 00:00:00

The same relation holds with modules and functions which they may contain:
import random
p = random.randint(0, 10)   # this is a function accessed via dot notation
print(p)   

# or

from random import randint
q = randint(0, 10)   # no dot notation needed for this function
print(q)    

# Prints
6
2

(Edited to correct a mistake in the final example.)

I see. Thank you for your clear explanation.
I really appreciate you.

a= randint(0,100)
is randint a class or a method inside a class?

Is it possible to import more than just one class from a module?

Yes we can import multiple objects or classes at once
from math import log,pi,ceil,floor

print(pi,log(32,2),ceil(3.2),floor(3.2))

Output:
3.141592653589793 5 4 3

It appears to be a method of the “random” class. See https://docs.python.org/3/library/random.html for reference.
"
91,Why doesn’t Python automatically convert the number to a string?,"FAQ,Python FAQ",q-a,22,"
Question
Why doesn’t Python automatically convert the number to a string?
Answer
The answer becomes more clear as you learn to debug larger projects, and was carefully thought out when the language was being designed. In Python, and many other languages, the belief is that explicit is better than implicit. This means you should write your code with explicit functionality because by doing so, errors produced will help you understand where you went wrong.
For example, if we don’t convert a number to a string before concatenating it with a string, it gives a specific error that we are accustomed to looking for. However, if Python did this conversion automatically and, somehow, there was a bug in our program, it wouldn’t throw an error message because it converted as the language intended behind the scenes, but produced some unexpected output.
","
hi
is using quotations the same as using the str() , or are there any differences?

Using quotes is how we define a string. The str() function is for casting a non-string to a string.
str(42)            # '42'

str(True)          # 'True'

str([1,2,3,4,5])   # '[1, 2, 3, 4, 5]'

str({'one': 1})    # ""{'one': 1}""

Eg.
def digit_sum(n):
    total = 0
    for x in str(n)
        total += int(x)
    return total

When n is 12345, str(n) will be ‘12345’, an iterable.

This doesn’t makes exact sense considering Python supports implicit Data type conversion!

In the context of for Python cannot implicitly create an iterable from an integer. Integers cannot be split.

Hi mtf,
My comment was for this particular answer:
“The answer becomes more clear as you learn to debug larger projects, and was carefully thought out when the language was being designed. In Python, and many other languages, the belief is that explicit is better than implicit. This means you should write your code with explicit functionality because by doing so, errors produced will help you understand where you went wrong.”

If errors occur in an explicit, declarative environment, they occur for a specific reason. Loosely typed environments need tight reins, aka, nearly explicit. They must be able to safely morph one type to another in a meaningful way. We are still in charge of providing that meaning.
There can be no question as to the value of explicitness. What is, is. Implicitness is rife with gray area that needs to be thought over.
JavaScript arrow functions, and Ruby methods share one thing in common… Implicit return.
const f = x => x ** 2;

 >  const f = x => x ** 2
>- undefined
 > f(2)
<- 4
 > f(3)
<- 9
 > f(4)
<- 16


I guess I understand what you are trying to say. However, your answer will make sense only to a seasoned programer who is trying to pick up Python as a new laguage; like me.
For a newbie, it doesnt makes much sense. Also, without going in with a bit detailed explanation it sounds wrong to say that Python expects the Programmer to do explicit data casting for functions & operators which is not really the case since you can add a float & integer to get a float in python unlike some other languages.

What ever I say is refutable. That is stipulated. Discussion should emerge and then form a web. I’ve  not got stuck to that yet, but hey, stuff happens.

I like explicit having worked with implicit languages like 4GLs but it is still confusing to a Python newbie e.g. var = 3 then 3 is a string but string + 2 + string gives an error unless I put in str(2) …which implies that the interpreter assumed the 2 was an integer!




 oldruth:

I like explicit having worked with implicit languages like 4GLs but it is still confusing to a Python newbie e.g. var = 3 then 3 is a string but string + 2 + string gives an error unless I put in str(2) …which implies that the interpreter assumed the 2 was an integer!


if i do:
var = 3
print type(var)

we can clearly see it gives integer as response. If you do:
var = ""3""
print type(var)

then you have a string


number = 5
print “the number is :  %s” % (number)
print ""the number is : "" + number

in the above snippet,
the line 2 gets executed successfully, but the line 3 throws an error. So this means Python implicitly converts the number to string in the second line right ?




 blogplayer55476:

So this means Python implicitly converts the number to string in the second line right ?


If you mean,
>>> n = 5
>>> print (""Number = %s"" % n)
Number = 5
>>> n = 5.2
>>> print (""Number = %s"" % n)
Number = 5.2
>>> 

then, yes, it must be cast to string. Since there is no concatenation (only interpolation) we don’t have to explicity convert it as we would in the latter case. Much as the .format() method does…
>>> print (""Number = {}"".format(n))
Number = 5.2
>>> 

By rights, though, we should still tell the template what type to expect, %d, %i or %f. It tells the reader, as well what types are referenced by the variables.

Why does str() not change variables into a string? For example when I put:
variable = ""some text""

print str(variable)


Why is the output on the console “some text” instead of “variable”?

variable is only a label, not a value. It references a string object, so when we print the variable, the string it points to is what prints.

lets say we want a integer from the user:
user_input = raw_input(""enter a integer: "")

but raw_input stores the result as string:
print type(user_input)

so we need to cast to integer:
user_input = int(user_input)

if this casting would cast the label/variable, we wouldn’t be able to convert the user input to integer, that wouldn’t be very inconvenient.

I can also use a comma though, is there any reason for why I should use str() or int() etc? instead of a comma?
This
print ""The value of pi is around "" + str(3.14)

And this
print ""The value of pi is around"", 3.14

Look exactly the same in the console.

converting/casting data types is used for much more then just this simple print statement.

When I print “The value of pi is around 3.14”, the console prints the exact same thing as when I print ""The value of pi is around "" + str(3.14).
What’s the purpose of converting 3.14 to a string in this case?

its about the concept, the value might come from user input or a database, then you need to convert to string, you might not always have the luxury to just put the value in the string.
"
92,Can variables be reassigned to another data type?,"FAQ,Python FAQ",,11,"
Question
After a variable is assigned to an initial value, can the variable later be reassigned to another value that is of a different data type than its initial value?
Answer
Yes, variables in Python can be reassigned to a new value that is a different data type from its current value. In fact, variables can be reassigned to any valid value in Python, regardless of its current value.
Variables are essentially like an empty box, that can contain something like a string, number, or other value. When you assign it a value, the box will contain that value, and when you reassign it, it will empty out the old value, and the new value will be placed inside of it.
Example code
# This variable is initially assigned as a string.
var = ""Hi there""

# It can be reassigned to any other value, regardless of the type.
var = 35
var = False

","
Do we place a divider or How do we know that the value of the second variable will be taken?

The assignment operator, = (it is not an “equals sign”),  does the work. Each time the Python interpreter sees this symbol, three things happen:

the expression on the right side of the symbol is evaluated to obtain a value.
that value is placed in a memory location

the address of that location is assigned  to the variable on the left of the symbol.

Once this is accomplished, the value is bound to the variable.

so can we define a variable a specific type? like var should be an integer type throughout the program.
var = 10
And if any other type value is assigned to var it should throw an error stating type mismatch?
var = ‘sleep’.

Not in Python! Python types variables at the time of assignment. Some people call it “duck typing,” as in, “if it walks like a duck…” etc.
You can reassign any variable at any time without error.

Declaration and definition are done at the same time?

Not explicitly. In Python, we do not declare variables. The assignment statement  does everything: it tells the interpreter to evaluate the expression on the right, place its value in memory, and assign the memory address to the variable on the left.
The interpreter keeps track of the number of references to the address, and when that number is zero, the memory is released (actually, tagged for “garbage collection”). Any type of object can go in any address. Again, there is no explicit typing or variable declaration; it’s all “under the hood.”


What is the life span of a variable in python?
Is there any concept of variable that is not recently used is GC’d or something like that?


hi Patrickd ,   thank you for your answers

Yes, Python uses garbage collection.  The life span is as long as it is referenced and then once it isn’t anymore however long it takes before the garbage collection gets it - as a side note, it is possible to run the GC manually.
One interesting life span is for default values of functions, they are evaluated once and not each time the function is called, so if you used something mutable you could have some weird side effects, like so:
def test(lst=[]):
    lst.append(0)
    print list

test()
#[0]
test()
#[0, 0]


Can you please clarify the concept of duck typing & duck test?
"
93,What is the order of operations for logical operators?,"FAQ,Python FAQ","conditionals-control-flow-py,q-a",15,"
Is there an order of operations for control flow? Like does the and come before the multiplication or is there an order for and, or, not, etc. ?
","
Logical operators have operator precedence the same as other operators (relational, arithmetic, etc.). The highest precedence belongs to not, followed by and, and finally by or.
Like other operations, grouping takes precedence, so we must evaluate bracketed expressions first, if they exist.

http://www.mathcs.emory.edu/~valerie/courses/fall10/155/resources/op_precedence.html


Excuse me but how this operator precedence can be useful? What are some examples of using it actually?
Thank you in advance.

print(True or False and False)     # and has precedence
print((True or False) and False)   # parentheses change precedence

print(not False or True)        # not has precedence
print(not (False or True))      # parentheses change precedence

Output:
True
False
True
False


Thank you very much. Each time one of my questions is answered i get that ""Ooooh now i get it "" feeling!!!

Hello, would you explain to me why it prints only one statement?

If you’re referring to the order of operations performed by @patrickd314, then only output is gained after evaluating through the input expressions. So for example,
print (not False or True)

Not False is evaluated first to become “not False” aka True. After that the or operator takes two True values to output a single outcome of True.

Hope that answers your question!

Yes, i understand it now, thank you. But for me the first part of
print(True or False and False)     # and has precedence
print((True or False) and False)   # parentheses change precedence

was more confusing.
It wasn’t obvious a little that these are not just expressions but parts that require certain answers to be “True” or “False”. For example:
“True and True” is True but “True and False” is False.
So expression with “and” needs to be only “True and True” to be True. And expression with “or” only requires one element to be “True” for it to be True.
In my experience at first i just looked at them as simple comparisons similar to what you can find in math and you just need to solve them. So i thought that “False and False” had to be “True” expression )

Gotcha. Yep, I was confused on this just like you mentioned for like the longest time until I briefly went through the introduction to logic course offered free from stanford:
http://intrologic.stanford.edu/public/index.php
I did not finish the whole thing as the thing becomes very theoretical and very complex towards the end, but covered enough to understand how the boolean operators work within logic. It’s a pretty good course to check out in general!

Wow, thank you very much!

Good question. Was wondering the same thing.

Thanks, for sharing.

well personally when i first saw i compared to what I know in math. Being that “and” has precedence. In the first expression “False and False” had to be answered first which is True and what’s left to process would be “True or True” which is True. In the second expression, parentheses has precedence so “True or False” would be answered first which is “True” and then “True and False”, which will answer “False”.




 i_mayor:

In the first expression “False and False” had to be answered first which is True


Hmmm…

Yeah… but you did the same mistake as i did )
False and False = “False”, not “True”.
That’s what i was talking about, mathematical approach ))
"
94,"When writing lambda functions with if/else, do we need to include backslashes?","FAQ,Python FAQ",,5,"
Question
In the context of this exercise, the example lambda functions, which use an if/else statement, were written using a backslash (\). Do we always need to include backslashes when writing lambda functions using if/else?
Answer
No, you do not always need to include backslashes \ when you write lambda functions with if/else statements.
In Python, the backslash character \, also called the “line continuation character”, is used to join two lines of code. When you have a backslash at the end of a code line, Python will continue reading the next line of code as though the lines are part of a single line of code.
We use backslashes for the main purpose of making the code easier to read, by decreasing the length of the code lines. In particular, lambda functions can become quite long and hard to read because they are a single line, which is why we usually apply backslashes to divide them into multiple lines.
Example
# A statement as a single line
print 1 + 3

# The same statement split into multiple lines
print \
1 + \
3

One important thing to keep in mind is that there cannot be any characters or spaces after a backslash. A backslash must be the very last character of a code line. Otherwise, an error will be thrown.
","
I’m slightly confused by the if and else used in this exercise. In an earlier exercise these were used but the true part of the if was written before the if but the example didn’t follow this layout, see below :
def myfunction(x):
    if x > 40:
        return 40 + (x - 40) * 1.50
    else:
        return x

my expectation was that it should have been written like this in order for it to be successfully executed :
def myfunction(x):
        return 40 + (x - 40) * 1.50
    if x > 40:

    else:
        return x

how does python identify the true part within this code, the false part I understand is clearly stated when entering else ?

Hello, @script0351949381. Not sure I understand your question. The first example is a ‘textbook’ if ... else block of code:



 script0351949381:

def myfunction(x):
    if x > 40:
        return 40 + (x - 40) * 1.50 #executed if x > 40 evaluates to True
    else:
        return x #executed if x > 40 evaluates to False



The second example will throw an error because there is no indented code  following the if x > 40:.
We could modify the code to run without error, but it would not provide the same result as the first example.



 script0351949381:

def myfunction(x):
    return 40 + (x - 40) * 1.50 #nothing beyond this line would be executed
    #the return above returns the value to the caller, and effectively terminates the function
    if x > 40:
        pass #this will allow the code to run
    else:
        return x



You may have been referring to this type of expression:
def myfunction(x):
    return 40 + (x - 40) * 1.50 if x > 40 else x
    #the expression preceding x is returned if x > 40 otherwise x is returned

The above is the Python version of a ternary operator or conditional expression. The placement of the expressions is how Python knows what is what.




 midlindner:

ove is the Python version of a ternary o


Thank you. I think what is confusing me is in your last example the true part of the if is at the start of the function (return 40 + (x - 40) * 1.50 ) however within my first example the true part of the function is post the if x > 40: i guess this means that the placement of the true part isn’t integral? apologies if I haven’t explained myself well.

The ternary operator is like shorthand for the standard if ... else. Using the ternary operator limits us somewhat. We can’t execute multiple lines of code if True or if False. We just assign a value either to a variable or as an argument to another function or method like print() or return. The placement of the various parts depends on which method you are using:
#simple variable assignment:

#ternary
my_variable = value_if_true if boolean_expression else value_if_false

#if ... else
if boolean_expression:
    my_variable = value_if_true
else:
    my_variable = value_if_false

"
95,How can I break down these problems into easier parts?,"FAQ,Python FAQ",q-a,50,"
Question
How can I break down these problems into easier parts?
Answer
This is a key part of problem solving in programming, so be on the lookout for hints about how to break down the problem when going through the instructions. In the digit_sum exercise, we know a few things:

Our function takes some positive integer n as input.
If we convert that input to a string using the built-in str() function, we can iterate through it using a for each loop to get each “character” (digit) in the string.
We can do something with each digit inside of that for each loop.
We must return the result at the end, not inside of the loop.

","
2 posts were split to a new topic: Explain why my code wouldn’t be a solution to this exercise?

A post was split to a new topic: Provided digit sum solution is confusing

Hi,
Could you review my code below:
> 
> def digit_sum(x):
>     n = len(str(int(x)))
>     t = 1
>     a = 0
>     while n - t >= 0:
>         a += int(x / (10 ** (n - t)))
>         t += 1
>     return a

When I test the code with x=123, which is:
print digit_sum(123)
It gives me 136 instead of 6. Any idea??? Thank you!!

Let’s rule out what we cannot do, then work toward what we can do…
Can we iterate over an integer?
>>> for x in 123456789:
	print (x)

	
Traceback (most recent call last):
  File ""<pyshell#30>"", line 1, in <module>
    for x in 123456789:
TypeError: 'int' object is not iterable
>>> 

That rules out being able to simply add the digits in a loop. But does it, really?
>>> for x in str(123456789):
	print (x)

	
1
2
3
4
5
6
7
8
9
>>> 

Now we have a basis for iteration, and we know how to keep a running sum… a = a + x. However since x is a string, we will hit a snag…
>>> total = 0
>>> for x in str(123456789):
    total += x

    
Traceback (most recent call last):
  File ""<pyshell#36>"", line 2, in <module>
    total += x
TypeError: unsupported operand type(s) for +=: 'int' and 'str'
>>> 

No problem, since we know about the str() constructor, we must know about the int() constructor, too.
>>> total = 0
>>> for x in str(123456789):
    total += int(x)

    
>>> print (total)
45
>>> 

So we used three operators, =, in, and +=; one loop, for, and two built-in’s, str(), and int(). This is the simplest approach to this problem using basic arithmetic.
The less naive approach uses maths, but very few learners will arive at this one, since some concepts are still pretty new, if not completely foreign.
//           =>  floor division
%            =>  modulo

Modulo will give us the last digit if our divisor (modulus) is 10…
123 % 10     =>  3

Floor division will reduce it by one digit if we divide by 10…
123 // 10    =>  12

So now we set up a loop to carry out the cycles until we reduce the number down to zero…
>>> total = 0
>>> x = 123456789
>>> while x > 0:
    total += x % 10
    x //= 10

    
>>> print (total)
45
>>> 

Now we get to your method, that of progressively decreasing by powers of 10 and dividing. Something to consider,
n = len(str(int(x)))

x is already stipulated to be an integer so the int() function is not needed. We can however make use of the length, as you have deduced.
>>> total = 0
>>> x = 123456789
>>> for n in range(len(str(x)) - 1, -1, -1):
    y = x // 10 ** n
    total += y
    x -= y * 10 ** n

    
>>> print (total)
45
>>> 

We’ve seen how the solutions have grown in complexity and one must ask, which of these is the simplest?

def digit_sum(n):
  // create two variables: first to store the numbers as string and the other to store the overall total
  to_string = str(n)
  total = 0
  
  // loop through the string, convert it to an int and store it in the total
  for s in to_string:
    total += int(s)

  // return the total  
  return total 

print digit_sum(1234)


Any idea what the problem is here? I just tried the mathsy method:
def digit_sum(n):
  n = str(n)
  total = 0
  for digit in n:
    q = int(n) % 10
    total += q
    q //= 10
  else:
    return total
print digit_sum(6061)


I just tried doing the 3 backdashes before and after this post, and it still won’t convert to code format…

if you try the mathsy method, why would you convert to string?

To be able to iterate through all of the items in the number, right?




 jjhiggins97:

To be able to iterate through all of the items in the number, right?


No, the mathsy approach allows us to work with the integer.
lets say we need the digit sum of 123456, we can get the last digit by using the modulo operator. then to remove the last digit, we can divide by 10. one hundred and twenty-three thousand, four hundred and fifty-six (123, 456) divided by ten and rounded down is twelve thousand, three hundred forty-five (12, 345). We have successfully removed the the last digit.
now we can extract the 5 (new last digit) using the modulo operator and so forth.
the whole point of this approach is to avoid using strings. My question was intended as such 

I have just started learning Python and was not aware of floor division hence used my own approach to get the sum of digits
def digit_sum(n):
total = 0
q = n/10
r = n%10
print “Input Number is : %s” %n
while r > 0:
print “remainder : %s” %r
print “Number is : %s” %q
total += r
r = q % 10
q = q/10
return total
print “Sum of Digits is: %s” %digit_sum(123456)




 dataninja77165:

q = n/10


In Python 2 the above is integer division, so floor division is not required since the quotint is an int. In Python 3 we either have to use floor division or invoke the int() constructor on the quotient so we don’t get a float.
15 / 10   =>  1.5
1.5 % 10  =>  1.5

def digit_sum(n):
a = str(n)
total = 0
if n > 0:
for b in a:
total += int(b)
return total
print total
digit_sum()
How to call the function here? and is this alright?




 orientus:

How to call the function here? and is this alright?


close, the function has a parameter (n), so you need to provide an argument at function call

def digit_sum(n):
val = str(n)
count = len(val)
total = 0
while count > 0:
total += int(val[count-1])
count -= 1
return total
print digit_sum(434434)

any potential problems here? works for me:
def digit_sum(n):
  text = str(n)
  summe = 0
  for i in text:
    summe += int(i)
  return summe



def digit_sum(n):
for number in str(n):
int(number) = int(number) + int(number)
return number
print digit_sum(1234)

Getting "" File “python”, line 3
SyntaxError: can’t assign to function call""
What does it mean?

here:
int(number) =

you try to assign to function call, but you can not assign to function call (int() is a function call)

Thanks. Then how am I supposed to use int to do the addition?
"
96,Do the values in plt.axis() always have to be in increasing order?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, do the values in plt.axis() always have to be in increasing order, as in plt.axis([min_x, max_x, min_y, max_y])?
Answer
No, we can actually set the values for the axis to be in decreasing order as well.
If we take the example plot in the exercise, say that instead of setting the axis to this:
plt.axis([0, 3, 2, 5])
we instead set it to these values, with both the x and y min and max values reversed:
plt.axis([3, 0, 5, 2])
What this will do is not throw an error, but instead the graph will be essentially drawn inverted, both on the x axis and the y axis. The x axis will be for x values from 3 to 0, and the y axis will be for values 5 to 2, both in decreasing order.
As a result, you have the option, if ever needed, to draw the graph with axes in reverse or decreasing order, which is a nice feature to have.
",
97,Did you double check the placement of `return`?,"FAQ,Python FAQ","loops-py,q-a",80,"
Question
As per this lesson, one common user challenge is the placement of return within their functions.
Answer
To quote python’s documentation: ""  return  leaves the current function call with the expression list (or None ) as return value."" The most important thing to take note of here is that it leaves the function. This means that when return is entered, the function will end. So return values are mutually exclusive. A function cannot hit return True over and over until its false, it will end as soon as it touches the first return. This quote below is a good metaphor:






return is the keyword used to pass back a return value to the caller of the function. After doing so, the function is done, kind of like handing in an exam
if the return keyword is nested in a loop, the return keyword will simply “stop” the loop. Like an exam where you haven’t completed all the questions but you decide to hand the test in (return it to the teacher)


In regards to the current lesson, here is a hint from this same moderator:






The moment you determine list b isn’t the reverse of list a, you could return False. You don’t have too make the remaining iterations, given you already know what you need to know


I hope these help, feel free to discuss below and help each other solve this challenge.
","
This code isn’t making any sense to me. Here’s what I’ve got:
def reversed_list(lst1, lst2):
for i in range(len(lst1)):
if lst1[i] == lst2[(-i - 1)]:
return True
else:
return False
Here’s my problem:
when I have the second print() run through my code, it shows up as true.
The two lists are lst1 = [1, 5, 3] and lst2 = [3, 2, 1]
So in theory, on the second run-through of the loop, it’s doing this:
if lst1[1] == lst2[-1 - 1]:
return True
else:
return False
I know that lst1[1] is equal to 5 and lst2[-1 -1] is lst2[-2] which is equal to 2. These are clearly not equal, yet I’m getting a True return.
Can someone explain why this is?




 triangularapple:

So in theory, on the second run-through of the loop, it’s doing this:


unfortunately, your code never gets to the second iteration/run through of the loop
By default, a function returns None at the end of the function. If we want to return something else at the end of the function, we can use the return keyword.
Given return is the last thing a function does, when a return keyword is reached, the function ends

I think I understand. So I only want to stop the function by returning if the return gives the answer I’m looking for. Otherwise the return needs to function outside of the loop?




 triangularapple:

So I only want to stop the function by returning if the return gives the answer I’m looking for


The moment you determine list b isn’t the reverse of list a, you could return False. You don’t have too make the remaining iterations, given you already know what you need to know

You should return when you’re done. Doing it any earlier makes no sense at all and doing it any later is pointless.


db78863a90d9938a3a730ad454180c307d5350de.png1366×768 89.9 KB

here its alright if i do this, the new value of lst2_new comes out just fine. but then i put the full code
""def reversed_list(lst1,lst2):
lst2_new=
while len(lst1)>len(lst2_new):
lst2_new.append(lst2[-1])
lst2=lst2[0:-1]
if lst2_new == lst1:
return True
else:
return False ""
it doesnt work.


image.png1366×768 92.2 KB

see it doesnt work, why???

if anyone could post the official solution here I would appreciate it.
The following supposedly “solves it” but it still doesn’t  solve for reversed_list(, )
def reversed_list(lst1, lst2):
for i in range(len(lst1)):
for i in range(len(lst2)):
if lst1[i] != lst2[i * -1 - 1]:
return False
else:
return True
#Uncomment the lines below when your function is done
print(reversed_list([1, 2, 3], [3, 2, 1]))
print(reversed_list([1, 5, 3], [3, 2, 1]))
print(reversed_list(, ))

We cannot see the indentation, but if the return statements are inside the loop, then the program does not run to completion.
Do we really need a nested loop? Can we do this with a single loop? You have the idea, already to use negative indices on one list.
s = [0, 1, 2, 3, 4, 5, 6]

Given the above list, let i equal 0 and let j equal -i - 1
i == 0; j == -1
s[i] == 0
s[j] == 6

Increment i and compute j.
i == 1; j == -2
s[i] == 1
s[j] == 5

Increment i and compute j.
i == 2; j == -3
s[i] == 2
s[j] == 4

and so on to `i == 5; j == -6.
What this means is we can iterate over one list and compare lst1[i] to lst2[j]. If there is no match, return False, else do nothing (so no else clause). Once the loop completes a full run, then and only then, return True.

Thank you very much.

Can anyone please help me in understanding why my code is not working:
def reversed_list(lst1,lst2):
  lst2rev = lst2[-1::-1]
  for index in range(len(lst1)):
    if lst1[index] != lst2rev[index]:
      return False
    return True

it’s returning True for this list - print(reversed_list([1, 5, 3], [3, 2, 1])).
The problem is it is only reading the first index i.e. lst1[0] and comparing 0th index of the reversed list. Can you please help in explaining why it’s not iterating over rest of the indexes.
Thank you

return is the keyword used to pass back a return value to the caller of the function. After doing so, the function is done, kind of like handing in an exam
if the return keyword is nested in a loop, the return keyword will simply “stop” the loop. Like an exam where you haven’t completed all the questions but you decide to hand the test in (return it to the teacher)

Thank you for the explanation, however there have been cases of loops where return is used and the loop has iterated over all the elements without returning after the first one. So in this code which I posted earlier what should I modify - I used print in place of return and in the output I get comparison between each and every element of the two lists, printing True/False 5 times.
This is the code in the answer to the problem, and this one is working just fine despite using return -
def reversed_list(lst1, lst2):
  for index in range(len(lst1)):
    if lst1[index] != lst2[len(lst2) - 1 - index]:
      return False
  return True





 famafrench:

This is the code in the answer to the problem, and this one is working just fine despite using return -


except in this case, return True is outside the loop, where in your case it was nested in the loop.
which gives quite a difference, the correct solution only gives true when lst2 is lst1 in reverse
your function gives true if the first item of lst1 equals the last item of lst2.

Thank you so much! This explains.


Why is this wrong?
when flipping True and False and changing == for != it is correct…  I don’t understand why can’t it be done the other way around.
HELP!

because return is the last thing a function does, when a return keyword is reached, the function ends
so with the code you currently have, if the first element of lst1 equals the last element of lst2, true will be returned, thus the function ends. At this point, we haven’t even verified all the other elements in the lists, so we can already have a false positive.
lets say the first element of lst1  doesn’t equal the last element of lst2 (at which point false should be returned, which isn’t happening)
the loop will continue with the second and element second to last element of lst2, compare them, if they equal, return true. Yet again false positive

Why does the code below not work?
def reversed_list(lst1, lst2):
  lst3 = lst2[::-1]
  for index in range(len(lst1)):
    if lst1[index] == lst3[index]:
      return True
    else:
      return False

It returns True for both tests!

return means handing back data, which means the function is done. However, in your program, this means the loop only makes a single iteration.
so the only compared are the first value of lst1 and the last value of lst2. If these values are equal, your program assumes lst2 is the reverse of lst1.
"
98,How can I determine the invalid key when handling a KeyError exception?,"FAQ,Python FAQ",,10,"
Question
When writing an exception handler for a KeyError, is it possible to know the key that was invalid?
Answer
Yes, the invalid key can be determined from the KeyError exception. The KeyError class has variables which can be examined for the key, but the simplest method is to use the str() function to convert the KeyError into a string which will contain the key. The following example shows an attempt to access a key not in the dictionary resulting in an exception.
population = {""California"": {""Los Angeles"": 3971883,
                             ""San Diego"": 1394928,
                             ""San Jose"": 1026908},
              ""Texas"": {""Houston"": 2296224,
                        ""San Antonio"": 1469845}
              }

try:
    utah_list = population['Utah']

except KeyError as k:
    print(""Key "" + str(k) + "" does not exist"")
    
# Key 'Utah' does not exist

","
when i tried this syntax i got a type error at “as”,  like i couldnt aliasite KeyError as k,  why that happens?

Hei, @poncianodavid! I’m sorry you got that! For me it worked and the code got executed. Maybe you had some white space. I know this doesn’t help much. However, try again! I’m sure you’ll figure it out (of you haven’t already  )

What is “as”? I have never seen this syntax

It is what it sounds like. The value of KeyError is substituted to temporary variable k.

why does it have to be converted to a string? what’s the original type and how does this conversion work?

You convert the KeyError to a string, so it could print that the key you requested for (in the example above, its “Utah”) doesn’t exist. If you change the value for k variable (for instance, “Moscow”, you will get: Key “Moscow” doesn’t exist"".
I hope I was able to answer your question. Cheers




 ajaxninja66418:

KeyError 


KeyError is a type of error. Also we can all the invalid key from it.
Am I right?

KeyError will tell us that we got an invalid key. If there is more than one KeyError, the console will state all of them. So, you are right

I’m pretty sure what I said is right
"
99,Does exponentiation in Python work with negative exponents?,"FAQ,Python FAQ",,6,"
Question
In this exercise, the exponent operator is used for positive exponents. Does exponentiation work with negative exponents as well?
Answer
Yes, in Python, exponentiation does work with negative exponent values, the same way it would apply in mathematics. When performing exponentiation with a negative exponent, it is the same as getting the inverse of exponentiation done with the exponent as a positive value.
Example code
base = 2
exp = -1

# Both of these results will be 0.5
result1 = base ** exp
result2 = 1 / base ** exp

edited April 28, 2020
# result2 = 1 / (base ** -(exp))  =>  incorrect

","
8 posts were split to a new topic: 2nd question in this exponent excercise

Should not result 2 =  1 / (base ** (exp)) without the negative in front of the exp since it is already being divided?

Good catch. The example doesn’t look like it was tested. (Yours truly is guilty of this, sometimes, too.)
>>> 2 ** -1
0.5
>>> 1 / 2 ** -1
2.0
>>> 1 / 2 ** 1
0.5
>>> 

Going to edit this topic to correct the error.

I think that you were right the first time. Since exp is assigned -1, you would have to negate that when the number is in the denominator.
>>> 2 ** -1
0.5
>>> 1/2**-1
2.0
>>> 1/2**1
0.5
>>> base=2
>>> exp=-1
>>> base**exp
0.5
>>> 1/base**exp
2.0
>>> 1/base**-(exp)
0.5


I agree. The first time was ok.
I also tried & checked the following syntax
result2 = 1 / base ** (-exp)

All of them prints “0.5”
"
100,Why is scope important?,"FAQ,Python FAQ",q-a,1,"
Question
Why is scope important?
Answer
Scope allows data protection by allowing you, the coder, to control what parts of a program have access to what data members.
Imagine you’ve written a super useful, awesome module that you want other people to be able to use, but not alter or steal. To put it in an oversimplified way, you’d achieve this by properly using scope to control every aspect of how your module’s data is accessed and altered.
Without scope, every part of a program would have access to all data throughout the program, and that leads to lots of problems!
",
101,Why is the average returned incorrect?,"FAQ,Python FAQ",q-a,24,"
Question
Why is the average returned incorrect?
Answer
Be sure to write your return statement outside of the loop, otherwise your loop can only possibly run one time before return is executed. As soon as a function executes a return statement, it exits immediately and gives whatever value that is.
Your return statement should be on the same indentation level as the for loop so that it’s inside of the function, but outside of the for loop.
","
2 posts were split to a new topic: Student is not defined

My issue was declaring my var outside of my function:
wrong:
results[]
def get_class_average(class_list):

right:
def get_class_average(class_list):
  results = []


For some reason it looks like my for loop is not including tyler.  From my review it appears that my indentation is correct.
The code runs outside of that, but the I receive the following message:
get_class_average([alice, lloyd]) returned 80.55 instead of 85.85 as expected


gist.github.com


https://gist.github.com/codecademydev/9e08238cc78af3e7da9041e7d7036845
script.py
lloyd = {
  ""name"": ""Lloyd"",
  ""homework"": [90.0, 97.0, 75.0, 92.0],
  ""quizzes"": [88.0, 40.0, 94.0],
  ""tests"": [75.0, 90.0]
}
alice = {
  ""name"": ""Alice"",
  ""homework"": [100.0, 92.0, 98.0, 100.0],
  ""quizzes"": [82.0, 83.0, 91.0],
This file has been truncated. show original







Thanks as always for the responses.  They help more than you know!

def get_class_average(class_list):
  results = []
  for student in class_list:
    results = get_average(student)
return results

Study the code above and see if an issue doesn’t surface.

I tried that but I still get an error message that says ‘get_class_average([alice, lloyd]) returned 80.55 instead of 85.85 as expected’. I tried so many things but it doesn’t seem to work they way I want it to.

So may I take it then that you have not found the error?



 mtf:

results = get_average(student)


In the above, results will only be that last student in the class_list. We need to append to that list so it grows with each student average computed.

Thanks, man. You’re the best!!

That code depends on other code which you’re not showing.
You might want to test your function yourself, and consider whether you agree with that it should return a number and then see if the result is indeed a number, or not.

Im still confused, it seems like my .append does nothing and I’ve tried it several different ways
def get_class_average(class_list):
  results = []
  for student in class_list:
    total = 0
    total = total + get_average(student)
    results.append(total)
  return total

Ive also done return instead of total like in the example above and ive tried several different things in the .append()
I am very confused as to what is going wrong
def get_class_average(class_list):
  results = []
  total = 0.0
  for student in class_list:
    total += get_average(student)
    results.append(total)
  return total

def get_class_average(class_list):
  results = []
  for student in class_list:
    results = get_average(student)
    results.append(get_average(student))
  return results

none of these work, I cant remember all the other ways Ive tried to figure this out and nothing works
I scrolled through the forums and someone is saying that this should work but it isnt, it’s coming back with get_class_average([alice]) should return a number
def get_class_average(class_list):
  results = []
  for student in class_list:
    results.append(get_average(student))
  return results


In order for that to return a number we need to take the average.
return sum(results) / len(class_list)

ugh, thank you.
is this a bad omen if I’m struggling this much this early on with seemingly simple things?

Not an omen, just an indication that your brain is working. Confusion is a good sign, not a bad one.

thank you again, I think I needed that as well

def get_class_average(class_list):
  results=[]
  for student in class_list: # this is for looping(making action for every student)
    results.append(get_average(student)) # this helps to add get_average result into results list
  return average(results)    # returns result


Really, why does the code on the right is wrong and the code on the left is right? (The rest of the code is exactly as the exercise.
It says exactly the same thing with a different nomenclature.

image.png848×175 17.6 KB

My full code:


gist.github.com


https://gist.github.com/jubadodia/cf124f2ea4bf3aa466da06687801c703.js
gistfile1.txt
lloyd = {
  ""name"": ""Lloyd"",
  ""homework"": [90.0, 97.0, 75.0, 92.0],
  ""quizzes"": [88.0, 40.0, 94.0],
  ""tests"": [75.0, 90.0]
}
alice = {
  ""name"": ""Alice"",
  ""homework"": [100.0, 92.0, 98.0, 100.0],
  ""quizzes"": [82.0, 83.0, 91.0],
This file has been truncated. show original








Those do very different things. When you read it, make sure you’re not reading what you expect it to say, because then you’ll skip over the difference just because you don’t expect it to be there.
You can also edit one to match the other, when they are more similar you may have an easier time finding the difference. You can also run it through a diff program once you think they’re identical (they’re short enough to eyeball for the difference though) (and you still have to pay attention to what edits you’re making, obviously, or you may end up eliminating the difference without noticing)

@ryan.hurley.btc
When you are adding the weights to the quizzes tests and homework it should be multiplied (*), not added.
like this:
 total = homework *.1 + quizzes * .3 + tests * .6


Is there a way to print this result so we can see what the average is? Just spent half hour trying to print the result LOL

We can insert print statements at any point in our program, then comment them out after we’ve seen what prints at that point. To see the final result, we can print the call expression…
print (get_class_average(students))
"
102,Can I do this on my computer?,"FAQ,Python FAQ",q-a,1,"
Question
We’ve done everything in Codecademy’s environment so far, but can I do this Python work on my computer, locally?
Answer
Absolutely! But writing code on your computer can be an intimidating process, so it’s recommended that you use Codecademy’s coding environment until you get to the free form project where you will branch off on your own. For now, just know that the environment here is broken up into three main parts:


The instruction panel on the left


The text editor panel in the middle


The terminal panel on the right


If you’re determined to start trying Python on your own computer, we have a helpful article on getting started that can be found here.
",
103,What is the difference between `=` and `==` in Python?,"FAQ,Python FAQ",,2,"
Question
What is the difference between = and == in Python? Is there any relation?
Answer
In Python, the operators = and == serve very different purposes, and don’t have much relation at all other than similar syntax.
The = operator is used for assignment, such as when assigning a value to a variable.
The == operator is the relational operator for checking equality of two values. If the values are the same, it will return True, and will return False otherwise.
Example
# Assignment
number = 3

# Comparison
number == 30 # False

","
Okay, that actually clears things up and, until now, didn’t realize I had it a bit wrong. Thanks!
"
104,What if I want a backslash in my string?,"FAQ,Python FAQ","q-a,strings",4,"
When I did this exercise I wondered how I would print a backslash if backslash was the escape character.  As it turns out, you just put another backslash next to it!


gist.github.com


https://gist.github.com/codecademydev/e9473f53e7035efe9681a00f030e81e1
script.py
print(""Testing if I can print a \\"")








yields:
Testing if I can print a \
","
Great exploration to resolve your own question. This is being saved for anyone else who wonders the same thing!

Another thing you can do is put r (for raw) in front of the string like so:
print (r""Testing if I can print a \\"")

That will print Testing if I can print a \\.
There is one little thing with r though, backslash is still an escape for quotes, so you can’t end your string with a single backslash like so:
print(r""Testing if I can print \"") // End if line error

You would need to put a space, full stop or something else to sperate the backslash and quote. You could double backslash but it will then print a double backslash though.

Pretty cool! Thanks for sharing.
"
105,How should I read an error message to fix the code that caused it?,"FAQ,Python FAQ",q-a,1,"
Question
If I see an error message in the terminal, how should I go about reading through it and fixing the issue that caused it?
Answer
In Python, and many other programming languages, it’s best to start with the bottom-most error message in the terminal window. Most of the time you’ll get a handful of useful information with an error message:


The line number where the issue is,


A ^ pointing to the spot where it thinks the issue may be,


An error name, like IndentationError,


And if you’re lucky, a suggestion of how to fix it!


It should be noted, though, that these are not always accurate, as the computer can only do its best to parse through code to identify issues.
",
106,"Do I need to make students a list of their string names, or the variable names?","FAQ,Python FAQ",q-a,1,"
Question
Do I need to make students a list of their string names, or the variable names?
#Answer
The students list is going to be used to access the entire dictionaries, so we should fill it with the variable names used to name each student dictionary, lloyd, alice, and tyler, without quotes around them.
Putting quotes around their names makes them string values, not variable names that we can reference later.
",
107,Can dir() be called on a class?,"FAQ,Python FAQ",,5,"
Question
In this exercise, it states that dir() can be called on an object to investigate its attributes. Can dir() also be called on a class?
Answer
Yes, you can use dir() to examine a class in addition to calling it on an object of a class. In the following code example, you can see that the dir() call on the object of class Examine shows the instance variable created in the object while the call for the class does not.
class Examine:

    class_var = ""This is a class variable""

    def __init__(self):
        self.inst_var = ""This is an instance variable""


myobj = Examine()

print(dir(Examine))
# OUTPUTS: ['__doc__', '__init__', '__module__', 'class_var']

print(dir(myobj))
# OUTPUTS: ['__doc__', '__init__', '__module__', 'class_var', 'inst_var']

","
Why when print(dir(Examine)),'inst_var' is not listed in there???

Hi @vickytian4068895214,
When executed, the __init__ method in the example creates a variable, inst_var, that is only part of the instance that is being created. It is not part of the Examine class.
For the __init__ method to create an object that is part of the Examine class, it would need to do something like this:
    def __init__(self):
        self.inst_var = ""This is an instance variable""
        # creating a new class variable
        Examine.new_class_variable = ""new_class_variable""

Then after the first instance of the class is created, the Examine class would have a class variable, new_class_variable. Be careful, however, when writing code wherein an instance of a class modifies the class itself.

It will show instance variable.

Traceback (most recent call last):
  File ""script.py"", line 13, in <module>
    print(c.read())  # 0
AttributeError: 'NoneType' object has no attribute 'read'

It wont print type© Only print this error
"
108,What does the backslash in the variable declaration mean? (`=\`),"FAQ,Python FAQ","q-a,strings",13,"
In this splitting string exercise, what is the given syntax in the string “= /”.
spring_storm_text = 
“”""The sky has given over
its bitterness.
To my knowledge, we have not been exposed to this syntax. Is this an unmentioned escape sequence? I don’t see an end to the /"" and based on the notes from the discussion forum it looks like there should be one if indeed that’s what this syntax is.
","
It is a backslash, not a forward slash:
spring_storm_text = \
""""""The sky has given over 
its bitterness. 
Out of the dark change 
...
""""""

… and it is read by the Python interpreter as a line split marker. Without it, the single, isolated line, spring_storm_text =  would throw a syntax error.
In Python, there are two ways that you can split a line. One is by use of the backslash, as seen here, and the other is by means of parentheses, brackets or curly braces, within which any line can be split.
Why do they want to split this particular line?  Probably so that the poem would look nice on-screen. Without the split, it would be:
spring_storm_text = """"""The sky has given over 
its bitterness. 
Out of the dark change 
...
""""""

… not as pretty, you might agree.
It is unfortunate that this was used in a lesson dealing with escape sequences, for it is not an escape sequence marker. Escape sequences occur only within a string.

got it! Thanks
they throw some random stuff out every once and awhile.

Sorry, Could anyone tell me what is the role of this backward slash in this string?
spring_storm_text = \

I think the first backward slash in this exercise is ‘escaping’ the initial line break in the code between the declaration of the variable and the beginning of the multi-line string. Notice the code line numbers: the first line of the multi-line string is not just wrapped to the second line for visibility, it actually begins a new line of code. If you remove the backward slash, it throws a Syntax Error because it interprets the code as trying to declare a variable with no assigned value.

Nope, I tried just deleting the \ and when I print it I got the same result.
Anyone have idea why is there =\ at all if you can just = “string you want to print”?

@system2494758475, I think you may be incorrectly interpreting my previous response. It matters which lines your code breaks on. If your code starts a new line between the variable declaration and the multi-line string without the backslash to escape the code line break, it should result in a syntax error.
This works…: 
Code Example 1915×549 66.8 KB

…and this works…: 
Code Example 2919×525 66.2 KB

…but this doesn’t work: 
Code Example 3782×551 42.3 KB

Now if your underlying question is ‘Why would you start your multi-line string on a separate line, instead of just starting it on the line with the variable declaration?’ then there are a number of different reasons why a coder might include that line break, but I think they all ultimately boil down to ‘it makes your code easier to read’.

That makes sense, thanks, I din’t think about readability of a code

One of the things that still get me off balance is semantics as it relates to string splitting. Take a multi-line string for example, it is already splitted by having each sentence in separate lines. After using .split('\n') on it, we have all the sentences come together in a “single line”. How in this world are we going to refer this to splitting? Obviously, i am missing something and i am sure splitting is the best word to use for the procedure. However, i need help in coming to terms with it for better and lasting comprehension

The sentences don’t come together in a single line as you suggest. Using the .split() method creates a list of strings. The strings in the list are formed by splitting the original string on whatever character is chosen. In the context of this example that would be the newline character '\n'.

when we split by \n we have no \n  in string how we could say split by \n then ?

If you look at the variable chorus_lines, basically it takes the text in smooth_chorus and breaks every line of text into a string. The .split(’\n’) method attached to chorus line is what asks the computer to do that, as \n mean new line.
Once the computer has all the lines of smooth_chorus into strings, it puts it back into a list in chorus_lines.

There is an \n in the string, it’s just invisible. It’s a special invisible character that tells the program displaying your text that there’s a line ending here, and to display the next character in your text on the next line. This special character is secretly inserted at the cursor position when you press enter on your keyboard.
Most text editors won’t show you this special character, unless you explicitly tell them to, if they have that option, but when dealing with code it’s essential to know of its existence because it’s a part of multi-line strings.
"
109,Why am I getting an indentation error?,"FAQ,Python FAQ",q-a,4,"
Question
Why am I getting an indentation error?
Answer
If you’re seeing an error message that says something about an IndentationError it means you have code that isn’t indented properly somewhere. Remember, Python uses indentation (2 spaces per indentation on Codecademy) to determine blocks of code.
If you’ve written a return statement outside of a function (not indented inside to be inside the function), that will give you this error. For example:
def my_function():
  print ""Hello!""
return 0  # This is a return outside of any function!

","
so according to codecademy on
https://www.codecademy.com/courses/learn-python/lessons/lists-and-functions/exercises/using-an-element-from-a-list-in-a-function
def list_function(x):
return x[1]
n = [3, 5, 7]
print list_function(n)
gives me the first result in the list and …
def list_function(x):
return x[0]
n = [3, 5, 7]
print list_function(n)
is the wrong answer even though we all know [0] accesses the first element in a list

The exercise isn’t asking for the first element of the list. It is asking for the element at index one i.e. the second element of the list. Remember indexing in python starts at 0.

Thanks for the reply. Codecademy can be confusing to me sometimes with the way things are worded.
"
110,"How exactly does not work, especially if we write not not?","FAQ,Python FAQ",q-a,5,"
Question
How exactly does not work, especially if we write not not?
Answer
The basics are simple enough, but like a lot of things we’ve learned so far, can become pretty tricky if we add onto them! The not operator is no exception!
Something that may help us when determining if a statement is True or False is breaking it down into its simplest parts and then solving the whole thing. Take a look below for an example:
bool_complicado = not not 3 ** 2 + 10 != 60
First let’s do the stuff after the 2 nots to make life easier. Step by step, that’d look like:
bool_complicado = not not 9 + 10 != 60
bool_complicado = not not 19 != 60
bool_complicado = not not True

Great! Now we see it in a much simpler form and can apply those pesky nots. Always apply the inner-most not first.
bool_complicado = not False
bool_complicado = True

Notice how not True became False on the first line above, and then not False is as much as we could break it down before writing the final answer!
","
I can’t see any practical use for these bizarre twists of logic.
What are some actual uses for using “not not  True” ?

It will come up eventually when working with truthiness, as opposed to boolean literals.
a = 0
b = 7
not (a * b)      =>  True

but zero is not truthy, so double not will yield the correct boolean to match.
not not (a * b)  =>  False

I hope “truthy” is something we learn later on.

There are only two boolean literals… True, and False. The conditionals if and while always resolve to one or the other, regardless what form of expression is given as the argument. This is where truthy comes in.
""The dew is heavy this morning.""

True, or False? The computer doesn’t know that this is true, or false. All it sees is a string of characters for which it has only one lexicon… Character codes. It can’t even tell us what language this is without some outside help. But it can tell us it is truthy so as an if expression, it will yield True.
dew_is_heavy = ""The dew is heavy this morning.""
if dew_is_heavy:
    print ""Don't wear sandals this morning if walking on the grass.""
else:
    print ""Safe to wear sandals for walking in the grass this morning.""

All the computer can do is look at values and resolve them one way or the other. Every expression can be boiled down to a value. Empty strings, zero and None are values that have no real definition so cannot be truthy or nothing would make sense.
def is_even(x):
    return not x % 2

Let’s say x is 11. Then x % 2 will be 1. We want to return a boolean to the caller (as implied by the prefix, is_) that describes the argument given to the function. In this instance not will cast a boolean from the expression. 1 is truthy, but 11 is odd. In this case we return False because of the not which toggles to the opposite boolean.
not ""string""  =>  False
not """"        =>  True
"
111,Where am I supposed to write this elif to check if the coordinate has already been guessed?,"FAQ,Python FAQ",q-a,5,"
Question
Where am I supposed to write this elif to check if the coordinate has already been guessed?
Answer
Our code to this point (in pseudo code) looks like the code below. We want to insert an elif that checks if their wrong guess was one they’ve already made before.
if guess is correct:
  print “Congrats! You sunk my ship.”
else, not correct:
  if guess is invalid:
    print “Not in the ocean”
  # ELIF GOES HERE
  else, just missed:
    print “Missed!”
    update element in board to be “X”
  print the board

You cannot have an elif without an if before it, so writing it after an existing else would be invalid, because else must be last. Be especially careful with your indentation as well, as the new elif should be on the same indentation level as the if that checks for the guess being invalid.
","
2 posts were split to a new topic: What Does This Code Do?

Does an elif statement really need to have the condition in brackets? I just tried it without and it was still fine.

jjhiggins97 i don’t think they are even supposed to be in brackets lol. I’m pretty sure you write the condition without brackets, but Python knows its a condition since you put a colon ("":"") after it.

Yeah, brackets are used for making debugging easier. They don’t help with the program, just are there for neatness.
"
112,How does float( ) work?,"FAQ,Python FAQ",q-a,14,"
Question
How does float() turn my number into a float?
Answer
float() is a built-in function, so Python comes by default with this ability to convert to float. To use it, we simply write a number or string inside of the parentheses, like this:
float(10)
float(“100”)

You’ll get errors if you try to use it any other way. It cannot be used as below:
10.float()            # invalid
float() = my_integer  # invalid

To see a list of all built-in functions available in Python 2, take a look at this documentation page!
","
9 posts were split to a new topic: Cucmber logic

Ah.  Okay, thank you.  That explains it.

Can i write float like this
Variable name = float(100.)/6 if  not can u guys explain me how should  i. correct this

100. is a float, converting that to float would be super-unnecessary
Nobody but you can correct that, because only you know what you meant by it.

Can i write float like this
float_cucumbers_per_person = cucumbers ./num_people
if not can you guys please explain that for me? thanks

Can you? Yes. Would you?, not likely, unless it is in the command line. Python 3 has made this question moot since all evaluations result in a float unless explicitly stated otherwise. No fudging or casting required. Now it’s the other way around for integers.
As I understand it, floor division is the same in both versions. This will need testing…
1 // 1    =>  1
1.0 // 1  =>  1.0
1 // 1.0  =>  1.0

i tried to use it with a variable like float(cucumbers) and tried to print it, the value inside the cucumber was also a whole number only, this i supposed will turn my data entered in it to as float, but thats not what it did, it returned me just the whole number only.
so can the float function only be used with the numerals and not with the variables,
cucumbers=6
float_cucumbers_per_person=float(cucumbers)/num_people
#this worked fine, but not this one
float(cucumbers)
print(cucumbers)




 prajvalsingh:

so can the float function only be used with the numerals and not with the variables,


Seems odd behavior. Cannot reproduce in Python 3.
>>> float(1)
1.0
>>> a = 1
>>> float(a)
1.0
>>> 

>>> 1.
1.0
>>> a.
SyntaxError: invalid syntax
>>> 

Above we see that the function works fine with either number or variable (assuming a number is at the other end). What we also see is that the shorthand syntax only works on numbers, and not on variables. Just tossing this in.

float(n) doesn’t turn n or the value it refers to, into a float
it creates a float
the only thing float at all does with its argument is to look at it, you get the result as the return value
variables have nothing to do with it, because values are not aware of what is or isn’t referring to them
and values can’t in some way restructure themselves to be something else. If you have a list then that will forever remain a list
if you want to change what a variable refers to, use assignment:
a = float(a)

This gives me a correct float answer (that being 16.6666666667) when i print:
float_cucumbers_per_person = float(cucumbers)/num_people
This also gives me the correct float answer:
float_cucumbers_per_person = cucumbers/float(num_people)
Why does putting both variables in the float function like this give an incorrect float answer (16.0)? :
float_cucumbers_per_person = float(cucumbers/num_people)
What exactly is happening so i can understand it better?

if the division involves two integers, python will floor (round down) the result. Casting to float after the rounding down will not give the desired output (giving rounding down has already occurred), which is why you cast one of the two numbers to float, so the division involves a float and the rounding down doesn’t occur

In python 3 there is only one type of division. Every time it gives float value.

Please be careful with your phrasing. “normal” division (/) will always give a float value, but python3 also has floor division (//) which will give an integer. So there are multiple types of division.
"
113,"Zip creates an iterator, how can we turn that into a dictionary?","FAQ,Python FAQ","lists-dictionaries,q-a",15,"
why the dictionary is empty when i execute this lines of code?
drinks = [""espresso"", ""chai"", ""chai"", ""drip""]
caffeine = [64, 40, 0, 120]
zipped_drinks = zip(drinks, caffeine)
print(""Zipped drinks "",list(zipped_drinks))
drinks_to_caffeine = {key: value for key, value in zipped_drinks}
print(""Drinks to caffeine dictionary "",drinks_to_caffeine)

output:
Zipped drinks  [(‘espresso’, 64), (‘chai’, 40), (‘chai’, 0), (‘drip’, 120)]
Drinks to caffeine dictionary  {}
","
The object zipped_drinks is an iterator. It is characteristic of an iterator, that you have one go at it: after you have iterated through it one time, it cannot be re-used.
So, when you call print(""Zipped drinks "",list(zipped_drinks)), the iterator zipped_drinks is exhausted by providing the printable list to the print function.
Solution:  Either comment out the first print() function, or assign the list to a variable and call print() and the dictionary comprehension on the variable.
drinks = [""espresso"", ""chai"", ""chai"", ""drip""]
caffeine = [64, 40, 0, 120]
zipped_drinks = zip(drinks, caffeine)
drink_list = list(zipped_drinks)
print(""Zipped drinks "",drink_list)
drinks_to_caffeine = {key: value for key, value in drink_list}
print(""Drinks to caffeine dictionary "",drinks_to_caffeine)

# Output:
Zipped drinks  [('espresso', 64), ('chai', 40), ('chai', 0), ('drip', 120)]
Drinks to caffeine dictionary  {'espresso': 64, 'chai': 0, 'drip': 120}


Hi
How would we know id a defined object is an iterator?
Zipped_drinks was defined to hold value from 2 lists. Shouldn’t such an object be usable any number of times in its scope?


As per your explanation, printing out zipped_drinks twice does confirm your answer.
But how do we identify such objects in the code.
On first look it didn’t seem like a iterator ( more so if I don’t intend to use in in loops )


Does this apply to range objects as well?


Why is this so in Python?


print(""Zipped drinks "",list(zipped_drinks))
print(""Zipped drinks "",list(zipped_drinks))

output
Zipped drinks  [('espresso', 64), ('chai', 40), ('decaf', 0), ('drip', 120)]
Zipped drinks  []





 rdb20:

But how do we identify such objects in the code.


The most commonly used functions in Python 3 that return iterators (which is what we are discussing here) are:  zip(), enumerate(),  reversed(), map(), filter().  It seems to be the trend to return iterators, as some of those returned lists in Python 2;  be on the lookout for more in future versions.  I don’t know of any way to recognize which functions return iterators, except of course, by reading the docs or other instructions on their use.



 rdb20:

Does this apply to range objects as well?


Technically, range() is not an iterator. range can be “examined” in ways that iterators cannot:
my_range = range(5)
print(len(my_range))
print(my_range[3])
print(3 in my_range)
print(list(my_range))

Output:
5
3
True
[0, 1, 2, 3, 4]

Now let’s try it with a true iterator, say, the output of the enumerate() function:
my_list = ['a','b','c']
my_enumerate = enumerate(my_list)
#print(len(my_enumerate))  # raises error
#print(my_enumerate[2])  # raises error
print((1, 'b') in my_enumerate)
print(list(my_enumerate))

Output:
True        #  yes, (1, 'b') is in my_enumerate ...
[(2, 'c')]         # ... but discovering this partially exhausted the iterator!




 rdb20:

Why is this so in Python?


I’m not sure - I’ve never seen an answer to this. Presumably, the iter and next functions that define iterators could be rewritten in such a way as to permit reuse.
My own theory of the  reason is that we would like functions to return the same output from a given input, but an iterator can be used to change the iterable which generated it.
my_list = ['a','b','c']
my_enumerate = enumerate(my_list)
for idx, element in my_enumerate:
    my_list[idx] = element + 'x'
print(my_list)

Output:
[‘ax’, ‘bx’, ‘cx’]
So, at this point, what should my_enumerate look like if it could be re-used???

There is a lot about this on the internet. There is one thread on Stack Overflow that maintains that it is only the iterator type called “generator” that is exhaustible. That, at least, is not true.
Here are some good references.
The Iterator Protocol: How “For Loops” Work in Python
Iterables, iterators and generators, oh my! Part 1
Python: range is not an iterator!

My code:
drinks = [""espresso"", ""chai"", ""decaf"", ""drip""]
caffeine = [64, 40, 0, 120]
zipped_drinks = zip(drinks, caffeine)
print(tuple(zipped_drinks))
drinks_to_caffeine = {drinks:caffeine for drinks, caffeine in zipped_drinks}
print(drinks_to_caffeine)
>>>
(('espresso', 64), ('chai', 40), ('decaf', 0), ('drip', 120))
{}

Why is the dictionary empty when I print it? My response was correct according to the site, but did I not actually make a dictionary?

This prints fine…
drinks = [""espresso"", ""chai"", ""decaf"", ""drip""]
caffeine = [64, 40, 0, 120]
zipped_drinks = zip(drinks, caffeine)
#print(tuple(zipped_drinks))
drinks_to_caffeine = {drinks:caffeine for drinks, caffeine in zipped_drinks}
print(drinks_to_caffeine)


I have a similar question as above!
I think the question is that why are we unable to print both the ‘zipped_drinks’ list and the ‘drinks_to_caffeine’ after list comprehension?

if I shift both prints to the end of the code, the ‘zipped_drinks’ list appears to be the one that is empty this time round.
Thank you for your time!

Tried it myself and saw the same thing. I did some research and it appears that you can only unpack a zip object once. Once it has been iterated, it is exhausted.
I guess making it into a list when printing it is using the zip object once. Then making it into a dictionary is attempting to use it twice. A site suggested making a separate variable that creates a list of a zip object and I tried that with this lesson and it worked, just a little extra work to see the printed list version of the zip.
This extra work isn’t necessary for the lesson, but helpful to see what your code is doing.
drinks = [""espresso"", ""chai"", ""decaf"", ""drip""]
caffeine = [64, 40, 0, 120]


zipped_drinks = zip(drinks, caffeine)
zipped_drinks_list = list(zip(drinks,caffeine)) #creating a separate variable that is a list version of the zip object

drinks_to_caffeine = {key:value for key, value in zipped_drinks}

print(list(zipped_drinks_list)) #print this new variable so that I don't exhaust the zipped_drinks object
print(drinks_to_caffeine)

If you Google “zip list be unpacked once” you’ll see a couple of helpful more in depth explanations.

There are too many steps here. Using the zip(), you can combine the 2 lists right into a dictionary. Using tuple and zipping more than once isn’t necessary. I am fairly new to python, but not programming, so what I gather Is that this is the fastest, most efficient way. And it works fine!
drinks = [""espresso"", ""chai"", ""decaf"", ""drip""]
caffeine = [64, 40, 0, 120]
drinks_to_caffeine = {drinks:caffeine for drinks, caffeine in zip(drinks, caffeine)}
print(drinks_to_caffeine)





 chiefyogiblak:

Using tuple and zipping more than once isn’t necessary.


It is only zipped once, but stored in a variable. Abstraction is not something that is easy to teach to a beginner so most lessons make use of intermediary or temporary variables to show that step in a more verbose manner.

Ah, I understand. I haven’t come across tuples yet so I didn’t understand them fully, but soon as I saw the code, I knew I could remove that and the variable and go straight to the dictionary comprehension. Which way is preferred in a real world setting?

I’m no expert on the real world setting and see nothing wrong with your code. In this setting we need to write code that is easy to read and follow, without abstraction in the early stages. Think ‘naive’ over elegant or intuitive. Being a programmer it will seem like a step back, but it can’t hurt to get a refresher and see things from a beginner’s view.

For sure! I sometimes go the naive way when trying to get a function down and then edit for specifics and efficiency later on.




 mtf:

drinks = [“espresso”, “chai”, “decaf”, “drip”] caffeine = [64, 40, 0, 120] zipped_drinks = zip(drinks, caffeine) #print(tuple(zipped_drinks)) drinks_to_caffeine = {drinks:caffeine for drinks, caffeine in zipped_drinks} print(drinks_to_caffeine)


I used this construction
drinks = [“espresso”, “chai”, “decaf”, “drip”]
caffeine = [64, 40, 0, 120]
drinks_to_caffeine = dict(zip(drinks, caffeine))
print(drinks_to_caffeine)
and it was right answer. Can I use it or I should to use constructions with “for”?

There is nothing wrong with using the dict() constructor, so long as other methods are apparent. It really depends what the exercise is expecting, but given freedom to choose our approach, any that work are fine.
"
114,What is a float?,"FAQ,Python FAQ",q-a,12,"
Question
What makes a number a float?
Answer
Float is short for floating point and consists of the real numbers. Unlike integers, which can only be whole number values, floats can be any number in between, like 1.5, 3.14, etc. And Python is smart enough to know that any time you put a period in a number to convert it to floating point, so you may see numbers like 70. In future lessons, which is the same as writing 70.0.
","
Hi!
I am having a problem with printing float numbers. Here is the part of the code:
def F(x):
  return 1/(x)

for i in range(-10,11):
  if i == 0:
    print 0, F(0.0000001)   #to avoid dividing by zero, yet getting something ""realistic""
  else:
    print i,  F(i)

And it prints the following:
-10 -1
-9 -1
-8 -1
-7 -1
-6 -1
-5 -1
-4 -1
-3 -1
-2 -1
-1 -1
0 10000000.0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
So far, I have tried the following:

{].format(F(x))  = prints just more zeros
float(F(x)) = prints 0.0 instead of 0
describve range() as float = gives error message (expected range, get float instead)

The function prints the value correctly if I describe it as: F(3.) instead of F(3) (=0). So the function is fine, but the printing is tricky.
Thank you for help!




 aquatiqesper:

And it prints the following:


okay, that is the output you are currently get. What is the desired output?



 aquatiqesper:

float(F(x)) = prints 0.0 instead of 0


this won’t work, the rounding down has already occurred, so you only cast to float after the fact. The division itself should involve a float then

Hi!
I hope to get F(x) more accurately than 0. Perhaps 2-4 decimals. The format (table like printing) is already fine

.format() supports control over the amount of digits you want to print. I don’t see the problem? You might want to ensure that F function returns a float (that the result of the division is a float, not a integer)
python2 will round down to the nearest integer if the division involves two integers, however, if the division involves a float then python won’t floor (round down)

I believe that the function does not return the value as float, because with .format() problem does not disappear. Thus, I have to change the F(x) somehow.
Thank you!




 aquatiqesper:

I believe that the function does not return the value as float, because with .format() problem does not disappear. Thus, I have to change the F(x) somehow.


i believe i mentioned that twice indeed:



 stetim94:

You might want to ensure that F function returns a float (that the result of the division is a float, not a integer)





 stetim94:

this won’t work, the rounding down has already occurred, so you only cast to float after the fact. The division itself should involve a float then



Sorry! I misunderstood one of your comments.
Anyway, the problem solved by adding a line as follows:
def F(x):
x = float(x)
return 1/x

why cast x to a float? I would simply use 1.0, then you also have a float

Because this is a part of “bigger” code I try write piece by piece. I test each function, class, etc. separately and then add them together - one by one. x is the variable in here and “1” is 1 for simplicity. Number one will be replaced by another value from another function later on. Of course I will test it, if I need to separately define x as float in the ready code but now it is easier to control (as float).
I hope this explanation makes sense.

you could consider 1/float(x), anyway, if you write bigger code i would recommend following naming convention:
https://www.python.org/dev/peps/pep-0008/
so then function name would be for example hello_world (preferable) or helloWorld is also okay. Function names should be more descriptive then a single letter.

Thanks! I read the file and I will follow it.
"
115,Why are my student dictionaries not accepted?,"FAQ,Python FAQ",,29,"
Question
Why are my student dictionaries not accepted?
Answer
There are a few common errors listed below:

Capitalization issues will prevent you from passing. Remember that Codecademy checks for exactly what the instructions ask for, so your variable names should be all lowercase, like lloyd, but their names stored under their ""name"" keys should be capitalized like a normal name, like ""Lloyd"".
Incorrect dictionary syntax will give you lots of errors! Remember that dictionaries are key-value pairs, and that each value except the last in the dictionary must have a comma after it.
The ""name"" key’s value does not go in brackets [ ], it’s just a string.

","
Can someone please explain what happens after running the code below:
students=[lloyd,alice,tyler]
def set_up(list):
  for x in list:
    x={}
    x[""homework""]=[]
    x[""quizzes""]=[]
    x[""tests""]=[]
    x[""name""]=str(x)[0].upper()+str(x)[1:len(str(x))]
  return x
print set_up(students)

I thought it might print out the dictionaries required to pass this exercise.

here:
students=[lloyd,alice,tyler]

you have a list with undefined variables.
How do you expect this to work?

First, fix the list:  students=[""lloyd"",""alice"",""tyler""]
Next: look at what you are doing here:
  for x in list:
    x={}

Each time around, the variable x is assigned one of the student names, say “lloyd”. Then, the same variable, x, is re-assigned the value: an empty dictionary. That student name is lost when you re-assign your iteration variable. You need something like:
  my_dict = {}
  for x in list:
    # do something here to make x a key in my_dict, whose value is an empty dictionary.

… maybe:
if not x in my_dict:
  my_dict[x] = {}

I’ii let you take it from there.

Thank you for your reply!
Makes sense. I’m really new at this so I may say and think stuff that are completely against python language. So a list must contain defined data, it cannot contain undefined variables. I should go check the exercise with lists again.




 patrickd314:

First, fix the list: students=[""lloyd"",""alice"",""tyler""]


how are we now going to the variables with the right names then? you need to end up with:
lloyd = {
  ""homework"": [],
  ""quizzes"": [],
  ""tests"": [],
  ""name"": ""lloyd"",
}


The lists and dictionaries exercise always used strings or numbers as list items. And then we worked from there - all of the items had their type defined.
students=[""lloyd"",""alice"",""tyler""] is making me feel uncomfortable because I have strings in my list.
How can I transform these strings into dictionaries? That is why I first wrote
students=[lloyd,alice,tyler] but now I understand why it won’t work. I have to rethink this…

you could do:
lloyd = {}
alice = {}
tyler = {}

students=[lloyd,alice,tyler]


Yes, that is the easy way for low number of students. I wanted to define a function that would create empty dictionary for each student.

The way the exercise works will not allow what you want, if you let go of the exercise requirements you get a lot more possibilities:
class School:
    def __init__(self, *args):
        self.create_student(*args)

    def create_student(self, *args):
        for arg in args:
            setattr(self, arg, {})
            student = getattr(self, arg)
            student['homework'] = []
            student['quizzes'] = []
            student['tests'] = []
            student['name'] = arg.capitalize()


the_school = School(""alice"", ""lloyd"", ""tyler"")
print(the_school.lloyd)


This looks way more classy, but is out of my league.
Loving the student['name'] = arg.capitalize() block. So much more elegant.
Thank you for your help, you just made me buy the Pro version, I love it here!




 stetim94:

lloyd = {} alice = {} tyler = {} students=[lloyd,alice,tyler]


I did as you suggested and then tried to define the function that would complete the task. I see I was trying to transform a dictionary to a string before which is a no no:



 samuelsonmarinho:

x[“name”]=str(x)[0].upper()+str(x)[1:len(str(x))]


Is there even a way to complete my function with my knowledge so far? I took it step by step from the beginning in Python 2 coding, never wrote anything else before.

yea, instead of a class use a dictionary:
def create_students(*args):
    students = {}
    for arg in args:
        students[arg] = {}
        students[arg]['homework'] = []
        students[arg]['quizzes'] = []
        students[arg]['tests'] = []
        students[arg]['name'] = arg.capitalize()
    return students

print(create_students(""alice"", ""lloyd"", ""tyler""))

again, this will not work with the exercise.

lol, apparently it can be. Nice to be proven wrong sometimes:
def create_students(*args):
    for arg in args:
      	
        globals()[arg] =  {
          'homework': [],
          'quizzes': [],
          'tests': [],
          'name': arg.capitalize(),
        }

        
create_students(""alice"", ""lloyd"", ""tyler"")
print(alice)

I would like to add a serious note to this code, its very very bad practice. I would much rather have the classes or dictionary solution.

I submitted my code which wasn’t excepted - when I pressed ‘solution’ I was just missing  in all but the names…item? (Sorry no idea what this is called officially).
What is ? What does it do? Why can an item thing not be left blank in a dictionary if you use a comma anyway?

This was the square brackets - not a square, obvsly!
Edit - is it because they are lists? Not item thingies?

here:
'homework': [],

you assign an empty list to homework, a student will get multiple homework grades, so you need a data type that can hold multiple values, a list can do this
on the other hand, a student name can just be represented as a string, what would be the value of using a list for the name?

Could someone please explain to me what I am doing wrong here?
lloyd = {“name”, “homework”, “quizzes”, “tests”}
alice = {“name”, “homework”, “quizzes”, “tests”}
tyler = {“name”, “homework”, “quizzes”, “tests”}
students = [name(“Lloyd”), name(“Alice”), name(“Tyler”)]

what are you trying to do?

I’m trying to print out the integer value for each student from the dictionaries. I’m very new at this so I don’t doubt a lot of it is wrong.
"
116,Why is total_cost a float?,"FAQ,Python FAQ",q-a,15,"

Numbers

Question
If cucumbers isn’t a float, how did total_cost end up being a float?
Answer
When we do math between an integer and a float, the result will always be a float. This is a good rule to keep in mind because it can cause unexpected and incorrect values if you try dividing two integer values that are not evenly divisible. The simple solution is what we’ve done in this exercise: convert one of the involved numbers to a float so that the result becomes a float.
Take a look at these examples:
my_float = 70.
float_2  = 70.0
my_int   = 70

float_result   = 70 / 2.0
float_result_2 = 70. / 2.0
float_result_3 = 70.0 / 2

int_result = 70 / 7

Try running that code and printing the values. Were the results as you expected?
","
At Numbers, section 9/14 in the first part of learning Python, I was fine with instructions 1-3 but got stopped on #4, ""Print out total_cost. What datatype is it?""
Usually there is a hint available to concisely explain what to do, but not in this case.
What is wrong with my code? and where did I miss the instruction?
1 cucumbers = 1
2 price_per_cucumber = 3.25
3 total_cost = cucumbers * price_per_cucumber
4 print “total_cost”

Please include a link to the exercise that this relates to. The example given has no context.
Python 2 division quotient is dependent on data types of the operands. If both are integer, the quotient is integer. When one or the other, or both are floats, the quotient is a float.
7 / 3  =>  2

7 / 3. => 2.3333333333333335

From a standpoint of explicitness in readability,
float(7) / 3  => 2.3333333333333335

Python 3 has removed this conditional treatment of quotients by making all quotients a float, by default.
5 / 2  => 2.5

If an integer is the intended result, then explicit casting is required…
int(5 / 2)  =>  2




 dersness:

print “total_cost”


If the intention is to print the value referred to by the variable, total_cost then leave off the quotes. The above is outputting…
total_cost

rather than the expected,
3.25

>>> cucumbers = 1
>>> price_per_cucumber = 3.25
>>> total_cost = cucumbers * price_per_cucumber
>>> print total_cost
3.25
>>> type(total_cost)
<type 'float'>
>>> 


There it is. I was unnecessarily employing quotes. Thank you.

A post was split to a new topic: Multi-Line strings




 mtf:

type(total_cost)
<type ‘float’>


syntax error on <type ‘float’>
unfortunatelly

<type ‘float’> is the output of type(total_cost), <type ‘float’> shouldn’t be ran as code

At section 9/14 for Python Syntax, I’m stuck as to why #4 isn’t shown as completed.
cucumbers = 93
print ""Number of cucumbers: "", cucumbers

price_per_cucumber = 3.25
print ""Price per cucumber: "", price_per_cucumber

total_cost = cucumbers * price_per_cucumber
print ""Total: "", total_cost

type(total_cost)
print type(total_cost)





 thechristianjedi:

type(total_cost)


That line is unexpected, probably, and should be removed.
Whenever you see code written like this,
>>> type(total_cost)
<type 'float'>
>>> 

it means the command was entered directly at the interactive console, and the interpreter responds immediately. In a code statement we need to assign expressions such as this, or print them.



 thechristianjedi:

print type(total_cost)


That should output what you expect.

A post was split to a new topic: Use print to print total_cost

A post was split to a new topic: Shopping trip

Why should I write “print” before “total_cost”?

The only reason would be so we can see the outcome displayed on the screen.

"
117,What is mod short for in math?,"FAQ,Python FAQ",,13,"
Question
What is mod short for? Particularly when written X mod Y?
Answer
mod is short for modulo, a math function that means to get the remainder of division. It is represented with a % in python and written X % Y this can be read as X mod Y or X modulo Y.
It is used to get the remained from a division. For example:
15 % 4 = 3
>> 15 / 4 = 12 with remainder 3

For some further studying, see the Codecademy Python 3 modulo exercise.
","
I’m in the Lots of Math part of Python Functions. It’s the last screen before you complete the lesson.
It is asking me to “return the third number printed mod a.” What exactly is this asking me to do?

I had the same question. Mod is short for modulo, which is the % thing.

Mod means a lot for some of us, can be modules, modifications, moderations so fix this exercise asap because its confusing.

Finally, it should  return  the third number printed mod  a, this is a poorly written step, whoever wrote this exercise, please, get down to our level, I know you are an expert, but this is the first time I learned about this word “mod” , this exercise is confusing! you can do a better job




 objectpro66930:

Mod means a lot for some of us, can be modules, modifications, moderations so fix this exercise


Whilst the confusion is unfortunate, modular arithmetic is a mathematical system which existed long before the computer did.
The use of mod in this fashion is not confined solely to programming, nor to Codecademy’s material; it’s mathematics, so you’ll just have to get used to it I’m afraid. 

Terrible response from the Help Desk! Why make this more difficult by throwing in jargon that most don’t know. You could have easily left “mod” out and asked to return the remainder of ‘a’ and this thread wouldn’t exist!




 cseby2000:

Why make this more difficult by throwing in jargon that most don’t know.


Programming is difficult, and learning by its very nature is going to involve a lot of things which are “unknown”. A good amount of your time, as a programmer, will likely be spent looking for information and learning about things you have either a) not seen before and/or b) don’t fully understand.
An example would be the use of mod in this context: you saw it, didn’t understand it, and went looking for more information to help you make sense of it before ending up here. This is a process with which you should become familiar. 



 cseby2000:

You could have easily left “mod” out and asked to return the remainder of ‘a’ and this thread wouldn’t exist!


I can only presume, as I do not have access to the specific exercise (since I am neither a Pro member nor a Codecademy employee), that since this exercise deals specifically with the modulo operator that the specific statement of a mod b is intended to prompt the use of the % operator you have been learning about. It also introduces you to the notation. 
Otherwise, if the exercise simply asked for a remainder, you might derive some alternative mechanism for calculating it when a single operator is sufficient.

I agree with the prior response that this was a poorly written exercise.  This is not the first time I’ve had trouble with the instructions.

In any programming exercise, reading the instructions is crucial. It is clear enough to see what is coming in return for me.
def lots_of_math(a, b, c, d):
print(a + b)
print(c - d)
print((a + b) * (c - d))
return ((a + b) * (c - d)) % a

Came here bc I was confused, and saw I wasn’t alone!  I if there were a previous example explained with this verbiage, I would have known what to do.

Up until this point in the exercises % was always referred to as modulo so if they suddenly change how they refer to % it they should at the very least have an explanation in the hint if not in the actual instructions.




 thecodingbean:

so if they suddenly change how they refer to % it they should at the very least have an explanation in the hint if not in the actual instructions.


I think the lesson designers have assumed that, given the entire exercise revolves around the use of the modulo % operator that you’ll be able to infer that “mod” == “modulo”.
The confusion is unfortunate, for sure, but I don’t think it’s that great of a leap to make. Besides, in the event that is is confusing there is the secondary benefit of getting you used to going looking for answers on your own. There will not always be someone (or something) around to give you a hint or hand you the solution, and being able to successfully figure things out on your own is a useful skill.
"
118,Is it possible to statically define a dictionary which contains another dictionary without using another variable?,"FAQ,Python FAQ",q-a,4,"
Question
In this exercise, one of the values in the library dictionary is set from the plays dictionary. Is it possible to statically define a dictionary which contains another dictionary as a value?
Answer
Yes, when you define the dictionary you simply define another dictionary inside the {} brackets. The following code example shows a population dictionary which contains dictionaries for each state that contains cities and population numbers.
population = {""California"": {""Los Angeles"": 3971883,
                             ""San Diego"": 1394928,
                             ""San Jose"": 1026908},
              ""Texas"": {""Houston"": 2296224,
                        ""San Antonio"": 1469845}
              }

","
looping through this to pull out information i am sure is possible but seems daunting.  Better to keep it simple and create several dictionaries?

Nested data structures are common. You should rise to the occasion (challenge? No idea, my english isn’t that good)

My melting brain is screaming “thiiiis wiiiilll beeee fuuuuun”
"
119,Where is the Manhattan distance used?,"FAQ,Python FAQ",q-a,1,"
Question
We’re introduced to the Manhattan distance in this lesson. What are some applications of this distance function? Is it used often in data science?
Answer
One place that the Manhattan distance shows up very often is when working with vectors. Suppose, for example, that we have two vectors: v1 with coordinates (x1, y1) and v2 with coordinates (x2, y2). The difference between v1 and v2 is defined by how many units we must move horizontally and vertically to get from one vector to the next. Since the amount that we move in either direction is greater than or equal to zero, we need our difference to be non-negative. We can guarantee this by simply taking the absolute value. Therefore, our differences are |x1 - x2| units horizontally and |y1 - y2| units vertically, for a total of |x1 - x2| + |y1 - y2| units; this is exactly Manhattan distance between the two vectors.
Note: You will also come across the Manhattan distance under other names. For example, taxicab metric and L1 norm are common alternatives.
",
120,What else can we do with the matplotlib pie chart?,"FAQ,Python FAQ",q-a,3,"
Question
In the context of this exercise, what else can we do with the matplotlib pie chart?
Answer
For the matplotlib pie chart, you can set several parameters to change its appearance.
One parameter you can set is the labelDistance, which sets the radial distance that the labels are drawn from the wedges. By default this value is 1.1.
Another useful parameter is the startangle, which rotates the start of the pie chart (the top of it) by the angle degrees counterclockwise from the x-axis. For example, a value of 90 would rotate the pie chart 90 degrees counterclockwise.
In addition, you can set a colors parameter to set the color of each wedge manually. You can provide a list of colors, and if the number of colors in the list is less than the number of wedges, it will cycle through them. For example, you can set it like plt.pie(colors=[""red"", ""blue"", ""green""], ...).
Another useful parameter is the explode parameter, which can be used to set the wedges to be some distance from the center of the chart, by providing one value per wedge. This essentially makes the wedges stick out of the pie chart.
","
Thankyou for providing such useful knowledge @jephos249.

Hi! I notice the texts on the pie chart is a bit hard to see compared to the size of the pie chart. How can we change the font size of the labels and percentage on the chart?
Thank you!
"
121,"If we run .split() without an argument, what happens to consecutive whitespaces?","FAQ,Python FAQ",q-a,6,"
Question
In the context of this exercise, if we run .split() without an argument, what happens to consecutive whitespaces?
Answer
When you don’t provide an input argument for .split(), the function will treat consecutive whitespaces as though they are a single separator.
For example,
string= ""a a  a   a""
words = string.split()

print(words)
# ['a', 'a', 'a', 'a']

If instead, we ran this with an argument of a single whitespace character "" "", the result would be different, because we are splitting between every whitespace character, even resulting in some empty characters in our list.
string = ""a a  a   a""
words = string.split("" "")

print(words)
# ['a', 'a', '', 'a', '', '', 'a']

","



 jephos249:

resulting in some empty characters


To get the following […, "" "", ‘a’ …] shouldn’t there be a space before and after this "" "".

You wouldn’t get spaces after splitting on spaces

I’m not sure I understand the solution to this question. Why would string.split("" "") and string.split() return different outputs? Isn’t the delimiter for both of them a single whitespace character?

No, string.split() without a separator argument treats conseutive whitespace as a single seprator. This is different to a specified separator in which they aren’t treated as a group (first one is in a sequence of seprator values is split and the others would retturn empty strings).
""a    b"".split()  # Four consecutive whitespaces
# returns ['a', 'b']
""a    b"".split("" "")
# returns ['a', '', '', '', 'b'] 

""a,,,,b"".split("","")
# returns ['a,,,,b']
""a,,,,b"".split("","")
# returns ['a', '', '', '', 'b']

The documentation explains this in a more detail-
https://docs.python.org/2/library/stdtypes.html#str.split
https://docs.python.org/3.8/library/stdtypes.html#str.split

Probably you wanted to write :
""a,,,,b"".split("" "")
# returns ['a,,,,b']

and for those who did not understand the example like i didn’t: it returns exactly the same string beacause it hasn’t found any white spaces to use to separete this string ""a,,,,b"".
And in the second example with 3 epmty strings, it is so because they are between four spaces.
The example from documentation that explained it to me is this:
>>> '1,2,3'.split(',')
['1', '2', '3']
>>> '1,2,3'.split(',', maxsplit=1)
['1', '2,3']
>>> '1,2,,3,'.split(',')
['1', '2', '', '3', '']

Hope it helped.
"
122,What is self?,"FAQ,Python FAQ",q-a,3,"
Question
What is self?
Answer
self’s purpose may not seem very obvious at first, especially if you’ve never used an object-oriented programming language before!
Try to imagine a class named Car that has the basic structure that all cars share in common. It defines a basic acceleration behavior, but not how fast it accelerates or what the max speed is, as that varies from car to car. It defines a start method, but not the specifics of how it starts, as that varies as well.
Now imagine that we’ve created Car objects of all the models we can think of. So now we have a mustang object, a tesla_model_x object, etc. Upon creation we can now specify how a particular model accelerates or starts. Inside of our Car’s __init()__ method we use self to refer to the current car model so we can assign values like top speeds and whatnot.
","
Doesn’t the name refer to the current car model as well?  What am I missing?




 dylatron:

refer to the current car model as well?


The current car model is one attribute of the car instance. self refers to the instance in context scope, that is the current instance, i.e., the instance upon which the call is made.
my_car = Car('Toyota Corolla', 'crimson', '88')

When we access the attributes or methods of this instance, self becomes my_car so that this instance is the context.
my_car.model
my_car.color
my_car.mpg
"
123,What is a float?,"FAQ,Python FAQ",q-a,12,"
Question
What makes a number a float?
Answer
Float is short for floating point and consists of the real numbers. Unlike integers, which can only be whole number values, floats can be any number in between, like 1.5, 3.14, etc. And Python is smart enough to know that any time you put a period in a number to convert it to floating point, so you may see numbers like 70. In future lessons, which is the same as writing 70.0.
","
Hi!
I am having a problem with printing float numbers. Here is the part of the code:
def F(x):
  return 1/(x)

for i in range(-10,11):
  if i == 0:
    print 0, F(0.0000001)   #to avoid dividing by zero, yet getting something ""realistic""
  else:
    print i,  F(i)

And it prints the following:
-10 -1
-9 -1
-8 -1
-7 -1
-6 -1
-5 -1
-4 -1
-3 -1
-2 -1
-1 -1
0 10000000.0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
So far, I have tried the following:

{].format(F(x))  = prints just more zeros
float(F(x)) = prints 0.0 instead of 0
describve range() as float = gives error message (expected range, get float instead)

The function prints the value correctly if I describe it as: F(3.) instead of F(3) (=0). So the function is fine, but the printing is tricky.
Thank you for help!




 aquatiqesper:

And it prints the following:


okay, that is the output you are currently get. What is the desired output?



 aquatiqesper:

float(F(x)) = prints 0.0 instead of 0


this won’t work, the rounding down has already occurred, so you only cast to float after the fact. The division itself should involve a float then

Hi!
I hope to get F(x) more accurately than 0. Perhaps 2-4 decimals. The format (table like printing) is already fine

.format() supports control over the amount of digits you want to print. I don’t see the problem? You might want to ensure that F function returns a float (that the result of the division is a float, not a integer)
python2 will round down to the nearest integer if the division involves two integers, however, if the division involves a float then python won’t floor (round down)

I believe that the function does not return the value as float, because with .format() problem does not disappear. Thus, I have to change the F(x) somehow.
Thank you!




 aquatiqesper:

I believe that the function does not return the value as float, because with .format() problem does not disappear. Thus, I have to change the F(x) somehow.


i believe i mentioned that twice indeed:



 stetim94:

You might want to ensure that F function returns a float (that the result of the division is a float, not a integer)





 stetim94:

this won’t work, the rounding down has already occurred, so you only cast to float after the fact. The division itself should involve a float then



Sorry! I misunderstood one of your comments.
Anyway, the problem solved by adding a line as follows:
def F(x):
x = float(x)
return 1/x

why cast x to a float? I would simply use 1.0, then you also have a float

Because this is a part of “bigger” code I try write piece by piece. I test each function, class, etc. separately and then add them together - one by one. x is the variable in here and “1” is 1 for simplicity. Number one will be replaced by another value from another function later on. Of course I will test it, if I need to separately define x as float in the ready code but now it is easier to control (as float).
I hope this explanation makes sense.

you could consider 1/float(x), anyway, if you write bigger code i would recommend following naming convention:
https://www.python.org/dev/peps/pep-0008/
so then function name would be for example hello_world (preferable) or helloWorld is also okay. Function names should be more descriptive then a single letter.

Thanks! I read the file and I will follow it.
"
124,Why is total_cost a float?,"FAQ,Python FAQ",q-a,15,"

Numbers

Question
If cucumbers isn’t a float, how did total_cost end up being a float?
Answer
When we do math between an integer and a float, the result will always be a float. This is a good rule to keep in mind because it can cause unexpected and incorrect values if you try dividing two integer values that are not evenly divisible. The simple solution is what we’ve done in this exercise: convert one of the involved numbers to a float so that the result becomes a float.
Take a look at these examples:
my_float = 70.
float_2  = 70.0
my_int   = 70

float_result   = 70 / 2.0
float_result_2 = 70. / 2.0
float_result_3 = 70.0 / 2

int_result = 70 / 7

Try running that code and printing the values. Were the results as you expected?
","
At Numbers, section 9/14 in the first part of learning Python, I was fine with instructions 1-3 but got stopped on #4, ""Print out total_cost. What datatype is it?""
Usually there is a hint available to concisely explain what to do, but not in this case.
What is wrong with my code? and where did I miss the instruction?
1 cucumbers = 1
2 price_per_cucumber = 3.25
3 total_cost = cucumbers * price_per_cucumber
4 print “total_cost”

Please include a link to the exercise that this relates to. The example given has no context.
Python 2 division quotient is dependent on data types of the operands. If both are integer, the quotient is integer. When one or the other, or both are floats, the quotient is a float.
7 / 3  =>  2

7 / 3. => 2.3333333333333335

From a standpoint of explicitness in readability,
float(7) / 3  => 2.3333333333333335

Python 3 has removed this conditional treatment of quotients by making all quotients a float, by default.
5 / 2  => 2.5

If an integer is the intended result, then explicit casting is required…
int(5 / 2)  =>  2




 dersness:

print “total_cost”


If the intention is to print the value referred to by the variable, total_cost then leave off the quotes. The above is outputting…
total_cost

rather than the expected,
3.25

>>> cucumbers = 1
>>> price_per_cucumber = 3.25
>>> total_cost = cucumbers * price_per_cucumber
>>> print total_cost
3.25
>>> type(total_cost)
<type 'float'>
>>> 


There it is. I was unnecessarily employing quotes. Thank you.

A post was split to a new topic: Multi-Line strings




 mtf:

type(total_cost)
<type ‘float’>


syntax error on <type ‘float’>
unfortunatelly

<type ‘float’> is the output of type(total_cost), <type ‘float’> shouldn’t be ran as code

At section 9/14 for Python Syntax, I’m stuck as to why #4 isn’t shown as completed.
cucumbers = 93
print ""Number of cucumbers: "", cucumbers

price_per_cucumber = 3.25
print ""Price per cucumber: "", price_per_cucumber

total_cost = cucumbers * price_per_cucumber
print ""Total: "", total_cost

type(total_cost)
print type(total_cost)





 thechristianjedi:

type(total_cost)


That line is unexpected, probably, and should be removed.
Whenever you see code written like this,
>>> type(total_cost)
<type 'float'>
>>> 

it means the command was entered directly at the interactive console, and the interpreter responds immediately. In a code statement we need to assign expressions such as this, or print them.



 thechristianjedi:

print type(total_cost)


That should output what you expect.

A post was split to a new topic: Use print to print total_cost

A post was split to a new topic: Shopping trip

Why should I write “print” before “total_cost”?

The only reason would be so we can see the outcome displayed on the screen.

"
125,How does float( ) work?,"FAQ,Python FAQ",q-a,14,"
Question
How does float() turn my number into a float?
Answer
float() is a built-in function, so Python comes by default with this ability to convert to float. To use it, we simply write a number or string inside of the parentheses, like this:
float(10)
float(“100”)

You’ll get errors if you try to use it any other way. It cannot be used as below:
10.float()            # invalid
float() = my_integer  # invalid

To see a list of all built-in functions available in Python 2, take a look at this documentation page!
","
9 posts were split to a new topic: Cucmber logic

Ah.  Okay, thank you.  That explains it.

Can i write float like this
Variable name = float(100.)/6 if  not can u guys explain me how should  i. correct this

100. is a float, converting that to float would be super-unnecessary
Nobody but you can correct that, because only you know what you meant by it.

Can i write float like this
float_cucumbers_per_person = cucumbers ./num_people
if not can you guys please explain that for me? thanks

Can you? Yes. Would you?, not likely, unless it is in the command line. Python 3 has made this question moot since all evaluations result in a float unless explicitly stated otherwise. No fudging or casting required. Now it’s the other way around for integers.
As I understand it, floor division is the same in both versions. This will need testing…
1 // 1    =>  1
1.0 // 1  =>  1.0
1 // 1.0  =>  1.0

i tried to use it with a variable like float(cucumbers) and tried to print it, the value inside the cucumber was also a whole number only, this i supposed will turn my data entered in it to as float, but thats not what it did, it returned me just the whole number only.
so can the float function only be used with the numerals and not with the variables,
cucumbers=6
float_cucumbers_per_person=float(cucumbers)/num_people
#this worked fine, but not this one
float(cucumbers)
print(cucumbers)




 prajvalsingh:

so can the float function only be used with the numerals and not with the variables,


Seems odd behavior. Cannot reproduce in Python 3.
>>> float(1)
1.0
>>> a = 1
>>> float(a)
1.0
>>> 

>>> 1.
1.0
>>> a.
SyntaxError: invalid syntax
>>> 

Above we see that the function works fine with either number or variable (assuming a number is at the other end). What we also see is that the shorthand syntax only works on numbers, and not on variables. Just tossing this in.

float(n) doesn’t turn n or the value it refers to, into a float
it creates a float
the only thing float at all does with its argument is to look at it, you get the result as the return value
variables have nothing to do with it, because values are not aware of what is or isn’t referring to them
and values can’t in some way restructure themselves to be something else. If you have a list then that will forever remain a list
if you want to change what a variable refers to, use assignment:
a = float(a)

This gives me a correct float answer (that being 16.6666666667) when i print:
float_cucumbers_per_person = float(cucumbers)/num_people
This also gives me the correct float answer:
float_cucumbers_per_person = cucumbers/float(num_people)
Why does putting both variables in the float function like this give an incorrect float answer (16.0)? :
float_cucumbers_per_person = float(cucumbers/num_people)
What exactly is happening so i can understand it better?

if the division involves two integers, python will floor (round down) the result. Casting to float after the rounding down will not give the desired output (giving rounding down has already occurred), which is why you cast one of the two numbers to float, so the division involves a float and the rounding down doesn’t occur

In python 3 there is only one type of division. Every time it gives float value.

Please be careful with your phrasing. “normal” division (/) will always give a float value, but python3 also has floor division (//) which will give an integer. So there are multiple types of division.
"
126,What is a Standard Deviation?,"FAQ,Python FAQ",,6,"
Question
What is a Standard Deviation?
Answer
Standard Deviation is a term used in Statistics to tell how much a set of values is dispersed.
The value of the Standard Deviation is equal to the square root of the Variance, which is used to tell how much a set of numbers are spread out from the mean value.
To obtain these values, let’s take a step-by-step example. Let’s say we had some values representing heights of objects in centimeters.
heights = [120, 130, 180, 120, 100]
First, we calculate the mean, or average, of this data set.
mean = sum(heights) / 5
# 650 / 5
# The mean is 130 

Next, we must get the “difference of each element from this mean, square each difference, and obtain the sum”.
# First, get difference of each value from the mean
# 120-130=-10, 130-130=0, ...
differences = [-10, 0, 50, -10, -30]

# Next, square each difference 
squared_differences = [100, 0, 2500, 100, 900]

# Finally, get the sum of these squared differences
sum_of_squared_differences = sum(squared_differences) # 3600

Finally, we divide this sum of squared differences by the number of elements, to get the Variance. The Standard Deviation is then the square root of this value.
variance = sum_of_squared_differences / 5 
# The variance is 720

standard_deviation = math.sqrt(variance)
# 26.83

What the Standard Deviation also can help us understand is how much data can be seen within ranges of values. In a normal distribution:
68% of the data lies within 1 Standard Deviation of the mean,
(130 - 26.83, 130 + 26.83)
95% of the data lies within 2 Standard Deviations of the mean,
(130 - (26.83 * 2), 130 + (26.83 * 2))
and approximately
99.7% of the data lies within 3 Standard Deviations of the mean.
(130 - (26.83 * 3), 130 + (26.83 * 3))
","



 jephos249:

set of numbers in a set


Beg to question the terminology. In programming a set is discrete. A sample space on the other hand need not be discrete at all, or sorted. It’s from this we get frequency tables, medians (sorted), modes, mins, maxs and means.

Thanks for pointing that out! Didn’t mean to specify it as an actual set of discrete items as used in mathematics, so it was a miswording on my part.

That’s cool!. Hope I haven’t trampled…

Not at all! Any feedback and insight on the posts are much appreciated.

To really get a picture of what standard deviation is, we need to examine the curve that it is directly related to, the standard normal curve. We know that any function or relations can be graphed, and this one looks like a bell; ergo, it is commonly known as the bell curve.
The x-axis is arbitrarily broken into eight segments, but as this is theoretical, the last segment is a limit. It can never equal or be less than negative four, and it can never equal of be greater than four. If we call this arbitary value z we can write,
{z | -4 < z < 4; z is Real}

When we line up our sorted sample in row, they all correspond with a z-score which directly corresponds with a point on the curve (either side of the mean).
The bell curve is how a lot of universities grade. Pity the ones who end up ranked less than the peers they are equals of.
"
127,What is the difference between a class variable and instance variable?,"FAQ,Python FAQ","classes,q-a",4,"
Hello! I am curious about something. In a previous lesson we learned to create a variable and then we can call it later with the object.variable syntax. Here it seems that you can skip the creating a variable step and simply put the object.variable = value syntax which does both of the previous steps in one. Am I correct in my observations?
","
I had the same question until I realised I confuse a “class variable” with an “instance variable”. They are not the same thing:
CLASS VARIABLES:
A class variable needs the ""creating a variable step "" as you call it, in the intended block of the Class. If it is called later by any object using the syntax object.variable, it will yield the same data for every instance/object of the class.
INSTANCE VARIABLES:
Although an instance variable uses the same attribute notation used for accessing class variables (object.variable ) it does so in order to assign data to the object. The data now is not shared by all instances of the class, they re specific to the object they are attached to.




 stellakats:

ances of the class, they re specific to the object they are attache


nice explanation. Similar to Java, although in Python one must not define the instance variable inside the class

Crystal clear explanation for the difference. Thank you!
"
128,Why would we want to change bit strings with bitwise operators?,"FAQ,Python FAQ",q-a,2,"
Question
Why would we want to change bit strings with bitwise operators?
Answer
The use cases for bit strings are far and wide, but they’re super common in networking problems. Without going into any particular example, a general use of bit strings, including flipping each bit, is to check the output of a bit string compared with another bit string to perform some action for each bit.
For example, if we compare two bit strings and see that the result is 0101 0000, that might tell your program to perform a particular action. It’s a very powerful tool to have because with just those 8 bits, we can have a total of 2^8 possible operation codes!
","
That “answer” is about as useful as teats on a boar hog.  
"
129,Do these methods affect special characters?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, do these methods affect special characters?
Answer
No, the methods in this exercise, .lower() .upper() and .title() will not affect special characters, which are any non-alphabetical and non-numeric characters. These methods will only apply to case-based characters, which include essentially all the alphabetical characters.
When applying these methods to strings with special characters, they will be treated similarly to how they apply to whitespace characters, which is also a type of special character, and one you might be familiar working with.
For example, here is how .title() would work for a string with some special characters,
string = ""hello-world#!""
titled = string.title()

print(titled) # Hello-World#!

As we can see, each word, separated by a special character, was capitalized.
",
130,What is each type of plot used for?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this lesson, what is each type of plot in Seaborn used for?
Answer
KDE Plot
KDE plots are used to get the probability density of a random variable. Like histograms, they are used to show us the distribution of a dataset. However, they provide a smoother visualization than histograms. The area under any two points in a KDE plot is the probability that a value falls between those two points.
Box Plot
Box plots tell us how a dataset is distributed. They show us the range of all the values in the dataset, and provide us a clear visualization of the five number summary, by including the first quartile, median, third quartile, outliers and the minimum and maximum, which may or may not be outliers.
Violin Plot
These are similar to box plots, but also show the KDE of the dataset on the plots, in addition to the interquartile range and median, within a 95% confidence interval. Because these show a lot of information, violin plots are used quite often.
",
131,Using print() without concatenation?,"FAQ,Python FAQ","python-syntax,q-a",4,"
When printing the final product [print(“The total price is”, total_price)], there is a space between “is” and the numeric value of total_price.  Why is this?
","
First of all, welcome to the community!
As for your query, “,” acts as a separator between two parameters by giving a “space”.
For e.g.,
a = ""apple""
b = ""mango""
print(a, b)

will give the following output:
apple mango

It also saves time, but string concatenation using “+” gives you more control for output formatting.
If you want to use “+” operator, you have to write as:
total_price = 0

new_sneakers = 50.00

total_price += new_sneakers

nice_sweater = 39.00
fun_books = 20.00
# Update total_price here:
total_price += nice_sweater + fun_books
print(""The total price is "" + str(total_price))

NOTE: You cannot simply write print(""The total price is "" + str(total_price)), as “+” operator only concatenate strings.

I want to clarify, that the reason there is a space is that print() has a few arguments, but only the first is required. For our purposes print(*objects, sep=' ') is what’s relevant. Which is any number of object arguments, and a keyword argument for the separator. If no separator is defined, the default value is a space, which will be placed in between each object as is done here.
You can absolutely write print(""The total price is "" + str(total_price)) as the str() function happens before concatenation so you adhere to the rule of only concatenating strings.

Very important tip., thank you for sharing!
"
132,How is continue different from break?,"FAQ,Python FAQ",,7,"
Question
How does the behavior of the continue statement differ from the break statement?
Answer
The continue statement interrupts the execution of a loop and causes the loop to start the next iteration. Any code following the continue is not executed but the loop will continue on starting with the next iteration. The break statement will terminate the execution of the loop. No further code in the loop will execute and the program will resume execution at the next statement following the end of the loop.
In the following code example, if the counter is an even number, a continue statement is used to skip printing the number and continue to the next number. An if statement checks if counter has reached 19 and then uses a break to stop the execution of the loop. This code will print the odd numbers from 1 through 17.
counter = 0
while counter < 100:
    counter += 1
    
    # If number is even - skip to next
    if counter % 2 == 0:
        continue

    if counter == 19:
        break
        
    print(counter)

","
Thanks,Well explained!

Whether continue and break must be used with if.

Im unable to see the point of using “continue”
is it not just easier to us this formula?
for age in ages:
if age >= 21:
print(age)

Hi, there
Exactly what I did 
But I think this is just an easy task to use ‘continue’.

What if you break at 20? Does continue skips break in this case?
counter = 0
while counter < 100:
    counter += 1
    
    # If number is even - skip to next
    if counter % 2 == 0:
        continue

    #since continue skips even numbers, does that mean this break will be skipped too, and it will continue to print odd numbers after 20?
    if counter == 20:
        break
        
    print(counter)





 web6501703079:

Does continue skips break in this case?


Yes, because it is even so the loop continues in the line above it. This can be fixed by testing for 20, first, then test for even parity. You may as well print the counter when you increment it.
"
133,Why does `(not True == False)` work but not `(True == not False)`?,"FAQ,Python FAQ",,8,"
Question
In Python, why would this work,
(not True == False)
but not this?
(True == not False)
Answer
The reason for this is mainly due to the order of operations in Python.
The not operator has a lower precedence than the comparison operators such as ==, !=, <, >,  <= and >=.
As a result, in this expression, the == operator will be evaluated first, before the not is evaluated. Because of this, it will try to compare True == not first, which would not work and would cause an error.
Example
# True == False is evaluated first.
# Then the result will be reversed with 'not'.
not True == False # True

# This would not work.
# It will try to evaluate 'True == not' first, which is not valid.
True == not False

","
I look at it as the not is evaluating the whole Boolean, not just one side.
so not True == False would be looked at as:

not (True == False)
not (False)

answer: True

Exactly correct, but the point of bringing in  operator precedence is to explain why
True == not False
… raises a SyntaxError.

Assignment is the only time that comes to mind where we can combine operators.
+=, -=, *=, &c.

     == not

Those two operators cannot appear without an operand between them.

Just because it hasn’t been mentioned, the code can be fixed with parentheses:
True == (not False)

And as suggested this is because of the order of operations.

But the below works:

print(True == (not False))


Hi,
The solution has … and not (credits >= 120) which is fine. But I wrote … and (credits < 120) which I also think is correct. I try not to tie my brain in NOT’s when I can help it.

I did just that initially without worrying about the Not operator. But later realized the lesson was on the Not operator and that I was expected to use the Not operator. lol
"
134,What is mod short for in math?,"FAQ,Python FAQ",,13,"
Question
What is mod short for? Particularly when written X mod Y?
Answer
mod is short for modulo, a math function that means to get the remainder of division. It is represented with a % in python and written X % Y this can be read as X mod Y or X modulo Y.
It is used to get the remained from a division. For example:
15 % 4 = 3
>> 15 / 4 = 12 with remainder 3

For some further studying, see the Codecademy Python 3 modulo exercise.
","
I’m in the Lots of Math part of Python Functions. It’s the last screen before you complete the lesson.
It is asking me to “return the third number printed mod a.” What exactly is this asking me to do?

I had the same question. Mod is short for modulo, which is the % thing.

Mod means a lot for some of us, can be modules, modifications, moderations so fix this exercise asap because its confusing.

Finally, it should  return  the third number printed mod  a, this is a poorly written step, whoever wrote this exercise, please, get down to our level, I know you are an expert, but this is the first time I learned about this word “mod” , this exercise is confusing! you can do a better job




 objectpro66930:

Mod means a lot for some of us, can be modules, modifications, moderations so fix this exercise


Whilst the confusion is unfortunate, modular arithmetic is a mathematical system which existed long before the computer did.
The use of mod in this fashion is not confined solely to programming, nor to Codecademy’s material; it’s mathematics, so you’ll just have to get used to it I’m afraid. 

Terrible response from the Help Desk! Why make this more difficult by throwing in jargon that most don’t know. You could have easily left “mod” out and asked to return the remainder of ‘a’ and this thread wouldn’t exist!




 cseby2000:

Why make this more difficult by throwing in jargon that most don’t know.


Programming is difficult, and learning by its very nature is going to involve a lot of things which are “unknown”. A good amount of your time, as a programmer, will likely be spent looking for information and learning about things you have either a) not seen before and/or b) don’t fully understand.
An example would be the use of mod in this context: you saw it, didn’t understand it, and went looking for more information to help you make sense of it before ending up here. This is a process with which you should become familiar. 



 cseby2000:

You could have easily left “mod” out and asked to return the remainder of ‘a’ and this thread wouldn’t exist!


I can only presume, as I do not have access to the specific exercise (since I am neither a Pro member nor a Codecademy employee), that since this exercise deals specifically with the modulo operator that the specific statement of a mod b is intended to prompt the use of the % operator you have been learning about. It also introduces you to the notation. 
Otherwise, if the exercise simply asked for a remainder, you might derive some alternative mechanism for calculating it when a single operator is sufficient.

I agree with the prior response that this was a poorly written exercise.  This is not the first time I’ve had trouble with the instructions.

In any programming exercise, reading the instructions is crucial. It is clear enough to see what is coming in return for me.
def lots_of_math(a, b, c, d):
print(a + b)
print(c - d)
print((a + b) * (c - d))
return ((a + b) * (c - d)) % a

Came here bc I was confused, and saw I wasn’t alone!  I if there were a previous example explained with this verbiage, I would have known what to do.

Up until this point in the exercises % was always referred to as modulo so if they suddenly change how they refer to % it they should at the very least have an explanation in the hint if not in the actual instructions.




 thecodingbean:

so if they suddenly change how they refer to % it they should at the very least have an explanation in the hint if not in the actual instructions.


I think the lesson designers have assumed that, given the entire exercise revolves around the use of the modulo % operator that you’ll be able to infer that “mod” == “modulo”.
The confusion is unfortunate, for sure, but I don’t think it’s that great of a leap to make. Besides, in the event that is is confusing there is the secondary benefit of getting you used to going looking for answers on your own. There will not always be someone (or something) around to give you a hint or hand you the solution, and being able to successfully figure things out on your own is a useful skill.
"
135,What does univariate and bivariate mean in more detail?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, what does univariate and bivariate mean in regards to datasets?
Answer
Univariate
Univariate datasets are essentially one-dimensional datasets, which have only one variable. For example, a dataset with Temperatures.
These types of datasets are used for distributions, which you may have worked with in the other lessons using histograms.
When plotting univariate datasets, KDE plots are usually preferred over histograms, because they do not use bins, and have a smoother and more accurate curve.
Bivariate
Bivariate datasets are two-dimensional datasets, having two variables. For example, we may have a dataset with the variables: Temperature and Amount of Ice Cream Sold. The variables can be dependent on each other, or they can even be independent from each other.
Usually, we use bivariate datasets to determine if there is a relation between the two variables. We typically visualize this using scatterplots, which are used to determine associations between the values.
",
136,Where am I supposed to write this elif to check if the coordinate has already been guessed?,"FAQ,Python FAQ",q-a,5,"
Question
Where am I supposed to write this elif to check if the coordinate has already been guessed?
Answer
Our code to this point (in pseudo code) looks like the code below. We want to insert an elif that checks if their wrong guess was one they’ve already made before.
if guess is correct:
  print “Congrats! You sunk my ship.”
else, not correct:
  if guess is invalid:
    print “Not in the ocean”
  # ELIF GOES HERE
  else, just missed:
    print “Missed!”
    update element in board to be “X”
  print the board

You cannot have an elif without an if before it, so writing it after an existing else would be invalid, because else must be last. Be especially careful with your indentation as well, as the new elif should be on the same indentation level as the if that checks for the guess being invalid.
","
2 posts were split to a new topic: What Does This Code Do?

Does an elif statement really need to have the condition in brackets? I just tried it without and it was still fine.

jjhiggins97 i don’t think they are even supposed to be in brackets lol. I’m pretty sure you write the condition without brackets, but Python knows its a condition since you put a colon ("":"") after it.

Yeah, brackets are used for making debugging easier. They don’t help with the program, just are there for neatness.
"
137,Why am I getting an indentation error?,"FAQ,Python FAQ",q-a,4,"
Question
Why am I getting an indentation error?
Answer
If you’re seeing an error message that says something about an IndentationError it means you have code that isn’t indented properly somewhere. Remember, Python uses indentation (2 spaces per indentation on Codecademy) to determine blocks of code.
If you’ve written a return statement outside of a function (not indented inside to be inside the function), that will give you this error. For example:
def my_function():
  print ""Hello!""
return 0  # This is a return outside of any function!

","
so according to codecademy on
https://www.codecademy.com/courses/learn-python/lessons/lists-and-functions/exercises/using-an-element-from-a-list-in-a-function
def list_function(x):
return x[1]
n = [3, 5, 7]
print list_function(n)
gives me the first result in the list and …
def list_function(x):
return x[0]
n = [3, 5, 7]
print list_function(n)
is the wrong answer even though we all know [0] accesses the first element in a list

The exercise isn’t asking for the first element of the list. It is asking for the element at index one i.e. the second element of the list. Remember indexing in python starts at 0.

Thanks for the reply. Codecademy can be confusing to me sometimes with the way things are worded.
"
138,"Zip creates an iterator, how can we turn that into a dictionary?","FAQ,Python FAQ","lists-dictionaries,q-a",15,"
why the dictionary is empty when i execute this lines of code?
drinks = [""espresso"", ""chai"", ""chai"", ""drip""]
caffeine = [64, 40, 0, 120]
zipped_drinks = zip(drinks, caffeine)
print(""Zipped drinks "",list(zipped_drinks))
drinks_to_caffeine = {key: value for key, value in zipped_drinks}
print(""Drinks to caffeine dictionary "",drinks_to_caffeine)

output:
Zipped drinks  [(‘espresso’, 64), (‘chai’, 40), (‘chai’, 0), (‘drip’, 120)]
Drinks to caffeine dictionary  {}
","
The object zipped_drinks is an iterator. It is characteristic of an iterator, that you have one go at it: after you have iterated through it one time, it cannot be re-used.
So, when you call print(""Zipped drinks "",list(zipped_drinks)), the iterator zipped_drinks is exhausted by providing the printable list to the print function.
Solution:  Either comment out the first print() function, or assign the list to a variable and call print() and the dictionary comprehension on the variable.
drinks = [""espresso"", ""chai"", ""chai"", ""drip""]
caffeine = [64, 40, 0, 120]
zipped_drinks = zip(drinks, caffeine)
drink_list = list(zipped_drinks)
print(""Zipped drinks "",drink_list)
drinks_to_caffeine = {key: value for key, value in drink_list}
print(""Drinks to caffeine dictionary "",drinks_to_caffeine)

# Output:
Zipped drinks  [('espresso', 64), ('chai', 40), ('chai', 0), ('drip', 120)]
Drinks to caffeine dictionary  {'espresso': 64, 'chai': 0, 'drip': 120}


Hi
How would we know id a defined object is an iterator?
Zipped_drinks was defined to hold value from 2 lists. Shouldn’t such an object be usable any number of times in its scope?


As per your explanation, printing out zipped_drinks twice does confirm your answer.
But how do we identify such objects in the code.
On first look it didn’t seem like a iterator ( more so if I don’t intend to use in in loops )


Does this apply to range objects as well?


Why is this so in Python?


print(""Zipped drinks "",list(zipped_drinks))
print(""Zipped drinks "",list(zipped_drinks))

output
Zipped drinks  [('espresso', 64), ('chai', 40), ('decaf', 0), ('drip', 120)]
Zipped drinks  []





 rdb20:

But how do we identify such objects in the code.


The most commonly used functions in Python 3 that return iterators (which is what we are discussing here) are:  zip(), enumerate(),  reversed(), map(), filter().  It seems to be the trend to return iterators, as some of those returned lists in Python 2;  be on the lookout for more in future versions.  I don’t know of any way to recognize which functions return iterators, except of course, by reading the docs or other instructions on their use.



 rdb20:

Does this apply to range objects as well?


Technically, range() is not an iterator. range can be “examined” in ways that iterators cannot:
my_range = range(5)
print(len(my_range))
print(my_range[3])
print(3 in my_range)
print(list(my_range))

Output:
5
3
True
[0, 1, 2, 3, 4]

Now let’s try it with a true iterator, say, the output of the enumerate() function:
my_list = ['a','b','c']
my_enumerate = enumerate(my_list)
#print(len(my_enumerate))  # raises error
#print(my_enumerate[2])  # raises error
print((1, 'b') in my_enumerate)
print(list(my_enumerate))

Output:
True        #  yes, (1, 'b') is in my_enumerate ...
[(2, 'c')]         # ... but discovering this partially exhausted the iterator!




 rdb20:

Why is this so in Python?


I’m not sure - I’ve never seen an answer to this. Presumably, the iter and next functions that define iterators could be rewritten in such a way as to permit reuse.
My own theory of the  reason is that we would like functions to return the same output from a given input, but an iterator can be used to change the iterable which generated it.
my_list = ['a','b','c']
my_enumerate = enumerate(my_list)
for idx, element in my_enumerate:
    my_list[idx] = element + 'x'
print(my_list)

Output:
[‘ax’, ‘bx’, ‘cx’]
So, at this point, what should my_enumerate look like if it could be re-used???

There is a lot about this on the internet. There is one thread on Stack Overflow that maintains that it is only the iterator type called “generator” that is exhaustible. That, at least, is not true.
Here are some good references.
The Iterator Protocol: How “For Loops” Work in Python
Iterables, iterators and generators, oh my! Part 1
Python: range is not an iterator!

My code:
drinks = [""espresso"", ""chai"", ""decaf"", ""drip""]
caffeine = [64, 40, 0, 120]
zipped_drinks = zip(drinks, caffeine)
print(tuple(zipped_drinks))
drinks_to_caffeine = {drinks:caffeine for drinks, caffeine in zipped_drinks}
print(drinks_to_caffeine)
>>>
(('espresso', 64), ('chai', 40), ('decaf', 0), ('drip', 120))
{}

Why is the dictionary empty when I print it? My response was correct according to the site, but did I not actually make a dictionary?

This prints fine…
drinks = [""espresso"", ""chai"", ""decaf"", ""drip""]
caffeine = [64, 40, 0, 120]
zipped_drinks = zip(drinks, caffeine)
#print(tuple(zipped_drinks))
drinks_to_caffeine = {drinks:caffeine for drinks, caffeine in zipped_drinks}
print(drinks_to_caffeine)


I have a similar question as above!
I think the question is that why are we unable to print both the ‘zipped_drinks’ list and the ‘drinks_to_caffeine’ after list comprehension?

if I shift both prints to the end of the code, the ‘zipped_drinks’ list appears to be the one that is empty this time round.
Thank you for your time!

Tried it myself and saw the same thing. I did some research and it appears that you can only unpack a zip object once. Once it has been iterated, it is exhausted.
I guess making it into a list when printing it is using the zip object once. Then making it into a dictionary is attempting to use it twice. A site suggested making a separate variable that creates a list of a zip object and I tried that with this lesson and it worked, just a little extra work to see the printed list version of the zip.
This extra work isn’t necessary for the lesson, but helpful to see what your code is doing.
drinks = [""espresso"", ""chai"", ""decaf"", ""drip""]
caffeine = [64, 40, 0, 120]


zipped_drinks = zip(drinks, caffeine)
zipped_drinks_list = list(zip(drinks,caffeine)) #creating a separate variable that is a list version of the zip object

drinks_to_caffeine = {key:value for key, value in zipped_drinks}

print(list(zipped_drinks_list)) #print this new variable so that I don't exhaust the zipped_drinks object
print(drinks_to_caffeine)

If you Google “zip list be unpacked once” you’ll see a couple of helpful more in depth explanations.

There are too many steps here. Using the zip(), you can combine the 2 lists right into a dictionary. Using tuple and zipping more than once isn’t necessary. I am fairly new to python, but not programming, so what I gather Is that this is the fastest, most efficient way. And it works fine!
drinks = [""espresso"", ""chai"", ""decaf"", ""drip""]
caffeine = [64, 40, 0, 120]
drinks_to_caffeine = {drinks:caffeine for drinks, caffeine in zip(drinks, caffeine)}
print(drinks_to_caffeine)





 chiefyogiblak:

Using tuple and zipping more than once isn’t necessary.


It is only zipped once, but stored in a variable. Abstraction is not something that is easy to teach to a beginner so most lessons make use of intermediary or temporary variables to show that step in a more verbose manner.

Ah, I understand. I haven’t come across tuples yet so I didn’t understand them fully, but soon as I saw the code, I knew I could remove that and the variable and go straight to the dictionary comprehension. Which way is preferred in a real world setting?

I’m no expert on the real world setting and see nothing wrong with your code. In this setting we need to write code that is easy to read and follow, without abstraction in the early stages. Think ‘naive’ over elegant or intuitive. Being a programmer it will seem like a step back, but it can’t hurt to get a refresher and see things from a beginner’s view.

For sure! I sometimes go the naive way when trying to get a function down and then edit for specifics and efficiency later on.




 mtf:

drinks = [“espresso”, “chai”, “decaf”, “drip”] caffeine = [64, 40, 0, 120] zipped_drinks = zip(drinks, caffeine) #print(tuple(zipped_drinks)) drinks_to_caffeine = {drinks:caffeine for drinks, caffeine in zipped_drinks} print(drinks_to_caffeine)


I used this construction
drinks = [“espresso”, “chai”, “decaf”, “drip”]
caffeine = [64, 40, 0, 120]
drinks_to_caffeine = dict(zip(drinks, caffeine))
print(drinks_to_caffeine)
and it was right answer. Can I use it or I should to use constructions with “for”?

There is nothing wrong with using the dict() constructor, so long as other methods are apparent. It really depends what the exercise is expecting, but given freedom to choose our approach, any that work are fine.
"
139,Why are there two symmetric halves of a violin plot?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, why are there two symmetric halves for the violin plot? Do we have to count both?
Answer
Each half of the violin plot shows the same thing. We do not have to count both toward the data distributions.
The reason for the halves is essentially just for visual effect, which leads to the name since it is shaped like a violin.
As a result, removing one half will still let us read the data distribution. However, we must keep in mind the values in the axis, since each half is mirrored and will be in the reverse order of the other side.
",
140,How do I access the 2nd item in a list?,"FAQ,Python FAQ",q-a,3,"
Question
How do I access the 2nd item in a list?
Answer
Recall that lists start counting from 0, not 1! So if we want to access an item, we start as 0 for the index of the first item, and count our way up to the item we want.
In this case, we’re given a list n = [1, 3, 5], so the second element is 3, and has an index of 1.
","
if n=[1,3,5]
then Why is it wrong to type the code as print n[1:2] to print the second element in the list .
it is giving output as [3] instead of output 3

If you just want a single element from the list, why using list slicing?
Also, remember, lists are zero indexed based, so the first element is positioned at index 0
"
141,Why are my student dictionaries not accepted?,"FAQ,Python FAQ",,29,"
Question
Why are my student dictionaries not accepted?
Answer
There are a few common errors listed below:

Capitalization issues will prevent you from passing. Remember that Codecademy checks for exactly what the instructions ask for, so your variable names should be all lowercase, like lloyd, but their names stored under their ""name"" keys should be capitalized like a normal name, like ""Lloyd"".
Incorrect dictionary syntax will give you lots of errors! Remember that dictionaries are key-value pairs, and that each value except the last in the dictionary must have a comma after it.
The ""name"" key’s value does not go in brackets [ ], it’s just a string.

","
Can someone please explain what happens after running the code below:
students=[lloyd,alice,tyler]
def set_up(list):
  for x in list:
    x={}
    x[""homework""]=[]
    x[""quizzes""]=[]
    x[""tests""]=[]
    x[""name""]=str(x)[0].upper()+str(x)[1:len(str(x))]
  return x
print set_up(students)

I thought it might print out the dictionaries required to pass this exercise.

here:
students=[lloyd,alice,tyler]

you have a list with undefined variables.
How do you expect this to work?

First, fix the list:  students=[""lloyd"",""alice"",""tyler""]
Next: look at what you are doing here:
  for x in list:
    x={}

Each time around, the variable x is assigned one of the student names, say “lloyd”. Then, the same variable, x, is re-assigned the value: an empty dictionary. That student name is lost when you re-assign your iteration variable. You need something like:
  my_dict = {}
  for x in list:
    # do something here to make x a key in my_dict, whose value is an empty dictionary.

… maybe:
if not x in my_dict:
  my_dict[x] = {}

I’ii let you take it from there.

Thank you for your reply!
Makes sense. I’m really new at this so I may say and think stuff that are completely against python language. So a list must contain defined data, it cannot contain undefined variables. I should go check the exercise with lists again.




 patrickd314:

First, fix the list: students=[""lloyd"",""alice"",""tyler""]


how are we now going to the variables with the right names then? you need to end up with:
lloyd = {
  ""homework"": [],
  ""quizzes"": [],
  ""tests"": [],
  ""name"": ""lloyd"",
}


The lists and dictionaries exercise always used strings or numbers as list items. And then we worked from there - all of the items had their type defined.
students=[""lloyd"",""alice"",""tyler""] is making me feel uncomfortable because I have strings in my list.
How can I transform these strings into dictionaries? That is why I first wrote
students=[lloyd,alice,tyler] but now I understand why it won’t work. I have to rethink this…

you could do:
lloyd = {}
alice = {}
tyler = {}

students=[lloyd,alice,tyler]


Yes, that is the easy way for low number of students. I wanted to define a function that would create empty dictionary for each student.

The way the exercise works will not allow what you want, if you let go of the exercise requirements you get a lot more possibilities:
class School:
    def __init__(self, *args):
        self.create_student(*args)

    def create_student(self, *args):
        for arg in args:
            setattr(self, arg, {})
            student = getattr(self, arg)
            student['homework'] = []
            student['quizzes'] = []
            student['tests'] = []
            student['name'] = arg.capitalize()


the_school = School(""alice"", ""lloyd"", ""tyler"")
print(the_school.lloyd)


This looks way more classy, but is out of my league.
Loving the student['name'] = arg.capitalize() block. So much more elegant.
Thank you for your help, you just made me buy the Pro version, I love it here!




 stetim94:

lloyd = {} alice = {} tyler = {} students=[lloyd,alice,tyler]


I did as you suggested and then tried to define the function that would complete the task. I see I was trying to transform a dictionary to a string before which is a no no:



 samuelsonmarinho:

x[“name”]=str(x)[0].upper()+str(x)[1:len(str(x))]


Is there even a way to complete my function with my knowledge so far? I took it step by step from the beginning in Python 2 coding, never wrote anything else before.

yea, instead of a class use a dictionary:
def create_students(*args):
    students = {}
    for arg in args:
        students[arg] = {}
        students[arg]['homework'] = []
        students[arg]['quizzes'] = []
        students[arg]['tests'] = []
        students[arg]['name'] = arg.capitalize()
    return students

print(create_students(""alice"", ""lloyd"", ""tyler""))

again, this will not work with the exercise.

lol, apparently it can be. Nice to be proven wrong sometimes:
def create_students(*args):
    for arg in args:
      	
        globals()[arg] =  {
          'homework': [],
          'quizzes': [],
          'tests': [],
          'name': arg.capitalize(),
        }

        
create_students(""alice"", ""lloyd"", ""tyler"")
print(alice)

I would like to add a serious note to this code, its very very bad practice. I would much rather have the classes or dictionary solution.

I submitted my code which wasn’t excepted - when I pressed ‘solution’ I was just missing  in all but the names…item? (Sorry no idea what this is called officially).
What is ? What does it do? Why can an item thing not be left blank in a dictionary if you use a comma anyway?

This was the square brackets - not a square, obvsly!
Edit - is it because they are lists? Not item thingies?

here:
'homework': [],

you assign an empty list to homework, a student will get multiple homework grades, so you need a data type that can hold multiple values, a list can do this
on the other hand, a student name can just be represented as a string, what would be the value of using a list for the name?

Could someone please explain to me what I am doing wrong here?
lloyd = {“name”, “homework”, “quizzes”, “tests”}
alice = {“name”, “homework”, “quizzes”, “tests”}
tyler = {“name”, “homework”, “quizzes”, “tests”}
students = [name(“Lloyd”), name(“Alice”), name(“Tyler”)]

what are you trying to do?

I’m trying to print out the integer value for each student from the dictionaries. I’m very new at this so I don’t doubt a lot of it is wrong.
"
142,Is it possible to statically define a dictionary which contains another dictionary without using another variable?,"FAQ,Python FAQ",q-a,4,"
Question
In this exercise, one of the values in the library dictionary is set from the plays dictionary. Is it possible to statically define a dictionary which contains another dictionary as a value?
Answer
Yes, when you define the dictionary you simply define another dictionary inside the {} brackets. The following code example shows a population dictionary which contains dictionaries for each state that contains cities and population numbers.
population = {""California"": {""Los Angeles"": 3971883,
                             ""San Diego"": 1394928,
                             ""San Jose"": 1026908},
              ""Texas"": {""Houston"": 2296224,
                        ""San Antonio"": 1469845}
              }

","
looping through this to pull out information i am sure is possible but seems daunting.  Better to keep it simple and create several dictionaries?

Nested data structures are common. You should rise to the occasion (challenge? No idea, my english isn’t that good)

My melting brain is screaming “thiiiis wiiiilll beeee fuuuuun”
"
143,Can the data from the dictionary values() be used for thing other than iteration?,"FAQ,Python FAQ",q-a,1,"
Question
In this exercise, the results of the values() function are used in a for loop. Can the data friom values() be used in other ways?
Answer
The results from values() are not just for iteration. They can be used in any way that a list can. In the following example code, the values from a dictionary are passed to functions which can determine the minimum, maximum, and total values of the data.
cities = {""Los Angeles"": 3971883,
          ""San Diego"": 1394928,
          ""San Jose"": 1026908}

print(sum(cities.values()))
print(max(cities.values()))
print(min(cities.values()))

",
144,Can the get() method for a dictionary be used without assigning the result to a variable?,"FAQ,Python FAQ",,3,"
Question
In this exercise, the get() method return is assigned to a variable even if nothing is return. Is it possible to use the method without assigning the result to a variable?
Answer
Yes, you can use the get() method without assigning the result to a variable.  In that case, it would function more like an alternative to checking for a key using in. The following code example shows the use of the get() method as part of an if to check whether a key exists in the dictionary and then the same check using the more conventional in style. Both produce the same result - the print() function is called to report that “Data was not found”.
directions = { ""North"": 10, ""South"": 5, ""East"": 20, ""West"":40 }

if directions.get('NorthWest'):
    print(""Data exists"")
else:
    print(""Data was not found"")
    
if 'NorthWest' in directions:
    print(""Data exists"")
else:
    print(""Data was not found"")

","
2 posts were split to a new topic: Mistake in faq

5 posts were split to a new topic: Is there a way to lookup a value in a dictionary?
"
145,Can we only slice strings as a sequence of adjacent characters?,"FAQ,Python FAQ",,3,"
Question
In Python, is slicing strings limited to a sequence of characters adjacent to each other? Can we skip characters?
Answer
String slicing is not only limited to a sequence of adjacent characters, and you can skip character when slicing.
String slicing can utilize an optional third argument to specify a ‘step’ or ‘stride’ between each character as the substring is being constructed. By default, the step is 1. By changing the step, we can do some interesting things.
Example
message = ""MXeXeXtX XmXeX XaXtX XtXhXeX XpXaXrXkX""

decoded = message[0:38:2]

print(decoded)
# Meet me at the park

","
Even the spaces are taking indices in strings? right?

A blankspace is a character and each blankspace does indeed take up one position in the string, with a corresponding index.
"
146,Why and how are selecting python list indexes inclusive and exclusive?,"FAQ,Python FAQ",q-a,33,"
Question
In python, how are lists inclusive/exclusive when referencing the index? and why?
Or why do I need to use +1 to the index at the end of a selection in my list?
Answer
When selecting from a list in python, you may have noticed the saying ‘inclusive’ or ‘exclusive’, this is usually referring to the slice notation mylist[start:stop] where the start index is inclusive but the stop index is exclusive. What does this mean?
If an index is inclusive, then that number will be included in the selection, while an exclusive will not be. Say, for example, we have the following list and two list slices.
list = [0, 1, 2, 3, 4, 5]

list1 = list[:3] # [0, 1, 2]
list2 = list[4:] # [4, 5]

As you can see, the stop index of 3 is exclusive so the third index item (conveniently equal to 3)  is not selected in list1. On the other hand the 4 is included in list2 since that number is inclusive.
Now lets say you want to select something based on the index number, since you know what that is. We want our new list to include start and stop so lets see:
start = 1
stop = 3
list3 = list[start:stop] # [1,2]

Unfortunately, this doesn’t include our desired stop since it is exclusive, so how can we include it? by shifting the index up 1.
list3 = list[start : stop + 1] #[1, 2, 3]

Finally, you may be asking why the developers would have made it this complicated? The best explanation comes from looking at half-open intervals:
list[:3] #the first 3 characters
list[3:] #everything after the first 3 characters

I hope this all makes sense, please continue the discussion below and help each other out!
","
This section of challenges has been incredibly frustrating to me. I went through the making and modifying lists instructions twice because  I felt like I missed an entire segment of this lesson.
The language used to guide me through the code is very confusingly put. Maybe my brain is having trouble translating these problems into something that makes sense.
But for the life of me, I do not understand why the solution uses:
lst[end+1:]
I don’t understand why we are adding 1 to the end slice of lst. This function is made to output a lst with a specific set of indices and doesn’t seem to really work if using a different set of numbers.
Some clarity would be greatly appreciated.




 tarthurf:

I don’t understand why we are adding 1 to the end slice of lst.


def remove_middle (lst, start, end):

The name suggests that all elements, including the one at index position, end will be removed. Recall that list slices do not include the index at end, but stop just before that position. If we do not add 1 then the element at position end will not be in the list slice.

I felt kind of the same way. But in the end I came up with this:
def remove_middle(lst, start, end):
    area_1 = 0 + start
    area_2 = ((len(lst)) - end - 1) * (-1)
    new_lst = lst[:area_1]
    new_lst2 = lst[area_2:]
    return new_lst + new_lst2

Seems a bit complicated but it work. Any suggestion how to simplify it?

Best suggestion is to think it through, piece by piece and determine what, if anything could be done differently. Us telling you how to simplify won’t help you. That’s where the work begins in learning to program.
Start with something that works, then tear it down and build it back up again, only different, each time. Eventually you will have a storehouse of alternate approaches, some simpler than others. Weigh out the pro’s and con’s for each, and you will be officially learning.

thanks for the quick reply;) I’ll try my best.

Why so complicated??
def remove_middle(lst, start, end):
return lst[:start] + lst[end+1:]

Wow i just spent so long trying to figure this one out. It’s the first time i have been completely stumped during this course and came to check the answer.
Cant believe you solved it with just a 1-liner - great 

It’s not just you, this section of challenges was very poorly organized.  Every single one of them requires knowledge that was not taught in the lessons.  Maybe they’re trying to teach us to be resourceful?

So if we can use the  “+”   to add things from a list into another list why cant we use the  minus symbol ( - ), in order to remove an area of a list we dont want?

Bro how much did this take for you to write that code? the area_1 is start but the area_2 gives negative number always. i dont know how the fk this code works but it does lol nice

The plus sign is a concatenation operator. Concatenation is the process of linking two objects: a string to a string, or a list to a list. There is no operation to minus an element from a list, save manual iteration or using a method such del(), .pop(), or .remove().

I tried to use delete, because in a previous lesson we were taught the following:
"" Emptying a list
There are two ways to empty an existing list. The first way is to just assign the list variable to an empty list. In this case, the old list and its contents are automatically deleted by Python. This is shown in the following code example. list1 = [1, 2, 3, 4, 5, 6, 7 ]
list1 = [  ]
The second method is to use the del() function to delete all the elements of the list. This forces the removal of all the items immediately instead of letting Python delete the contents at some time of its choosing. Both methods produce the same end result which is that the list will be empty of contents.
list2 = [ 10, 20, 30, 40, 50, 60, 70 ]
del list2[:]""
but obviously that command can’t be right with the space between del and list because python hates spaces. can this even work if put in correct syntax?
lst = del(lst[start:end+1]) ?

>>> s
'abcdefghijklmnopqrstuvwxyz'
>>> t = list(s)
>>> del(t[7:17])
>>> t
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> ''.join(t)
'abcdefgrstuvwxyz'
>>> 

>>> t = list(s)
>>> del (t[7:17])     # don't leave out the parens; space is not a problem
>>> ''.join(t)
'abcdefgrstuvwxyz'
>>> 





 mtf:

‘’.join(t)


thank you!
I don’t understand this part, though: ‘’.join(t)
I don’t think that was in a lesson yet. what is it supposed to do?

The str.join() method takes a list of strings and concatenates them into a single string. The string object it acts upon is the separator, in this case an empty string.
It can also be used to insert characters into a string…
>>> '-'.join('catnip')
'c-a-t-n-i-p'
>>> 


thanks 

This took me a while to figure out. I finally get it now. The +1 at the end is to adjust for the final number “end” to be removed from the function. To some of the other threads, I was tempted to use additional functionality, but I assume there is a method to his madness. This is so far the hardest exercises, primarily because of the wording.

What you need to understand here is that  [:start] gets everything UNTIL  start (not including start) , and [end:] gets everything FROM end until the end (including end). But since we want to erase the middle, we don’t want to include end.
Here is what I’ve got:
def remove_middle(lst, start, end):
  first = lst[:start]
  second = lst[(end+1):]
  return first + second


How would I know to use ‘+1’ after [end] for this problem? What does adding a ‘+number’ when I’m slicing lists? Hope this makes some sense.
def remove_middle(lst, start, end):
return lst[:start] + lst[end+1:]
Thanks for the help.
"
147,What is the difference between a class and an object?,"FAQ,Python FAQ",q-a,1,"
Question
What is the difference between a class and an object?
Answer
Think of a class as a blueprint and an object as the result of creating what that blueprint specified.
Classes allow us to define a general state and behavior for the objects we want to make. This is a super powerful way to approach programming because it allows for us to generalize our code to work for many situations!
For example, we might make a Car class that has things you might find in any car: wheel_count, gas_tank_size, and a seat_count of at least one for the driver to sit in. When we create an object of type Car, we might make a mustang object (notice it’s lowercase, as is convention when instantiating objects of a class). Our mustang has its own values for those variables because it’s different from other Cars, but still has a lot of the same properties. We could make an object for any model of car!
Same basic structure, different values. That’s the use of a class!
",
148,How can I edit an existing list variable to add a new item?,"FAQ,Python FAQ",,10,"
Question
For this exercise, how can I edit the existing list variable in the code to add new data items?
Answer
A list is an ordered collection of items. Lists are enclosed using the square brackets [] and each item is separated in the list using a comma. To edit an existing list, go the inside of the closing bracket ] and type a comma and then the new item to add to the list. To add multiple items, repeat the process by adding another comma and a new item but do not go beyond the closing square bracket of the list.
my_list = [1, 2, 3, 4]

# Edit the list in place. The new list will look like this:
my_list = [ 1, 2, 3, 4, 5]

","
I really went the long way round on this one. I figured writing it out that way would be cheating. I couldn’t remember Codecademy teaching me how to add something to a list. I tried ‘+=’ addition assignment; of course that didn’t work. Finally I went to w3schools and got the following solution:
heights = [61, 70, 67, 64]
heights.append(65)
print(heights)


Nothing wrong with using documentation if you need to find the name of the function or method which you want to use

Yooo! Very cool this command. Very helpful. Thank you very much 

One could also use the += operator to add new list items.
heights = [61, 70, 67, 64, 65]
heights += [78]
print (heights)
This will print [61, 70, 67, 64, 65, 78]

+= worked just fine for me.
heights = [61, 70, 67, 64]
heights += [65]
print(heights)
returns
[61, 70, 67, 64, 65]

Why not just do height+= [""the new item to add]? We have already learnt this and can just start applying.

But it worked
In [68]: heights = [61, 70, 67, 64]
In [69]: heights += [65]
In [70]: heights
Out[70]: [61, 70, 67, 64, 65]
However, i will still rather go with your solution.
heights = [61, 70, 67, 64]
heights.append(65)
print(heights)

append() was specifically designed to add an item to the list, list extending also has it usage. So you need to know both, so you can the right approach for the problem you are facing

Yep, love w3school and their Python Tutorial as well!)
"
149,How are escape characters counted towards the length of a string?,"FAQ,Python FAQ","q-a,strings",4,"
Question
In the context of this exercise, if we have escape characters in a string, how are they counted towards the length of the string?
Answer
Escaped characters in Python only count as 1 towards a string’s length, like a single character would. So, for the escape character \"", this will actually only count as 1 towards the length, rather than 2. The backslash isn’t counted.
Example
# Because \’ is an escape character, it will only be 
# counted as 1 toward the length of the string.
message = ""I\'m hungry""

# length is 10 (includes the space character)
print(len(message)) 

","
I just tried this example in codeacademy’s terminal and here are the results that left me somewhat confused, so I would be very thankful for any help:
first of all, typing the following code line didn’t end my string before I thought it would, how is it possible:
message = ""I'm hungry""
Then I went with print(len(message)) and it gave me 10. Ok. Finally I created another variable:
message2 = ""I\'m hungry""
just to go again with print(len(message2)) and again it gave me 10. The only conclusion I can get from here is that backslash isn’t counted at all in a string’s length. Is it true?




 ai-2090:

isn’t counted at all in a string’s length. Is it true?


Yes, true. The backslash doesn’t count as a printable character because it has special meaning… Escape. It tells the parser that the character following is printable, not a token.
We would not use it in this case, though, since ' is different from "" and will be printed without escapement.
message = 'I\'m hungry'

Now it is actually doing what is expected. Escape and treat as a printable character.

It would be better if the  answer said escaped character only count as one, rather than escape characters.
so the escaped "" only counts as one.
"
150,How does Python know what character my loop variable currently is?,"FAQ,Python FAQ",q-a,6,"
Question
How does Python know what character my loop variable currently is?
Answer
When we create a for loop and create some named variable after the word for, Python knows to assign that variable the value of each thing we’re iterating over in the iterable object given to the for loop after the word in.
For example, if we have for character in some_word:, character will hold the value of each individual character until there are no characters left in some_word.
It doesn’t “know”, by any means. Python just expects something it can iterate through, and then assigns each current item to the variable and that’s what you’re given to work with.
","
Please see the below code and tell me why this is being printed out
thing = “spam!”
for c in thing:
print c
word = “eggs!”
Your code here!
for w in word:
print c

I think the problem is you used “w” as each character in word, but then under the for loop, you told it to print “c” instead of “w”.
I’m not sure what you’re asking for though because I can’t see your console in your comment.

I did the exercise as instructed and my output:
ps
ma
e!
gg
!s
… is a bit confusing. it says it should print each individual character, not two at a time, and not backwards…
my code for reference:
thing = “spam!”
for c in thing:
print c
word = “eggs!”
Your code here!
for c in word:
print c

In this snippet there are two problems: 1)You forgot to indent the 2nd line, thus your code must be:
for w in word:
print w
2)  when printing you must use the same letter that you used in for

I have tried your code and is correct, anyway here below you can check:
thing = “spam!”
for c in thing:
print  c
word = “eggs!”
for c in word:
print  c
"
151,What else can we do with the matplotlib pie chart?,"FAQ,Python FAQ",q-a,3,"
Question
In the context of this exercise, what else can we do with the matplotlib pie chart?
Answer
For the matplotlib pie chart, you can set several parameters to change its appearance.
One parameter you can set is the labelDistance, which sets the radial distance that the labels are drawn from the wedges. By default this value is 1.1.
Another useful parameter is the startangle, which rotates the start of the pie chart (the top of it) by the angle degrees counterclockwise from the x-axis. For example, a value of 90 would rotate the pie chart 90 degrees counterclockwise.
In addition, you can set a colors parameter to set the color of each wedge manually. You can provide a list of colors, and if the number of colors in the list is less than the number of wedges, it will cycle through them. For example, you can set it like plt.pie(colors=[""red"", ""blue"", ""green""], ...).
Another useful parameter is the explode parameter, which can be used to set the wedges to be some distance from the center of the chart, by providing one value per wedge. This essentially makes the wedges stick out of the pie chart.
","
Thankyou for providing such useful knowledge @jephos249.

Hi! I notice the texts on the pie chart is a bit hard to see compared to the size of the pie chart. How can we change the font size of the labels and percentage on the chart?
Thank you!
"
152,Can the data from the dictionary values() be used for thing other than iteration?,"FAQ,Python FAQ",q-a,1,"
Question
In this exercise, the results of the values() function are used in a for loop. Can the data friom values() be used in other ways?
Answer
The results from values() are not just for iteration. They can be used in any way that a list can. In the following example code, the values from a dictionary are passed to functions which can determine the minimum, maximum, and total values of the data.
cities = {""Los Angeles"": 3971883,
          ""San Diego"": 1394928,
          ""San Jose"": 1026908}

print(sum(cities.values()))
print(max(cities.values()))
print(min(cities.values()))

",
153,"If we run .split() without an argument, what happens to consecutive whitespaces?","FAQ,Python FAQ",q-a,6,"
Question
In the context of this exercise, if we run .split() without an argument, what happens to consecutive whitespaces?
Answer
When you don’t provide an input argument for .split(), the function will treat consecutive whitespaces as though they are a single separator.
For example,
string= ""a a  a   a""
words = string.split()

print(words)
# ['a', 'a', 'a', 'a']

If instead, we ran this with an argument of a single whitespace character "" "", the result would be different, because we are splitting between every whitespace character, even resulting in some empty characters in our list.
string = ""a a  a   a""
words = string.split("" "")

print(words)
# ['a', 'a', '', 'a', '', '', 'a']

","



 jephos249:

resulting in some empty characters


To get the following […, "" "", ‘a’ …] shouldn’t there be a space before and after this "" "".

You wouldn’t get spaces after splitting on spaces

I’m not sure I understand the solution to this question. Why would string.split("" "") and string.split() return different outputs? Isn’t the delimiter for both of them a single whitespace character?

No, string.split() without a separator argument treats conseutive whitespace as a single seprator. This is different to a specified separator in which they aren’t treated as a group (first one is in a sequence of seprator values is split and the others would retturn empty strings).
""a    b"".split()  # Four consecutive whitespaces
# returns ['a', 'b']
""a    b"".split("" "")
# returns ['a', '', '', '', 'b'] 

""a,,,,b"".split("","")
# returns ['a,,,,b']
""a,,,,b"".split("","")
# returns ['a', '', '', '', 'b']

The documentation explains this in a more detail-
https://docs.python.org/2/library/stdtypes.html#str.split
https://docs.python.org/3.8/library/stdtypes.html#str.split

Probably you wanted to write :
""a,,,,b"".split("" "")
# returns ['a,,,,b']

and for those who did not understand the example like i didn’t: it returns exactly the same string beacause it hasn’t found any white spaces to use to separete this string ""a,,,,b"".
And in the second example with 3 epmty strings, it is so because they are between four spaces.
The example from documentation that explained it to me is this:
>>> '1,2,3'.split(',')
['1', '2', '3']
>>> '1,2,3'.split(',', maxsplit=1)
['1', '2,3']
>>> '1,2,,3,'.split(',')
['1', '2', '', '3', '']

Hope it helped.
"
154,"Zip creates an iterator, how can we turn that into a dictionary?","FAQ,Python FAQ","lists-dictionaries,q-a",15,"
why the dictionary is empty when i execute this lines of code?
drinks = [""espresso"", ""chai"", ""chai"", ""drip""]
caffeine = [64, 40, 0, 120]
zipped_drinks = zip(drinks, caffeine)
print(""Zipped drinks "",list(zipped_drinks))
drinks_to_caffeine = {key: value for key, value in zipped_drinks}
print(""Drinks to caffeine dictionary "",drinks_to_caffeine)

output:
Zipped drinks  [(‘espresso’, 64), (‘chai’, 40), (‘chai’, 0), (‘drip’, 120)]
Drinks to caffeine dictionary  {}
","
The object zipped_drinks is an iterator. It is characteristic of an iterator, that you have one go at it: after you have iterated through it one time, it cannot be re-used.
So, when you call print(""Zipped drinks "",list(zipped_drinks)), the iterator zipped_drinks is exhausted by providing the printable list to the print function.
Solution:  Either comment out the first print() function, or assign the list to a variable and call print() and the dictionary comprehension on the variable.
drinks = [""espresso"", ""chai"", ""chai"", ""drip""]
caffeine = [64, 40, 0, 120]
zipped_drinks = zip(drinks, caffeine)
drink_list = list(zipped_drinks)
print(""Zipped drinks "",drink_list)
drinks_to_caffeine = {key: value for key, value in drink_list}
print(""Drinks to caffeine dictionary "",drinks_to_caffeine)

# Output:
Zipped drinks  [('espresso', 64), ('chai', 40), ('chai', 0), ('drip', 120)]
Drinks to caffeine dictionary  {'espresso': 64, 'chai': 0, 'drip': 120}


Hi
How would we know id a defined object is an iterator?
Zipped_drinks was defined to hold value from 2 lists. Shouldn’t such an object be usable any number of times in its scope?


As per your explanation, printing out zipped_drinks twice does confirm your answer.
But how do we identify such objects in the code.
On first look it didn’t seem like a iterator ( more so if I don’t intend to use in in loops )


Does this apply to range objects as well?


Why is this so in Python?


print(""Zipped drinks "",list(zipped_drinks))
print(""Zipped drinks "",list(zipped_drinks))

output
Zipped drinks  [('espresso', 64), ('chai', 40), ('decaf', 0), ('drip', 120)]
Zipped drinks  []





 rdb20:

But how do we identify such objects in the code.


The most commonly used functions in Python 3 that return iterators (which is what we are discussing here) are:  zip(), enumerate(),  reversed(), map(), filter().  It seems to be the trend to return iterators, as some of those returned lists in Python 2;  be on the lookout for more in future versions.  I don’t know of any way to recognize which functions return iterators, except of course, by reading the docs or other instructions on their use.



 rdb20:

Does this apply to range objects as well?


Technically, range() is not an iterator. range can be “examined” in ways that iterators cannot:
my_range = range(5)
print(len(my_range))
print(my_range[3])
print(3 in my_range)
print(list(my_range))

Output:
5
3
True
[0, 1, 2, 3, 4]

Now let’s try it with a true iterator, say, the output of the enumerate() function:
my_list = ['a','b','c']
my_enumerate = enumerate(my_list)
#print(len(my_enumerate))  # raises error
#print(my_enumerate[2])  # raises error
print((1, 'b') in my_enumerate)
print(list(my_enumerate))

Output:
True        #  yes, (1, 'b') is in my_enumerate ...
[(2, 'c')]         # ... but discovering this partially exhausted the iterator!




 rdb20:

Why is this so in Python?


I’m not sure - I’ve never seen an answer to this. Presumably, the iter and next functions that define iterators could be rewritten in such a way as to permit reuse.
My own theory of the  reason is that we would like functions to return the same output from a given input, but an iterator can be used to change the iterable which generated it.
my_list = ['a','b','c']
my_enumerate = enumerate(my_list)
for idx, element in my_enumerate:
    my_list[idx] = element + 'x'
print(my_list)

Output:
[‘ax’, ‘bx’, ‘cx’]
So, at this point, what should my_enumerate look like if it could be re-used???

There is a lot about this on the internet. There is one thread on Stack Overflow that maintains that it is only the iterator type called “generator” that is exhaustible. That, at least, is not true.
Here are some good references.
The Iterator Protocol: How “For Loops” Work in Python
Iterables, iterators and generators, oh my! Part 1
Python: range is not an iterator!

My code:
drinks = [""espresso"", ""chai"", ""decaf"", ""drip""]
caffeine = [64, 40, 0, 120]
zipped_drinks = zip(drinks, caffeine)
print(tuple(zipped_drinks))
drinks_to_caffeine = {drinks:caffeine for drinks, caffeine in zipped_drinks}
print(drinks_to_caffeine)
>>>
(('espresso', 64), ('chai', 40), ('decaf', 0), ('drip', 120))
{}

Why is the dictionary empty when I print it? My response was correct according to the site, but did I not actually make a dictionary?

This prints fine…
drinks = [""espresso"", ""chai"", ""decaf"", ""drip""]
caffeine = [64, 40, 0, 120]
zipped_drinks = zip(drinks, caffeine)
#print(tuple(zipped_drinks))
drinks_to_caffeine = {drinks:caffeine for drinks, caffeine in zipped_drinks}
print(drinks_to_caffeine)


I have a similar question as above!
I think the question is that why are we unable to print both the ‘zipped_drinks’ list and the ‘drinks_to_caffeine’ after list comprehension?

if I shift both prints to the end of the code, the ‘zipped_drinks’ list appears to be the one that is empty this time round.
Thank you for your time!

Tried it myself and saw the same thing. I did some research and it appears that you can only unpack a zip object once. Once it has been iterated, it is exhausted.
I guess making it into a list when printing it is using the zip object once. Then making it into a dictionary is attempting to use it twice. A site suggested making a separate variable that creates a list of a zip object and I tried that with this lesson and it worked, just a little extra work to see the printed list version of the zip.
This extra work isn’t necessary for the lesson, but helpful to see what your code is doing.
drinks = [""espresso"", ""chai"", ""decaf"", ""drip""]
caffeine = [64, 40, 0, 120]


zipped_drinks = zip(drinks, caffeine)
zipped_drinks_list = list(zip(drinks,caffeine)) #creating a separate variable that is a list version of the zip object

drinks_to_caffeine = {key:value for key, value in zipped_drinks}

print(list(zipped_drinks_list)) #print this new variable so that I don't exhaust the zipped_drinks object
print(drinks_to_caffeine)

If you Google “zip list be unpacked once” you’ll see a couple of helpful more in depth explanations.

There are too many steps here. Using the zip(), you can combine the 2 lists right into a dictionary. Using tuple and zipping more than once isn’t necessary. I am fairly new to python, but not programming, so what I gather Is that this is the fastest, most efficient way. And it works fine!
drinks = [""espresso"", ""chai"", ""decaf"", ""drip""]
caffeine = [64, 40, 0, 120]
drinks_to_caffeine = {drinks:caffeine for drinks, caffeine in zip(drinks, caffeine)}
print(drinks_to_caffeine)





 chiefyogiblak:

Using tuple and zipping more than once isn’t necessary.


It is only zipped once, but stored in a variable. Abstraction is not something that is easy to teach to a beginner so most lessons make use of intermediary or temporary variables to show that step in a more verbose manner.

Ah, I understand. I haven’t come across tuples yet so I didn’t understand them fully, but soon as I saw the code, I knew I could remove that and the variable and go straight to the dictionary comprehension. Which way is preferred in a real world setting?

I’m no expert on the real world setting and see nothing wrong with your code. In this setting we need to write code that is easy to read and follow, without abstraction in the early stages. Think ‘naive’ over elegant or intuitive. Being a programmer it will seem like a step back, but it can’t hurt to get a refresher and see things from a beginner’s view.

For sure! I sometimes go the naive way when trying to get a function down and then edit for specifics and efficiency later on.




 mtf:

drinks = [“espresso”, “chai”, “decaf”, “drip”] caffeine = [64, 40, 0, 120] zipped_drinks = zip(drinks, caffeine) #print(tuple(zipped_drinks)) drinks_to_caffeine = {drinks:caffeine for drinks, caffeine in zipped_drinks} print(drinks_to_caffeine)


I used this construction
drinks = [“espresso”, “chai”, “decaf”, “drip”]
caffeine = [64, 40, 0, 120]
drinks_to_caffeine = dict(zip(drinks, caffeine))
print(drinks_to_caffeine)
and it was right answer. Can I use it or I should to use constructions with “for”?

There is nothing wrong with using the dict() constructor, so long as other methods are apparent. It really depends what the exercise is expecting, but given freedom to choose our approach, any that work are fine.
"
155,What is mod short for in math?,"FAQ,Python FAQ",,13,"
Question
What is mod short for? Particularly when written X mod Y?
Answer
mod is short for modulo, a math function that means to get the remainder of division. It is represented with a % in python and written X % Y this can be read as X mod Y or X modulo Y.
It is used to get the remained from a division. For example:
15 % 4 = 3
>> 15 / 4 = 12 with remainder 3

For some further studying, see the Codecademy Python 3 modulo exercise.
","
I’m in the Lots of Math part of Python Functions. It’s the last screen before you complete the lesson.
It is asking me to “return the third number printed mod a.” What exactly is this asking me to do?

I had the same question. Mod is short for modulo, which is the % thing.

Mod means a lot for some of us, can be modules, modifications, moderations so fix this exercise asap because its confusing.

Finally, it should  return  the third number printed mod  a, this is a poorly written step, whoever wrote this exercise, please, get down to our level, I know you are an expert, but this is the first time I learned about this word “mod” , this exercise is confusing! you can do a better job




 objectpro66930:

Mod means a lot for some of us, can be modules, modifications, moderations so fix this exercise


Whilst the confusion is unfortunate, modular arithmetic is a mathematical system which existed long before the computer did.
The use of mod in this fashion is not confined solely to programming, nor to Codecademy’s material; it’s mathematics, so you’ll just have to get used to it I’m afraid. 

Terrible response from the Help Desk! Why make this more difficult by throwing in jargon that most don’t know. You could have easily left “mod” out and asked to return the remainder of ‘a’ and this thread wouldn’t exist!




 cseby2000:

Why make this more difficult by throwing in jargon that most don’t know.


Programming is difficult, and learning by its very nature is going to involve a lot of things which are “unknown”. A good amount of your time, as a programmer, will likely be spent looking for information and learning about things you have either a) not seen before and/or b) don’t fully understand.
An example would be the use of mod in this context: you saw it, didn’t understand it, and went looking for more information to help you make sense of it before ending up here. This is a process with which you should become familiar. 



 cseby2000:

You could have easily left “mod” out and asked to return the remainder of ‘a’ and this thread wouldn’t exist!


I can only presume, as I do not have access to the specific exercise (since I am neither a Pro member nor a Codecademy employee), that since this exercise deals specifically with the modulo operator that the specific statement of a mod b is intended to prompt the use of the % operator you have been learning about. It also introduces you to the notation. 
Otherwise, if the exercise simply asked for a remainder, you might derive some alternative mechanism for calculating it when a single operator is sufficient.

I agree with the prior response that this was a poorly written exercise.  This is not the first time I’ve had trouble with the instructions.

In any programming exercise, reading the instructions is crucial. It is clear enough to see what is coming in return for me.
def lots_of_math(a, b, c, d):
print(a + b)
print(c - d)
print((a + b) * (c - d))
return ((a + b) * (c - d)) % a

Came here bc I was confused, and saw I wasn’t alone!  I if there were a previous example explained with this verbiage, I would have known what to do.

Up until this point in the exercises % was always referred to as modulo so if they suddenly change how they refer to % it they should at the very least have an explanation in the hint if not in the actual instructions.




 thecodingbean:

so if they suddenly change how they refer to % it they should at the very least have an explanation in the hint if not in the actual instructions.


I think the lesson designers have assumed that, given the entire exercise revolves around the use of the modulo % operator that you’ll be able to infer that “mod” == “modulo”.
The confusion is unfortunate, for sure, but I don’t think it’s that great of a leap to make. Besides, in the event that is is confusing there is the secondary benefit of getting you used to going looking for answers on your own. There will not always be someone (or something) around to give you a hint or hand you the solution, and being able to successfully figure things out on your own is a useful skill.
"
156,How is continue different from break?,"FAQ,Python FAQ",,7,"
Question
How does the behavior of the continue statement differ from the break statement?
Answer
The continue statement interrupts the execution of a loop and causes the loop to start the next iteration. Any code following the continue is not executed but the loop will continue on starting with the next iteration. The break statement will terminate the execution of the loop. No further code in the loop will execute and the program will resume execution at the next statement following the end of the loop.
In the following code example, if the counter is an even number, a continue statement is used to skip printing the number and continue to the next number. An if statement checks if counter has reached 19 and then uses a break to stop the execution of the loop. This code will print the odd numbers from 1 through 17.
counter = 0
while counter < 100:
    counter += 1
    
    # If number is even - skip to next
    if counter % 2 == 0:
        continue

    if counter == 19:
        break
        
    print(counter)

","
Thanks,Well explained!

Whether continue and break must be used with if.

Im unable to see the point of using “continue”
is it not just easier to us this formula?
for age in ages:
if age >= 21:
print(age)

Hi, there
Exactly what I did 
But I think this is just an easy task to use ‘continue’.

What if you break at 20? Does continue skips break in this case?
counter = 0
while counter < 100:
    counter += 1
    
    # If number is even - skip to next
    if counter % 2 == 0:
        continue

    #since continue skips even numbers, does that mean this break will be skipped too, and it will continue to print odd numbers after 20?
    if counter == 20:
        break
        
    print(counter)





 web6501703079:

Does continue skips break in this case?


Yes, because it is even so the loop continues in the line above it. This can be fixed by testing for 20, first, then test for even parity. You may as well print the counter when you increment it.
"
157,Why does `(not True == False)` work but not `(True == not False)`?,"FAQ,Python FAQ",,8,"
Question
In Python, why would this work,
(not True == False)
but not this?
(True == not False)
Answer
The reason for this is mainly due to the order of operations in Python.
The not operator has a lower precedence than the comparison operators such as ==, !=, <, >,  <= and >=.
As a result, in this expression, the == operator will be evaluated first, before the not is evaluated. Because of this, it will try to compare True == not first, which would not work and would cause an error.
Example
# True == False is evaluated first.
# Then the result will be reversed with 'not'.
not True == False # True

# This would not work.
# It will try to evaluate 'True == not' first, which is not valid.
True == not False

","
I look at it as the not is evaluating the whole Boolean, not just one side.
so not True == False would be looked at as:

not (True == False)
not (False)

answer: True

Exactly correct, but the point of bringing in  operator precedence is to explain why
True == not False
… raises a SyntaxError.

Assignment is the only time that comes to mind where we can combine operators.
+=, -=, *=, &c.

     == not

Those two operators cannot appear without an operand between them.

Just because it hasn’t been mentioned, the code can be fixed with parentheses:
True == (not False)

And as suggested this is because of the order of operations.

But the below works:

print(True == (not False))


Hi,
The solution has … and not (credits >= 120) which is fine. But I wrote … and (credits < 120) which I also think is correct. I try not to tie my brain in NOT’s when I can help it.

I did just that initially without worrying about the Not operator. But later realized the lesson was on the Not operator and that I was expected to use the Not operator. lol
"
158,What is the difference between a class and an object?,"FAQ,Python FAQ",q-a,1,"
Question
What is the difference between a class and an object?
Answer
Think of a class as a blueprint and an object as the result of creating what that blueprint specified.
Classes allow us to define a general state and behavior for the objects we want to make. This is a super powerful way to approach programming because it allows for us to generalize our code to work for many situations!
For example, we might make a Car class that has things you might find in any car: wheel_count, gas_tank_size, and a seat_count of at least one for the driver to sit in. When we create an object of type Car, we might make a mustang object (notice it’s lowercase, as is convention when instantiating objects of a class). Our mustang has its own values for those variables because it’s different from other Cars, but still has a lot of the same properties. We could make an object for any model of car!
Same basic structure, different values. That’s the use of a class!
",
159,How can computers represent everything as bit strings?,"FAQ,Python FAQ",q-a,1,"
Question
How can computers represent everything as bit strings?
Answer
Learning exactly how the hardware that makes up your computer understands bit strings is an entire field of its own, namely computer architecture! It’s a lot of fun, so if you’re up for a big challenge, check out this free computer architecture course from MIT.
In simple terms, your computer is built of electronics that create low and high voltages. If a voltage is high, it’s read as a 1, and a 0 if it’s low. Then you have logic gates that are capable of sending an output signal based on the input signals they get. These logic gates make up the ability to do a lot of computation!
0s and 1s send all kinds of signals in all kinds of combinations, and as a result, we have modern computing as we know it!
",
160,Where am I supposed to write this elif to check if the coordinate has already been guessed?,"FAQ,Python FAQ",q-a,5,"
Question
Where am I supposed to write this elif to check if the coordinate has already been guessed?
Answer
Our code to this point (in pseudo code) looks like the code below. We want to insert an elif that checks if their wrong guess was one they’ve already made before.
if guess is correct:
  print “Congrats! You sunk my ship.”
else, not correct:
  if guess is invalid:
    print “Not in the ocean”
  # ELIF GOES HERE
  else, just missed:
    print “Missed!”
    update element in board to be “X”
  print the board

You cannot have an elif without an if before it, so writing it after an existing else would be invalid, because else must be last. Be especially careful with your indentation as well, as the new elif should be on the same indentation level as the if that checks for the guess being invalid.
","
2 posts were split to a new topic: What Does This Code Do?

Does an elif statement really need to have the condition in brackets? I just tried it without and it was still fine.

jjhiggins97 i don’t think they are even supposed to be in brackets lol. I’m pretty sure you write the condition without brackets, but Python knows its a condition since you put a colon ("":"") after it.

Yeah, brackets are used for making debugging easier. They don’t help with the program, just are there for neatness.
"
161,Why am I getting an indentation error?,"FAQ,Python FAQ",q-a,4,"
Question
Why am I getting an indentation error?
Answer
If you’re seeing an error message that says something about an IndentationError it means you have code that isn’t indented properly somewhere. Remember, Python uses indentation (2 spaces per indentation on Codecademy) to determine blocks of code.
If you’ve written a return statement outside of a function (not indented inside to be inside the function), that will give you this error. For example:
def my_function():
  print ""Hello!""
return 0  # This is a return outside of any function!

","
so according to codecademy on
https://www.codecademy.com/courses/learn-python/lessons/lists-and-functions/exercises/using-an-element-from-a-list-in-a-function
def list_function(x):
return x[1]
n = [3, 5, 7]
print list_function(n)
gives me the first result in the list and …
def list_function(x):
return x[0]
n = [3, 5, 7]
print list_function(n)
is the wrong answer even though we all know [0] accesses the first element in a list

The exercise isn’t asking for the first element of the list. It is asking for the element at index one i.e. the second element of the list. Remember indexing in python starts at 0.

Thanks for the reply. Codecademy can be confusing to me sometimes with the way things are worded.
"
162,How can I avoid making an infinite loop?,"FAQ,Python FAQ",q-a,1,"
Question
How can I avoid making an infinite loop?
Answer
Any time you write a while loop, you should ensure that the condition you are checking eventually becomes False.
This can be difficult depending on what your condition is, because it can be hard to know all of the cases under which your program could be executed. For example, if we have a function being called in our condition, and that function has special cases that can be tricky to handle, we might not see the reason for our infinite loop so easily.
For example, say we have a program that has a function named is_valid_temperature() that returns True if the given number is a valid temperature on Earth and False otherwise. If we use this function in our while condition, we must take into consideration how that function calculates its True or False output, which is a bit more complicated than just checking a count being less than some value.
",
163,Can the get() method for a dictionary be used without assigning the result to a variable?,"FAQ,Python FAQ",,3,"
Question
In this exercise, the get() method return is assigned to a variable even if nothing is return. Is it possible to use the method without assigning the result to a variable?
Answer
Yes, you can use the get() method without assigning the result to a variable.  In that case, it would function more like an alternative to checking for a key using in. The following code example shows the use of the get() method as part of an if to check whether a key exists in the dictionary and then the same check using the more conventional in style. Both produce the same result - the print() function is called to report that “Data was not found”.
directions = { ""North"": 10, ""South"": 5, ""East"": 20, ""West"":40 }

if directions.get('NorthWest'):
    print(""Data exists"")
else:
    print(""Data was not found"")
    
if 'NorthWest' in directions:
    print(""Data exists"")
else:
    print(""Data was not found"")

","
2 posts were split to a new topic: Mistake in faq

5 posts were split to a new topic: Is there a way to lookup a value in a dictionary?
"
164,Is it possible to statically define a dictionary which contains another dictionary without using another variable?,"FAQ,Python FAQ",q-a,4,"
Question
In this exercise, one of the values in the library dictionary is set from the plays dictionary. Is it possible to statically define a dictionary which contains another dictionary as a value?
Answer
Yes, when you define the dictionary you simply define another dictionary inside the {} brackets. The following code example shows a population dictionary which contains dictionaries for each state that contains cities and population numbers.
population = {""California"": {""Los Angeles"": 3971883,
                             ""San Diego"": 1394928,
                             ""San Jose"": 1026908},
              ""Texas"": {""Houston"": 2296224,
                        ""San Antonio"": 1469845}
              }

","
looping through this to pull out information i am sure is possible but seems daunting.  Better to keep it simple and create several dictionaries?

Nested data structures are common. You should rise to the occasion (challenge? No idea, my english isn’t that good)

My melting brain is screaming “thiiiis wiiiilll beeee fuuuuun”
"
165,Is this all there is to know about syntax in Python?,"FAQ,Python FAQ",q-a,1,"
Question
Now that I’ve gone through this lesson covering Python syntax, is there anything else to learn about the syntax of the language?
Answer
There’s always more to learn in programming! The best way to learn about a language’s syntax is to continue writing in that language. As you go, you’ll typically:


Notice syntax errors when you run your code and learn why what you wrote was invalid, building a familiarity with common error messages


Learn new ways of writing things, whether it be more concise, or an updated method


Come across more complicated syntax that’s usually comprised of simpler syntax


As long as you continue writing code, reading error messages, and learning new syntax from Codecademy or forums or documentation, you’ll be on track to Python mastery!
",
166,What is a statement?,"FAQ,Python FAQ",q-a,1,"
Question
This exercise calls print a “statement”. What is a statement in programming?
Answer
In programming we call anything that carries out some action a statement. Programs you’ll write will be made up of many statements that work together to produce a desired result, output something useful, or act on some existing data, among infinitely many other possibilities!
A statement isn’t necessarily always a single line, either. For example, you’ll learn in a bit about things called if statements, which can contain as many statements inside of them as you like!
Kind of confusing, right? Like  anything else, it’ll become much clearer as you practice and write more code.
",
167,Can we provide any input type to the format() method?,"FAQ,Python FAQ","q-a,strings",3,"
Question
In the context of this exercise, can we provide any input type to the format() method?
Answer
Yes, you can provide almost any type of input to the format() method, including strings, numerical values, booleans, and objects. You can also provide expressions, like 1 + 4, which will be evaluated and then formatted into the string.
Example
a = 10
b = 20

print(""{} + {} = {}"".format(a, b, a+b))
# 10 + 20 = 30

print(""{}"".format(a < b))
# True

","
Is it possible to call a function inside .format() method?

Great question!
I think so, please see below:
def function():
  return 'function called!'

print('{}'.format(function()))
# function called!

"
168,Where can I learn more about Python after this course?,"FAQ,Python FAQ",q-a,1,"
Question
Where can I learn more about Python after this course?
Answer
After taking this course you should have a pretty strong grasp on the fundamentals of programming in Python! It’s entirely up to you, though, what to learn next. If more Python sounds appealing, check out books that have lots of interactive projects to work through, like Automate the Boring Stuff With Python, which is free online!
If you want to branch off into other tools and technologies, check out the rest of our courses we offer by visiting the Catalog of courses!
",
169,What is the difference between a class variable and instance variable?,"FAQ,Python FAQ","classes,q-a",4,"
Hello! I am curious about something. In a previous lesson we learned to create a variable and then we can call it later with the object.variable syntax. Here it seems that you can skip the creating a variable step and simply put the object.variable = value syntax which does both of the previous steps in one. Am I correct in my observations?
","
I had the same question until I realised I confuse a “class variable” with an “instance variable”. They are not the same thing:
CLASS VARIABLES:
A class variable needs the ""creating a variable step "" as you call it, in the intended block of the Class. If it is called later by any object using the syntax object.variable, it will yield the same data for every instance/object of the class.
INSTANCE VARIABLES:
Although an instance variable uses the same attribute notation used for accessing class variables (object.variable ) it does so in order to assign data to the object. The data now is not shared by all instances of the class, they re specific to the object they are attached to.




 stellakats:

ances of the class, they re specific to the object they are attache


nice explanation. Similar to Java, although in Python one must not define the instance variable inside the class

Crystal clear explanation for the difference. Thank you!
"
170,Why are my student dictionaries not accepted?,"FAQ,Python FAQ",,29,"
Question
Why are my student dictionaries not accepted?
Answer
There are a few common errors listed below:

Capitalization issues will prevent you from passing. Remember that Codecademy checks for exactly what the instructions ask for, so your variable names should be all lowercase, like lloyd, but their names stored under their ""name"" keys should be capitalized like a normal name, like ""Lloyd"".
Incorrect dictionary syntax will give you lots of errors! Remember that dictionaries are key-value pairs, and that each value except the last in the dictionary must have a comma after it.
The ""name"" key’s value does not go in brackets [ ], it’s just a string.

","
Can someone please explain what happens after running the code below:
students=[lloyd,alice,tyler]
def set_up(list):
  for x in list:
    x={}
    x[""homework""]=[]
    x[""quizzes""]=[]
    x[""tests""]=[]
    x[""name""]=str(x)[0].upper()+str(x)[1:len(str(x))]
  return x
print set_up(students)

I thought it might print out the dictionaries required to pass this exercise.

here:
students=[lloyd,alice,tyler]

you have a list with undefined variables.
How do you expect this to work?

First, fix the list:  students=[""lloyd"",""alice"",""tyler""]
Next: look at what you are doing here:
  for x in list:
    x={}

Each time around, the variable x is assigned one of the student names, say “lloyd”. Then, the same variable, x, is re-assigned the value: an empty dictionary. That student name is lost when you re-assign your iteration variable. You need something like:
  my_dict = {}
  for x in list:
    # do something here to make x a key in my_dict, whose value is an empty dictionary.

… maybe:
if not x in my_dict:
  my_dict[x] = {}

I’ii let you take it from there.

Thank you for your reply!
Makes sense. I’m really new at this so I may say and think stuff that are completely against python language. So a list must contain defined data, it cannot contain undefined variables. I should go check the exercise with lists again.




 patrickd314:

First, fix the list: students=[""lloyd"",""alice"",""tyler""]


how are we now going to the variables with the right names then? you need to end up with:
lloyd = {
  ""homework"": [],
  ""quizzes"": [],
  ""tests"": [],
  ""name"": ""lloyd"",
}


The lists and dictionaries exercise always used strings or numbers as list items. And then we worked from there - all of the items had their type defined.
students=[""lloyd"",""alice"",""tyler""] is making me feel uncomfortable because I have strings in my list.
How can I transform these strings into dictionaries? That is why I first wrote
students=[lloyd,alice,tyler] but now I understand why it won’t work. I have to rethink this…

you could do:
lloyd = {}
alice = {}
tyler = {}

students=[lloyd,alice,tyler]


Yes, that is the easy way for low number of students. I wanted to define a function that would create empty dictionary for each student.

The way the exercise works will not allow what you want, if you let go of the exercise requirements you get a lot more possibilities:
class School:
    def __init__(self, *args):
        self.create_student(*args)

    def create_student(self, *args):
        for arg in args:
            setattr(self, arg, {})
            student = getattr(self, arg)
            student['homework'] = []
            student['quizzes'] = []
            student['tests'] = []
            student['name'] = arg.capitalize()


the_school = School(""alice"", ""lloyd"", ""tyler"")
print(the_school.lloyd)


This looks way more classy, but is out of my league.
Loving the student['name'] = arg.capitalize() block. So much more elegant.
Thank you for your help, you just made me buy the Pro version, I love it here!




 stetim94:

lloyd = {} alice = {} tyler = {} students=[lloyd,alice,tyler]


I did as you suggested and then tried to define the function that would complete the task. I see I was trying to transform a dictionary to a string before which is a no no:



 samuelsonmarinho:

x[“name”]=str(x)[0].upper()+str(x)[1:len(str(x))]


Is there even a way to complete my function with my knowledge so far? I took it step by step from the beginning in Python 2 coding, never wrote anything else before.

yea, instead of a class use a dictionary:
def create_students(*args):
    students = {}
    for arg in args:
        students[arg] = {}
        students[arg]['homework'] = []
        students[arg]['quizzes'] = []
        students[arg]['tests'] = []
        students[arg]['name'] = arg.capitalize()
    return students

print(create_students(""alice"", ""lloyd"", ""tyler""))

again, this will not work with the exercise.

lol, apparently it can be. Nice to be proven wrong sometimes:
def create_students(*args):
    for arg in args:
      	
        globals()[arg] =  {
          'homework': [],
          'quizzes': [],
          'tests': [],
          'name': arg.capitalize(),
        }

        
create_students(""alice"", ""lloyd"", ""tyler"")
print(alice)

I would like to add a serious note to this code, its very very bad practice. I would much rather have the classes or dictionary solution.

I submitted my code which wasn’t excepted - when I pressed ‘solution’ I was just missing  in all but the names…item? (Sorry no idea what this is called officially).
What is ? What does it do? Why can an item thing not be left blank in a dictionary if you use a comma anyway?

This was the square brackets - not a square, obvsly!
Edit - is it because they are lists? Not item thingies?

here:
'homework': [],

you assign an empty list to homework, a student will get multiple homework grades, so you need a data type that can hold multiple values, a list can do this
on the other hand, a student name can just be represented as a string, what would be the value of using a list for the name?

Could someone please explain to me what I am doing wrong here?
lloyd = {“name”, “homework”, “quizzes”, “tests”}
alice = {“name”, “homework”, “quizzes”, “tests”}
tyler = {“name”, “homework”, “quizzes”, “tests”}
students = [name(“Lloyd”), name(“Alice”), name(“Tyler”)]

what are you trying to do?

I’m trying to print out the integer value for each student from the dictionaries. I’m very new at this so I don’t doubt a lot of it is wrong.
"
171,What are the different types of loops good for?,"FAQ,Python FAQ",q-a,7,"
Question
What are the different types of loops good for?
Answer
In Python we have learned about several kinds of loops so far:

The for-each loop, which is great for iterating over each item in a list or dictionary or word - anything iterable. It doesn’t, however, give us the index of the current item we’re accessing.
If you need the index for any reason, using for is better. One reason to use the regular ol’ for loop with an index number to work with is to check how many times you’ve looped so far, or what position you’re at in an iterable.
The while loop comes in handy when you aren’t sure if you want to enter the loop at all. For example, if you’re looping to get user input until it’s valid, you definitely want to loop at least once, but you have no way of knowing how many times the user might give invalid input, so you couldn’t use a for loop that loops a specified number of times.
The while-else and for-else loops are useful for the same reasons, but have the added benefit of giving functionality when the loop exits normally.

","
What do they mean by “for-each” ? And how does it differ from “for” ?

point 1 and 2 from the answer both use for keyword.
if you want elements from the iterable (could be string or string for example) you get:
for value in element:

to get the indexes:
for index in range(len(element)):

to get both python offers a built-in function:
for index, value in enumerate(element):


I see. That clarifies it. Thank you.

Hi, I am currently at the module titled ‘Introduction to Pandas’, I have not come come across the lesson on loops yet. where exactly in the course is the loop function covered? I have seen several applications of loops during my study, and yet, I have yet to find a lesson on it. Please help provide a reference to where the topic of loops is covered

python3 course (pro only):
https://www.codecademy.com/courses/learn-python-3/lessons/learn-python-loops?action=resume_content_item
python2 course:
https://www.codecademy.com/courses/learn-python/lessons/python-2-loops?action=resume_content_item
of the pro-intensive course, i am not sure.




 prosowski:

What do they mean by “for-each” ? And how does it differ from “for” ?


Just like stetim94 already explained, for-each is a reference to “for” loop in which you want to loop through all of the elements in the given list of elements and you don’t necessarily know the exact amount of the elements you are working with. It’s also worth noting, that some other programming languages have even a separate version of this command like “foreach”, “forEach”, “For Each”, etc. For this reason, I’m not quite sure if I like the way Python handles “for-each” loops, because I’m used to “foreach” from elsewhere, so when I think “for”, I usually don’t want to think “foreach”, because it confuses me, but I guess I will have to get used to it. 
"
172,How does the list comprehension in the example code work?,"FAQ,Python FAQ",q-a,2,"
Question
In the context of this exercise, how does this list comprehension in the example work?
[t*element + w*n for element in range(d)]
Answer
The list comprehension provided in the example code returns a list of x values for the bar locations in the graph.
There are 4 variables which will let us do this:
n determines which dataset it is currently for.
t determines the total number of datasets to graph side by side.
d tells us how many bars there are per dataset.
w tells us the width of each individual bar.
If we take the provided values for the first dataset China Data, we get
[2*element + 0.8*1 for element in range(7)]
This essentially means, for each element in range(7), construct a list where each element is
2*element + 0.8
This would give us this list of values,
[0.8, 2.8, 4.8, 6.8, 8.8, 10.8, 12.8]
If we change n to 2 for the second dataset US Data, it gives us the list
[1.6, 3.6, 5.6, 7.6, 9.6, 11.6, 13.6]
These x values will position each pair of bars for each set of data next to each other in a clear way.
","
Hello, i’ve been struggling to understand the logic behind this concept (hope i’m not the only one here) as I like to understand how the code works and not so much to remember or copy-paste the formula.
I tried to simplify the code hoping it could help me understand how it works and I think I’ve got it now. I will post it here hoping someone can give me feedback to check if i’m doing something wrong (and if i’m right to help those that struggle to understand like I did):
store1_x = [X*2 for X in range(6)]

plt.bar(store1_x, sales1)

# Here's the basic formula for the first set of bars (blue ones). 
# As I understand, you want a list from 0 to 5 ( range(6) ) because you need to plot 6 blue bars. 
# X is every element of that list, and it's being multiplied by 2 to separate the blue bars between each other to make room for the orange bars.


store2_x = [X*2 + 1 for X in range(6)]

plt.bar(store2_x, sales2)

# This is the code for the orange bars, it's the same as above, but adding 1. 
# This places the orange bar one space to the right of the preceding blue bar. 
# In the exercise this was originally 0.8, which places the blue and orange bars next to each other.
# A width of 0.8 is actually better to understand the data, but I changed it as it helped me to visualize how the code works.


So basically you’re creating two lists of positions:
[0, 2, 4, 6, 8, 10]
for the blue bars
and
[0+1, 2+1, 4+1, 6+1, 8+1, 10+1]
or
[1, 3, 5, 7, 9, 11]
for the orange bars
NOTE: I know this code positions the ticks in the X axis differently than the initial code, but I think this doesn’t matter when you’re working with string type labels (such as ‘months’, or in this case ‘drinks’) (?)
I hope someone can tell me if i’m understanding this correctly and help others that like to understand how their code works.
Cheers! 
"
173,"Given a single table, how can we split it into multiple tables?","FAQ,Python FAQ",,4,"
Question
In this exercise, it mentions splitting the table into multiple tables. Given a single table, how can we split it into multiple tables?
Answer
In this context, the tables are dataframes. Because they are dataframes, we just need to split the dataframe into separate CSV files using methods from Pandas.
The following example will split a dataframe (“table”) into separate dataframes (“tables”), and save them into separate CSV files, to make them more manageable to work with.
Example
# First, read the original CSV and store in 
# a variable. This is the original ""table"".
data = pd.read_csv(""filename.csv"")

# Split the dataframe into separate ones, by columns.
# These are the ""tables"".
df1 = data[['col1', 'col2']]
df2 = data[['col3', 'col4', 'col5']]
df3 = data[['col6', 'col7', 'col8']]

# Now, we just need to store these into 
# their own CSV files.
# Note: index=False is used to remove the added index column.
df1.to_csv('table1.csv', index=False)
df2.to_csv('table2.csv', index=False)
df3.to_csv('table3.csv', index=False)

","



 jephos249:

Split the dataframe into separate ones, by columns. # These are the “tables”. df1 = data[[‘col1’, ‘col2’]]


could you split the table using the function which pulls the first 3 and the last 3 columns, assuming it’s only 6 columns long using [-3:]/ [0:3] ?

Can anyone point to a good resource on theory for setting up a dataframe from scratch? It seems like we are getting contradictory messages about what makes for a ‘good table’ with ‘useful data’. In this lesson, it stresses that a dataframe that repeats information, such as customer name, products, etc., can ultimately result in tables that are big and unmanageable. However, in other lessons that focus on ‘tidy data’, it seems to stress that this kind of repetition is actually desirable for working with the data and doing analysis. So what’s the deal? Is it the difference between efficiency of data storage vs. efficiency of data usage? What is the actual best practice here?

Is your question about setting up a database from scratch? A database is a collection of tables (or dataframes in Pandas). For theory behind setting up a relational database from scratch, I found this resource provided a helpful overview: https://launchschool.com/books/sql/read/table_relationships
"
174,When should I create a dataframe using a dictionary or a list?,"FAQ,Python FAQ",q-a,4,"
Question
When should I create a Pandas dataframe using a dictionary or a list?
Answer
You can create Pandas dataframes using either a dictionary or a list of lists, but depending on several factors, using one can be preferred over the other.
Using dictionaries can be much faster, since you can just include the column names as the keys, and include the values of the column as a list for the keys. However, a disadvantage of using a dictionary is that the columns will not preserve the order that you entered them, and will default to alphabetical ordering instead. This is important to keep in mind especially if the column order is important.
Using a list of lists allows you to enter each row of data one at a time as a  separate list, but it may take longer than using a dictionary, since column names must be added as a separate list after the rows are added. However, a list of lists allows you to order the column names specifically, which can be very important.
","
Thanks! Is there a way to use dictionaries and order the columns afterwards?



stackoverflow.com






How to change the order of DataFrame columns?


python, pandas, dataframe


  asked by
  
  
    Timmie
  
  on 10:22PM - 30 Oct 12 UTC






Basically create a reordered list including all the column names and then use the list as an index when creating a copy of your df.
also this: Can we select columns of a dataframe in any order?

I was just thinking that…it’s so easy and saves time as you people have already pasted the links at the bottom of the exercises. Codecademy is the best…there’s no doubt about that. You are amazing @jephos249.
"
175,When would we need to modify a dataframe in Pandas?,"FAQ,Python FAQ",q-a,2,"
Question
When would we need to modify a dataframe in Pandas?
Answer
Using Pandas, it’s important that we have the ability to modify dataframes when needed.
These are some of the most common reasons where you might need to modify dataframes in Pandas.


Adding a new row to the dataframe.
One important reason for modification is when we need to add a new entry to the table, which is usually referred to as a row.


Adding a new column.
In Pandas, columns are similar to columns as used in SQL databases. They allow us to have similar values that fall under different columns. A common modification of a dataframe is adding a new column if we are expanding the dataframe to include more columns to add more information.


Renaming a column.
We may need to rename a column to something else that makes the data more clear to users. For example, if we had a dataframe of information regarding movies, and the column name for the movie titles was simply called “name”, this might not be obvious. We might rename the column to something clearer like “movie_title”.


Modifying a specific row of data.
We sometimes need to update a specific row, or even multiple rows, in a dataframe.


","
this lesson
df = pd.read_csv('shoefly_messy_orders.csv')


didn’t talk about the file location matter.
"
176,FAQ Hint: Be aware of nesting iteratives and loops,"FAQ,Python FAQ",,15,"
Concept
As per this lesson, you may find yourself wanting to combine loops like for and while. However in doing so, it is important to understand how they will interact when nested.
Mechanics
There are a few key issues that I have seen pop up regularly in questions:
The first if you have two for loops, the inner for loop will run completely for each step in the outer for loop. Example:
list1 = [1,2,3]
list2 = ['a', 'b', 'c']
for n in list1:
  for L in list2:
    print(str(n) + L)
#output: 1a, 1b, 1c, 2a, 2b, 2c, 3a, 3b, 3c

As you can see, it cycles through all of the second loop before moving on to #2 in the first loop. This also demonstrates that a variable used in the outer loop can be used in the inner loop. Variables from the inner loop can be used in the outer loop but only after being defined (this could be useful if you were creating a list for example).
On the other hand, an outer while will not be checked during the running of an inner loop.
i = 0
while i < 2:
  for n in range(0,6):
    i = n
    print(i)
#output: 0, 1, 2, 3, 4, 5

As you can see, the inner for loop will run to completion ignoring the while loop even though you may have expected it to stop once i was 2.
These are just a couple examples that will hopefully help solve issues with your own code. Please discuss below and help each other to further solve challenges that arise.
","
@catower, great comments!.
It’s also well to note that (unlike in some other languages) you can’t adjust the value of the iteration variable from within a for loop, as you can from within a while loop.
for i in range(0,3):
    print(i)
    i = i + 10
    print(i)

Output:
0
10
1
11
2
12

Here, at least within the loop, range() keeps an iron grip on the value of i.




 patrickd314:

It’s also well to note that (unlike in some other languages) you can’t adjust the value of the iteration variable from within a for loop, as you can from within a while loop.


Indeed. 
This is because the for implementation in Python leverages an internal counter to track which item from the iterable sequence comes next, and overwrites your target variable (i in your example) with that value each iteration until it reaches the end of the iterator.
This is why you get odd behaviour in some cases, for example if you remove items from a list while iterating over it.

So I completely misinterpreted the question and thought I was supposed to delete all the elements which are even numbered, and it sent me down a rabbit whole for a few days. I feel like the more I progress, the more the questions become more obtuse.
Anyway, I would like to share all my failures in order to help those who come after. Ultimately, I don’t think I solved it the way CA intended it to be solved. But hey, it works
#Write your function here
def delete_starting_evens(lst):
  index = 0
  for element in range(len(lst)):    
    if lst[element] % 2 == 0:
      index += 1
    else:
      break
  del lst[:index]
  return lst
  
      

""""""def delete_starting_evens(lst):
  index = -1
  while index >= 0:
    for element in range(len(lst)):
      print(lst)
      if lst[element] % 2 == 0:
        del lst[element]        
      index +=1
    return lst""""""

""""""def delete_starting_evens(lst):
  index = -1
  for element in range(len(lst)):
    #print(lst[element])   
    if lst[element] % 2 == 0:
      #print(lst[element])
      index += 1
      #print(index)
  print(index)
  print(lst[:index])
  del lst[:index]
  return lst""""""
      
      
""""""
  element += 1
  del lst[:element]
  return lst""""""


""""""def delete_starting_evens(lst):
  for element in range(len(lst)):
    if lst[element] % 2 == 0:
      print(lst[element])
      continue
    else:      
      return lst""""""

""""""def delete_starting_evens(lst):
  while lst:
    for element in range(len(lst)):
      if lst[element] % 2 == 0:
        del lst[element]
      else:
        break
  return lst""""""

""""""def delete_starting_evens(lst):
  for element in reversed(range(len(lst))):
    if lst[element] % 2 == 0:
      del lst[element]
      # print(lst[element])
  return lst""""""

#Uncomment the lines below when your function is done
print(delete_starting_evens([4, 8, 10, 11, 12, 15]))
print(delete_starting_evens([4, 8, 10]))









The word “delete” is a bit misleading.
Generally a function or method should either modify something, or return a new something. Not both. If it does both then the user might use one but not account for the other, and it’s pretty weird to present the result in two ways when there is only one result.
Unless the intention is specifically to modify an existing value, then you’ll want to create a new value and leave the input unchanged.
So the spirit of the function then is to create a list that is a copy of the original, but without leading even values.
Your function is easily amended by changing this:
  del lst[:index]
  return lst

To not modify the original, and instead return a copy from index and onwards.
It’s also worth noting that this easily breaks into two separate and composable concepts, dropwhile, and a condition, so this would be one implementation:
from functools import partial

def dropwhile(p, xs):
    res = list(reversed(xs))
    while res and p(res[-1]):
        res.pop()
    return list(reversed(res))

def even(x):
    return x % 2 == 0

delete_starting_evens = partial(dropwhile, even)


Oh, oh, I spend alot of time to solve this task.
In most I hade an Empty value
And I got it to return of a list to the funktion and move the indent to
def delete_starting_evens(lst):
    while len(lst) > 0 and lst[0] % 2 == 0:
      lst = lst[1:]
    return lst  


Your post helped clear things up. I think I was under the same impression as
@kurthamm5378307535.

Why doesn’t this work?
def delete_starting_evens(lst):
  for i in lst:
    if i % 2 == 0:
      lst.remove(i)
    else:
      break
  return lst


if you change the thing you’re looking at then it’ll look different. you’d need to account for those changes when looking at it or change a separate value
list.remove isn’t what you want anyway

Can please somebody kindly explain why do we need to know the length of the list in order to make this function to work properly? Thank you!

It depends a little on which solution you are looking at (if it’s not the while loop then my apologies, a short piece of the code that’s troubling would help).
If it’s a while loop, len(lst) is used to avoid throwing errors. This would occur in an instance where every value in lst is even. Without checking to see if the list is still populated with len(lst) > 0, slicing and methods such as .pop() would throw index errors.
You could skip the len() calls as with Python empty lists along with similar types have a false boolean value and you could use this to check if the list was still populated such that-
lst = 
bool(lst) == False
if lst: print(‘test’)
Would print nothing, whereas
lst = [‘b’]
bool(lst) == True
if lst: print(‘test’)
Would print ‘test’.
Whether this is more or less readable is a little up for debate-


stackoverflow.com






How do I check if a list is empty?


python, list


  asked by
  
  
    Ray
  
  on 06:20AM - 10 Sep 08 UTC







That’s exactly the answer I was looking for. I think i get it now, thanks! Will also read through the link you shared

I could not grasp the logic on this example.
i = 0
while i < 2:
  for n in range(0,6):
    i = n
    print(i)
#output: 0, 1, 2, 3, 4, 5

I thought if n=i and when n gets to 2, n should stop

Hi @py4630439988.
Check the nesting on these loops. The for loop is separate to the while statement whilst it runs. The conditional i < 2 is checked once at the start of the while loop when i == 0 which evaluates to True. Code inside the while loop is then executed (it does not check the value of i again until this has finished).
For loop runs and prints 0 through to 5 (i does change but it is never checked against anything). Once the for loop has finished i == 5. As the code inside the while loop has now been executed it starts it’s next iteration and the the check for the while loop is performed again i < 2 which is now False since i == 5.
So I think your issue is that you expect the while loop conditional i < 2 is checked more often than it is.

its cleared now thx a lot
"
177,"Why do we write this method after the variable, unlike len( )?","FAQ,Python FAQ",,7,"
Question
Why do we write this method after the variable, unlike len( )?
Answer
Some methods, like len( ), are built into Python and can be used on lots of different things. Others, like lower( ), belong to strings, and can only be used attached to strings, and that’s why you see them attached at the end of a string instead of being on their own with a string inside their parentheses. A lesson on this exact topic, with more detail, is coming up soon!
","
I had noticed this earlier and got confused – did the wrong thing here…think it would be helpful to explain this earlier – hate having to get things wrong especially as you example on a previous screen showed lower followed by parens… Another thing which is confusing is why you have to put empty parens round things like this example print var.lower()
Not your fault - nature of the language but it needs stressing earlier.

That is the challenge, to explain these concepts earlier on, you would overload learners with information like functions, methods, classes, instances and so on. Not a great idea either

I completely agree. I feel like I was tricked into getting it wrong which is a really demotivating way to learn something new.
It’s not as if the information is really that complicated at this point. No need to hold back on the explanation until two cards later.

My issue is how the instructions are worded. it actually doesn’t make sense when you read it. I could infer what was intended based off the example ( kind of) butttt…you guys gotta work on being more explicit in the instructions. it literally made no sense, what does “call lower()” mean? should it say “enter” or “type lower()”?

That make so much sense, thanks a lot!

IMHO this is exactly the right way to learn. To spoon feed us explicit instructions means that we plod on without having to think - making errors in a safe environment demonstrates what can go wrong and we remember that.
"
178,How can I write the binary equivalent of a number?,"FAQ,Python FAQ",,5,"
Question
How can I write the binary equivalent of a number?
Answer
To write any number in binary, add the necessary powers of 2 until you’ve got your number. This is easy enough for small numbers, but not feasible for larger ones. For a better method, check out this video tutorial on converting decimal to binary!
","
This video really helped me out, thanks!

Take any number and divide it in half repeatedly disregarding remainders along the way until you get to 1. Write each answer to the left of the previous answer. Under each answer you write 1 if the answer is odd and 0 if the answer is even.
Example:
Write 2019 in binary.

1   3   7   15    31    63    126    252   504   1009   2019  - Repeatedly half 2019 until you get to 1, 
                                                                disregard remainders
1   1   1    1     1     1      0      0     0      1      1  - Write 1 under odd answers, 0 under even.

Answer: 2019 in binary is 0b11111100011.


Fantastic, you should integrate Khan Academy in your maths section of CodeCademy. That would make your offering close to perfect.

Another good video with another method of converting a decimal number to Binary using 2-4-8-16-32-64-128 bits places





"
179,Does the character being replaced in .replace() have to be nonempty?,"FAQ,Python FAQ",,8,"
Question
In the context of this exercise, does the character being replaced in the .replace() method have to be nonempty?
Answer
No, the character being replaced in the .replace() method does not have to be a nonempty string, and can be the empty string ''.
When providing an empty string as the argument for the character to be replaced, this will essentially replace every part between characters in the string. One way you can look at this, is as though every nonempty character has two empty spaces around it, which can overlap with their adjacent characters.
Here is an example that might help to illustrate this more clearly
empty_string = ''
replaced = empty_string.replace('', '!!!')
print(replaced) # !!!

example_string = ""code""
result = example_string.replace('', '==')
print(result) # ==c==o==d==e==

","
Hello,
if in this example:



 jephos249:

example_string = “code” result = example_string.replace(’’, ‘==’)


instead of '' we used ' ' as a character to be replaced, what would happen? Would it give us some kind of error because we don’t have any whitespaces in our string (“code”)?
Thank you.

If in s.replace(old, new), old is not present in s, the function simply returns s.
s1 = 'abc'
s2 = s1.replace('b', 'x')
s3 = s1.replace('z', 'x')
print(s2)
print(s3)

# Output:
axc
abc


Consider,
>>> 'code'.replace('', ' ')
' c o d e '
>>> 

As we can see there is a preponderance of empty strings through the string, code so the method does what it knows how to do. It replaces every instance with a space.
It does not know how to replace something that is not there so it simply ignores it and does nothing.

How can I count empty spaces ‘’ in a string I’m trying something like this :
my = ""abcdef""

for i in my:
  if i == '':
    print(""yes"")

specially how replace method detect empty places  in given string




 css7713845194:

for i in my:


The for loop will only iterate over members of the sequence (characters). There are no characters in between. What replace does is not the same. It replaces all instances of nothing with a space (in the above). We would need to know the inner workings of the method to understand how it does this, but that is not important. We know that we can insert a character or characters between each character in a string.
We can demonstrate similar behavior with the str.join() method.
>>> ' '.join('abcdef')
'a b c d e f'
>>> 

The how of it is a bit of a mystery, but the logic makes sense.
Bottom line, use only code that we understand and can predict the behavior of so we know what to expect, and how to plan it.

.replace can take 3 arguments i.e,
word = ""Hello Hello Hello""
re = word.replace(""H"", ""J"", 2)

here 2 is the number of times you want the word or character to be replaced


You have just mentioned 2… just wanted to say that




 cloud5428235796:

can take 3 arguments


Which if anybody reads the documentation they will be quick to learn. However, it is moot if we want global replacement, which is the default when we do not specify a maximum count.
"
180,How can I round a decimal?,"FAQ,Python FAQ","general,q-a",8,"
how to decide the number of digits after the dot (this is a general question. I have seen many funny 143.0000000001) thks
","
Use string formatting:
n = 5/3
print(""As a float, n = {:.3f}"".format(n))

# Output:
As a float, n = 1.667





 philippe.maleprade:

I have seen many funny 143.0000000001)


That is the result of floating point arithmetic, the rather complex process by which computers do math in binary. The error is very, very tiny, something on the order of 10 to the minus 14. We can expect this sort of result when multiplying floats, or when dividing, either float or integer.
If 143.0000000001 is the result of division, and you always want an integer quotient, use floor division
x // y => int quotient (i.e., 143)

If you want a float, but with a single decimal place,
round(143.0000000001, 0) => 143.0

or,
round(143.0000000001, 1) => 143.0

We can floor divide by 1 to convert to an int
 143.0000000001 // 1 => 143

All of the above preserve the number type.
We can convert an int to a float (in Python 3) by dividing by 1.
143 / 1 => 143.0

“Integer division” using the // operator with a float in either position results in a float.
>>> 143.01//1
143.0
>>> 143//1.0
143.0
>>> 

… but the math.floor() function returns an int:
>>> import math
>>> math.floor(143.01)
143
>>>





 patrickd314:

float in either position results in a float.


D’oh! I know that. What was I thinking? Blame correction bias, or blindness to facts known. With aging, one suspects this will continue to creep in. Thanks for setting us right. (Aside: Made you look!  )
What is reinforced is the fact that int is not a given. The quotient can be a float with a singular decimal place, of value, zero, and still be an equivalent quantity to an int of same whole number value.
This is likely not the first time committing this same blunder. Some of us have a hard time storing a permanent correctness on binary choices. Taken over time, asked the same question we will give a spread of responses, not always the definitive.
Being correct is not as important as being corrected, which for cases such as above described, it’s the correct prescription. A need for others to catch those slips is greater than ever in a binary learning environment. Mistakes help us learn, especially if they help us hook on to the definitive with an everlasting certainty.


…  the fact that  int  is not a given  …  This is likely not the first time committing this same blunder.

Ah! So true, and so frustrating to discover when you have come up with an especially imaginative way to get at a certain index, that it turns out to be a float!

merci pour votre réponse

To avoid floating point division and rounding inaccuracies use math or numpy module. As I am aware they solve the issue
"
181,How should my while/else be indented?,"FAQ,Python FAQ",,14,"
Question
How should my while/else be indented?
Answer
When making a while / else statement, the while and the else should be on the same level of indentation. In the example code below, we can see that while and else are totally unindented:
count = 0
while count < 3:
  num = random.randint(1, 6)
  print num
  if num == 5:
    print ""Sorry, you lose!""
    break
  count += 1
else:
  print ""You win!""

If you indent the else at the end that tells the user they won, then it will attach it to the if inside of the loop, which isn’t the goal here!
","
2 posts were split to a new topic: Is there something wrong with this code?

Why is this while loop only running one time?  https://gist.github.com/be8701724f37ca552cfc8d43ebeb200a
This is how I read each line of the code and what I expect to happen yet it only runs once.
while guesses left greater than 0:
Ask user for a guess
if guess equals the random number:
print “You win!”
Exit (i.e. break) the loop
Remove a guess by 1
if guesses left are not greater than 0:
print “You lose”

If you put guess = int(raw_input(""Enter your guess: "")) expression inside a while loop it’'ll  be works. This is just what I see.

I don’t understand why my code is rejected by CC despite checking that all indentation matches the model given (edit: as well as the Solution). Also, I don’t see why after entering the first guess, the second line shows the string twice:
Your guess: Your guess

Codecademy-while.png.jpg3764×1906 327 KB


I have the same issue. Also interested in the answer.

+1. The same issue.
raw_input inside the while loop works incorrectly

same here

ac63f1b5682d57e0953c4fff7a8c8f3ccd0185d6.png1046×488 23.9 KB


I had the same issue. Even when I asked for the solution, the while loop didn’t work correctly. Reloading the page in my browser fixed the issue. I’m starting to see this trend a lot, especially if I step away and the session times out before I get back to it. Now any time I have a problem that seems strange, I reload the page and it usually fixes itself.

I have the same issue!

in my opinion,first you must change guesses_left decrement by one not in “your win” but in after code ptint “your lose”.
then,you get in next line to write guesses_left decrement by one.otomatic this code not end because after print "" you win "" in the next line you write break

well i have found out the mistake
we have to put guesses_left-=1 after the raw_input statement rather than in the if condition
Cheers!

Even the actual solution has a problem
from random import randint

# Generates a number from 1 through 10 inclusive
random_number = randint(1, 10)

guesses_left = 3
# Start your game!
while guesses_left > 0:
  guess = int(raw_input(""Your guess: ""))
  if guess == random_number:
    print ""You win!""
    break
  guesses_left -= 1 #alligned with if
else:
  print ""You lose.""

although the code is right, but the output if the second guess is right a third guess should not be promoted.

I was using the same code as you, it didnt work in firefox, but was good in chrome.
"
182,Why does it say my variable is not defined?,"FAQ,Python FAQ",,5,"
Question
I’ve written my code and when I press run it tells me that my variable isn’t defined; why is that?
Answer
It’s easy to overlook a typo in your code when you’re working through it the first time. If you run your code and are met with an error message saying something like below, then you likely misspelled a variable name and need to take a look back over the line number pointed out by the error message.
NameError: name ‘var_name’ is not defined

In the code below, for example, notice how the variable names are slightly different. It will give an error if we try to run it!
my_varaible = 10  # see the typo here?
print my_variable

","
I defined a variable with variable = x/y but it says not defined. Equasions not be used for a definition?

Can we see your full code? Did you defined x and y before using these variables?

I don´t have the code, but I defined them with numbers. Maybe it was just a typo




 java5248858020:

but I defined them with numbers.


them? You mean the x and y variable? So you have more code then you posted on the forum?
oh, no. We can’t use x and y like in a math equation. Now x and y are undefined variables.
"
183,Can list slicing work without specifying the end?,"FAQ,Python FAQ",,6,"
Question
In this exercise, the list slice shows a start and end point. Will a slice work without specifying the end?
Answer
Yes, it is possible to use a slice without specifying the end. In that case, the slice will return the list from the start point through the end of the list. This would be useful if you wanted to remove a known number of items from the start of the list and keep the remainder.
In the following example code, a list is sliced using a defined start and end point and then again specifying only the start.
colors = ['red', 'green', 'blue', 'yellow', 'orange']

# Values from index 1 to less than 4 = ['green', 'blue', 'yellow']
print(colors[1:4])

#  Start at index 1 till end = ['green', 'blue', 'yellow', 'orange']
print(colors[1:])

","
From the exercise, if we use employees.append( ) to add a name to the list, can we select the 8th element in the list?
employees = ['Michael', 'Dwight', 'Jim', 'Pam', 'Ryan', 'Andy', 'Robert']

employees.append('Carlos')

print(employees(8))


Hey @cesararellano7696287, welcome to the forums!
A couple things you might want to remember are:



 cesararellano7696287:

print(employees(8))


To select an element of a list, you use square brackets() instead of parentheses(). So if you were going to do this, you would have to change that.

employees = ['Michael', 'Dwight', 'Jim', 'Pam', 'Ryan', 'Andy', 'Robert']
                 ^          ^       ^       ^      ^       ^        ^  
                0th        1st     2nd     3rd    4th     5th      6th
employees.append('Carlos')

If you added the list item ‘Carlos’ to the end of the list, that new element would be at list index 7 so this code would give you an error regardless.
Hope this helps!
Steven

Hi Steven,
Thank you so much. That’s what I figured would be the case. Appreciate the clarification.
Thanks,
Cesar

employees += ""john""
['Michael', 'Dwight', 'Jim', 'Pam', 'Ryan', 'Andy', 'Robert', 'carlos', 'j', 'o', 'h', 'n']

I added in carlos using append as discussed above, then tried to use += and it separates the letters in john.  Not sure what is different?  Thanks


Hi @core1805653314,
The string, ""john"", was converted to a list of its component characters in order for it to be concatenated to the list of employees. Try placing ""john"" within its own list, instead, in order to perform the concatenation, as follows:
employees += [""john""]

"
184,Why are there two kinds of comments?,"FAQ,Python FAQ",q-a,2,"
Question
An earlier exercise showed comments using the # symbol, so why do we need another type of comment?
Answer
In Python, comments begin with a # symbol and continue to the end of the line. Text that is delimited by three double quotes at its beginning and end actually forms a multi-line string rather than a comment. In fact, a multi-line string is really just a string. Both comments and multi-line strings come in handy in different ways!
Single-line comments are great when you need to:


Write a comment on the same line (inline), perhaps to explain a variable or value.


Comment out a single line of code so that it doesn’t run.


Multi-line strings are useful when you need to:


Remove large blocks of code from a process without deleting them.


Write documentation for a program or function. If a string is positioned as the first line within a function, it serves as a docstring that can be accessed programmatically. For docstrings, it is conventional to use multi-line strings.


Ultimately the style and choice is up to you, but if you’re interested in going down the style guide rabbit hole, here’s a link to Python’s PEP 8 style guide!
","
Although I’m not sure I would recommend to do many # instead of using the string thing. I don’t know the technical reason but I heard about it’s wrong and in some companies that’s what is done. Check on Google for more information or wait an OP answering me!
"
185,What are the backslashes in the string?,"FAQ,Python FAQ","q-a,strings",4,"
In the practice for .format() the backslashes are not included, yet I was supposed to know that it was needed? Why was it not shown in the example code?
","
""The poem \""{}\"" is written by {}.""

The topic of escape characters must have come up in early lessons on strings.
Above, the quotes inside the string are escaped so they are ignored by the string parser and render as printed characters.
The output will look like,
The poem ""I Hear America Singing"" is written by Walt Whitman.

We can also write the code so the string is in single quotes. This way no excapement is required.
'The poem ""{}"" is written by {}.'

Is there any way in which doing the method provided in this exercise:
'The poem \""{}\"" is written by {}.'.format(title, poet)

is better than:
'The poem ""%s"" is written by %s.' % (title, poet)

The second method seems simpler to me. Am I missing something? Is there a scenario where .format() is better?

The second example is legacy code inherited from C and written into early versions of Python, while the first was a late addition to version 2.7.x, i believe. It  is far superior to the its predecessor in many ways.
This page compares the two…

https://pyformat.info/

Study the examples and in the end, ask yourself, which is more powerful and robust?
Aside



 lonelypenguin42:

‘The poem “{}” is written by {}.’.format(title, poet)


When the opening/closing quotes are single, we don’t need to escape double quotes in the string.
'The poem ""{}"" is written by {}.'.format(title, poet)
"
186,Does the dictionary pop() function remove the item from the dictionary?,"FAQ,Python FAQ",q-a,3,"
Question
Does the pop() function on a dictionary just access the data or remove it?
Answer
The pop() function will return the value for the key AND then remove the key/value from the dictionary. The following code example shows the results of performing a pop() on a dictionary to remove the item indexed by key “C”.
letters = { ""A"": 10, ""B"": 20, ""C"": 30, ""D"": 40 }

value = letters.pop(""C"")

print(letters)
# {'A': 10, 'B': 20, 'D': 40}

","
is the .pop() in the dictionary a function or a method? how come in the lesson it specified as same with .get() method and here on the question and answer platform called function?
and can someone clarify difference between a function and a method?

Both .pop() and .get() are methods. Methods belong to a certain class, so can only be called on instance of that class. you can also recognize methods by the difference in calling style:
# calling print function
print(""hello world"")
# calling method
{}.get('a')

"
187,Can the data type of a value be changed when overwriting it in a dictionary?,"FAQ,Python FAQ",,3,"
Question
Once a value is added to a dictionary when it is overwritten, can the data type for the value be changed?
Answer
Yes, whenever a value is overwritten in a dictionary, it can be saved as another data type regardless of how it was originally stored. In the following code example, the value for key “B” is originally a number. It is then overwritten with a string value and finally a list of strings. All are stored as valid values for key “B”.
letters = { ""A"": 10, ""B"": 20, ""C"": 30, ""D"": 40 }

letters[""B""] = ""string""
print(letters)
# {'A': 10, 'B': 'string', 'C': 30, 'D': 40}

letters[""B""] = ('this', 'is', 'a', 'tuple')
print(letters)
# {'A': 10, 'B': ('this', 'is', 'a', 'tuple'), 'C': 30, 'D': 40}

","



 ajaxninja66418:

finally a list of strings.





 ajaxninja66418:

letters[“B”] = (“this”, “is”, “a”, “list”)


Typo. It’s a tuple of strings.




 pontustv:

It’s a tuple of strings.


Indeed, it is a tuple. We can verify that by adding this line of code at the end:
print(type(letters[""B""]))

Output from that statement:
<class 'tuple'>
"
188,What does it mean for code to be reusable and what good is that?,"FAQ,Python FAQ",q-a,7,"
Question
What does it mean for code to be reusable and what good is that?
Answer
You may hear people mention DRY programming, which stands for Don’t Repeat Yourself. Simple enough, but you’d be surprised how much time and effort you’ll save by following through with it!
Often at times we’ll write code that needs some functionality repeated several times, perhaps even with different values each time. For example, if we tried to calculate the cost of a bill and tip for every meal, we’d have to write out the entire calculation each time for every different meal!
Wouldn’t it be better if we could give the cost of the meal to a function and have it handled the same way regardless of what the meal is or how much it cost?
That’s what we’ll be looking into for the next little while! Making functions that are able to do some action given some input and produce some output, all in the name of saving time and energy!
","
What is the meaning of the *= symbol in code??

if i search: python *=, the first search result:
https://stackoverflow.com/questions/20622890/python-what-does-mean/20622898
google is your friend while programming.

How, depending on a given problem, should we use or not a function. I still have this little worry. Thanks in advance

This is an interesting topic.

#example variable value
bill = 10
#shorthand to calculate bill plus tax
bill *= 1.08
#the long version (bill = 10 * 1.08)
bill = bill * 1.08

The asterisk (*) is a multiplication symbol in this usage.
For example if sales tax was 8 percent and you want to know how much something is once you add tax it could be written as follows:
bill *= 1.08
   """"""because if you multiply something times 1, it stays the original amount. If you multiply an amount by 1.08 it remains the same figure plus 8 percent more. so it multiplies the amount that (bill) represented""""""
"
189,How can I create a CSV file?,"FAQ,Python FAQ",,3,"
Question
How can I create a CSV file?
Answer
There are several ways you can create a CSV file which you can use to store data which can then be utilized by modules such as Pandas.
Text Editor

You can use any text editor like Notepad to create a CSV file, by saving the file with the extension .csv.

Microsoft Excel

Using Microsoft Excel, you can save a file as a CSV file type. To do so, choose “Save as”, and under the “Save as type” option, choose “CSV (comma delimited)”.

Google Docs

If you have a Google account, you can quickly create a CSV file. To do so, open a Google Spreadsheet, then choose:
“File -> Download as -> Comma-separated values (.csv, current sheet)”

If you know of any other ways to create a CSV file, feel free to share them here!
","
CSV is a simple file format used to store tabular data, such as a spreadsheet or database. Files in the CSV format can be imported to and exported from programs that store data in tables, such as Microsoft Excel or OpenOffice Calc.

It seems Pandas has .to_csv() method to write a DataFrame to a CSV file.
import pandas as pd

df = pd.DataFrame([
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]],
        index=['row1', 'row2', 'row3'],
        columns=['col1', 'col2', 'col3'])

df.to_csv('some.csv')

"
190,How can I calculate a weighted average?,"FAQ,Python FAQ",,3,"
Question
How can I calculate a weighted average?
Answer
This part is a bit tricky, but basically we’re adding up parts to make a whole. That is, after all, the point of weighting these averages.
So if we say homework is 10%, quizzes are 30%, and tests are 60%, that accounts for 100% of the pie. When we go to return our value, then, we just multiply each average that we’ve calculated by its respective weight in decimal form, like this:
return (part_1 * part_1_weight) + (part_2 * part_2_weight) + (part_3 * part_3_weight)
","
Can someone please tell me what is wrong with my code on this? I am getting an error from Alice’s weighted average and I don’t know why.
This is the error:
get_average(alice) returned 151.1833333333 instead of the expected 91.15
Below is my code:
lloyd = {
“name”: “Lloyd”,
“homework”: [90.0, 97.0, 75.0, 92.0],
“quizzes”: [88.0, 40.0, 94.0],
“tests”: [75.0, 90.0]
}
alice = {
“name”: “Alice”,
“homework”: [100.0, 92.0, 98.0, 100.0],
“quizzes”: [82.0, 83.0, 91.0],
“tests”: [89.0, 97.0]
}
tyler = {
“name”: “Tyler”,
“homework”: [0.0, 87.0, 75.0, 22.0],
“quizzes”: [0.0, 75.0, 78.0],
“tests”: [100.0, 100.0]
}
Add your function below!
def average(numbers):
total = sum(numbers)
total = float(total)
return total / len(numbers)
def get_average(student):
homework = average(student[“homework”])
quizzes = average(student[“quizzes”])
tests = average(student[“tests”])
total = homework * .1 + quizzes + .3 + tests * .6
return total

you typed quizzes + . 3… it should be quizzes * .3
"
191,Can we change the colors of a pie chart?,"FAQ,Python FAQ",q-a,2,"
Question
In the context of this exercise, can we change the colors of a pie chart?
Answer
Yes, you can set specific colors for a pie chart using the colors parameter.
To set specific colors for a pie chart, you can pass in a list of color values. If there are more wedges than the number of colors, the wedges will cycle through the list of colors.
Example
plt.pie(data, colors=[""red"", ""orange"", ""yellow"", ""green""])

","
Thankyou so can we also change the color of the bars…
"
192,What are the different types of loops good for?,"FAQ,Python FAQ",q-a,7,"
Question
What are the different types of loops good for?
Answer
In Python we have learned about several kinds of loops so far:

The for-each loop, which is great for iterating over each item in a list or dictionary or word - anything iterable. It doesn’t, however, give us the index of the current item we’re accessing.
If you need the index for any reason, using for is better. One reason to use the regular ol’ for loop with an index number to work with is to check how many times you’ve looped so far, or what position you’re at in an iterable.
The while loop comes in handy when you aren’t sure if you want to enter the loop at all. For example, if you’re looping to get user input until it’s valid, you definitely want to loop at least once, but you have no way of knowing how many times the user might give invalid input, so you couldn’t use a for loop that loops a specified number of times.
The while-else and for-else loops are useful for the same reasons, but have the added benefit of giving functionality when the loop exits normally.

","
What do they mean by “for-each” ? And how does it differ from “for” ?

point 1 and 2 from the answer both use for keyword.
if you want elements from the iterable (could be string or string for example) you get:
for value in element:

to get the indexes:
for index in range(len(element)):

to get both python offers a built-in function:
for index, value in enumerate(element):


I see. That clarifies it. Thank you.

Hi, I am currently at the module titled ‘Introduction to Pandas’, I have not come come across the lesson on loops yet. where exactly in the course is the loop function covered? I have seen several applications of loops during my study, and yet, I have yet to find a lesson on it. Please help provide a reference to where the topic of loops is covered

python3 course (pro only):
https://www.codecademy.com/courses/learn-python-3/lessons/learn-python-loops?action=resume_content_item
python2 course:
https://www.codecademy.com/courses/learn-python/lessons/python-2-loops?action=resume_content_item
of the pro-intensive course, i am not sure.




 prosowski:

What do they mean by “for-each” ? And how does it differ from “for” ?


Just like stetim94 already explained, for-each is a reference to “for” loop in which you want to loop through all of the elements in the given list of elements and you don’t necessarily know the exact amount of the elements you are working with. It’s also worth noting, that some other programming languages have even a separate version of this command like “foreach”, “forEach”, “For Each”, etc. For this reason, I’m not quite sure if I like the way Python handles “for-each” loops, because I’m used to “foreach” from elsewhere, so when I think “for”, I usually don’t want to think “foreach”, because it confuses me, but I guess I will have to get used to it. 
"
193,What are some things that a bar chart with error can tell us?,"FAQ,Python FAQ",,3,"
Question
In the context of this exercise, what are some things that a bar chart with error can tell us?
Answer
Bar charts with error can tell us a few different qualities about the data.
One thing that error bars can tell us is the range of the values. The height of the bars of a bar chart typically represents the average of the values, while the error bars can show us the range of the lowest to the highest value contained in the data. By showing the range of lowest to the highest value, we can know that all the data falls within the error bars.
In addition, the actual sizes of the error bars can tell us how close, or how accurate, the data is. If the error bars are short, then this means that the values are close together. However, if the error bars are large, then the values must be spread out.
","
Hi, I am confused. In statistics, the error bar stands typically for the standard deviation or confidence interval.  It should not be used to show the highest and lowest value. Take this as an example. As we can see, the top of the bar is always in the middle of the error bar. Let’s say we have three numbers, (1,2,5). The average number is 4. So the top of the bar stands for 4. However, the biggest number of this series is 5, only 1 up from 4. Yet, the smallest number is 1, 3 lower from the 4. So the average value, 4 is no way between the error bar if the error bar tell us the highest to the lowest number,

In many cases error bars represent a standard deviation, or a particular confidence interval. However, this is not always the case. It seems that there are some cases where error bars represent maximum and minimum. I think it’s not wrong to say that error bars can represent the range of lowest to the highest value.
Since there are different usages,  each chart needs explanation. In any case, error bars don’t make sense unless there is a clear description of what they represents.
By the way, for the example of the three numbers (1,2,5), I think it will look like the leftmost bar in the chart below. The error bar shows the range between 1 and 5.

import matplotlib.pyplot as plt

averages = [4, 3, 3, 5]
lowerr = [3, 1, 1, 4]
higherr = [1, 1, 2, 1]

plt.bar(range(4), averages, yerr=[lowerr, higherr], capsize=5)
plt.show()

In the current version of matplotlib (I used 3.2.1), it seems we can specify different -/+ values ​​for yerr.
"
194,When would we need to modify a dataframe in Pandas?,"FAQ,Python FAQ",q-a,2,"
Question
When would we need to modify a dataframe in Pandas?
Answer
Using Pandas, it’s important that we have the ability to modify dataframes when needed.
These are some of the most common reasons where you might need to modify dataframes in Pandas.


Adding a new row to the dataframe.
One important reason for modification is when we need to add a new entry to the table, which is usually referred to as a row.


Adding a new column.
In Pandas, columns are similar to columns as used in SQL databases. They allow us to have similar values that fall under different columns. A common modification of a dataframe is adding a new column if we are expanding the dataframe to include more columns to add more information.


Renaming a column.
We may need to rename a column to something else that makes the data more clear to users. For example, if we had a dataframe of information regarding movies, and the column name for the movie titles was simply called “name”, this might not be obvious. We might rename the column to something clearer like “movie_title”.


Modifying a specific row of data.
We sometimes need to update a specific row, or even multiple rows, in a dataframe.


","
this lesson
df = pd.read_csv('shoefly_messy_orders.csv')


didn’t talk about the file location matter.
"
195,Can we stack more than 2 bars in a bar chart?,"FAQ,Python FAQ",,4,"
Question
In the context of this exercise, can we stack more than 2 bars on top of each other?
Answer
Yes, you can absolutely stack more than 2 bars on a bar chart.
In order to do this, the bottom of each subsequent set of bars should equal the total heights of the bars below them.
Example
# Given the follow y values for 3 groups of data
group1 = [1, 1, 1, 1]
group2 = [2, 2, 2, 2]
group3 = [3, 3, 3, 3]

x = [0, 1, 2, 3] # x positions

# First layer of bars
plt.bar(x, group1)

# Second layer of bars
plt.bar(x, group2, bottom=group1)

# Adding a third layer of bars.
# Calculate the bottom height of the third layer
# by adding together all lower layer heights.
bottom_of_3 = [1+2, 1+2, 1+2, 1+2] # [3, 3, 3, 3]

# Third layer of bars
plt.bar(x, group3, bottom=bottom_of_3)

","
You can also add up those numbers using numpy arrays - helpful when dealing with large lists of data:
import numpy as np # importing numpy
from matplotlib import pyplot as plt

sales1 =  [91, 76, 56, 66, 52, 27]
sales2 = [65, 82, 36, 68, 38, 40]
sales3 = [32, 35, 55, 95, 23, 2] # I just made these numbers up

plt.bar(range(len(sales1)), sales1, label=""Location 1"")
plt.bar(range(len(sales2)), sales2, bottom=sales1, label=""Location 2"")

# Creating a variable that contains an array of values 
# equal to sales1 + sales2 at each index
bottom_of_3 = np.array(sales1) + np.array(sales2)

# Creating third layer of bars using the new variable
plt.bar(range(len(sales3)), sales3, bottom=bottom_of_3, label=""Location 3"")

*Note that the use of numpy for stacked bar charts comes up in a later lesson. Thanks Codecademy 




 jephos249:

bottom_of_3 = [1+2, 1+2, 1+2, 1+2]


We can even use list comprehensions for the same.
sales1 =  [91, 76, 56, 66, 52, 27]
sales2 = [65, 82, 36, 68, 38, 40]
sales = [25,32, 37, 35, 55, 23] # I just made these numbers up

plt.bar(range(len(sales1)), sales1, label=""Location 1"")
plt.bar(range(len(sales2)), sales2, bottom=sales1, label=""Location 2"")

# Creating a variable that contains an array of values equal to sales1 + sales2 at each index

bottom_3 = [sales1[i] + sales2[i] for i in range(len(sales1))]
plt.bar(range(len(sales)), sales, bottom = bottom_3, label = ""Location 3"")
plt.show()

Hope this helps 

I think zip is useful here.
bottom_3 = [v1 + v2 for (v1, v2) in zip(sales1, sales2)]

"
196,"When plotting multiple lines in Matplotlib, does each need to have the same number of x and y values?","FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, when plotting multiple lines in Matplotlib, does each line need to have the same number of x and y values?
Answer
No, when you are plotting multiple lines, they do not need to have the same amount of x and y values, nor do they need to share the same x values.
When you plot multiple lines, it is as though each line is plotted separately onto the same graph.
For example, the following code will draw two lines on a single plot. The first line will be drawn on the x coordinates 0 to 4, while the second line will be drawn over the x coordinates 5 to 8. The second line will also have one less value than the first line.
Example
x1 = [0, 1, 2, 3, 4]
x2 = [5, 6, 7, 8]

y1 = [100, 200, 300, 400, 500]
y2 = [100, 200, 300, 400]

plt.plot(x1, y1)
plt.plot(x2, y2)

plt.show()

",
197,Does Seaborn provide other types of plots?,"FAQ,Python FAQ",q-a,4,"
Question
Does Seaborn provide other types of plots?
Answer
In addition to the plots shown in this lesson, Seaborn provides many other different types of plots, some of which are a visual improvement to existing plots in Matplotlib, or unique to Seaborn.
In Seaborn, you can implement relational plots such as lineplots or scatterplots, which are used to see relations between two variables.
You can also implement categorical plots, such as catplots, boxplots, and barplots, which allow us to see data separated by categories.
Seaborn also provides the ability to draw distribution plots, which let us visually see the distribution of some set of data. These includes pairplots, distplots, and kdeplots.
Another useful group of plots that Seaborn provides us are regression plots. These are used to analyze whether variables have a relation to each other, and include lmplots and regplots.
Seaborn also provides matrix plots, which visualize values using colors on a matrix-like graph, which include heatmaps and clustermaps.
To see all the available plots and functionality of Seaborn, check out the documentation!
","
Do you have a link to the documentation?

You can check out the documentation via this link: https://seaborn.pydata.org/examples/index.html

There’s just sooo much to Learn…
"
198,Why does it ask me not to use compute_bill?,"FAQ,Python FAQ",,27,"
Question
Why does it ask me not to use compute_bill?
Answer
If you think you’ve coded your function properly and are receiving an error message along the lines of stock doesn't look quite right! Make sure to not call compute_bill since it changes the stock!, this is because in this step we aren’t using the function after writing it, we’re just writing the function.
Try deleting where you used the function and then Run your code again.
It’s great to want to test your code! However, Codecademy runs tests to check your code that depend on the values being the original values, and running the function in your code in this step changes those values. You’ll be able to use it in the very next step!
","
Could you say me where is my problem
shopping_list = [""banana"", ""orange"", ""apple""]

stock = {
  ""banana"": 6,
  ""apple"": 0,
  ""orange"": 32,
  ""pear"": 15
}
    
prices = {
  ""banana"": 4,
  ""apple"": 2,
  ""orange"": 1.5,
  ""pear"": 3
}

      # Write your code below!
def compute_bill(food):
  total = 0
  for item in food:
    if not stock[item] <= 0:
      total += prices[item]
      
    else:
      print ((""Stock has no %s"") % item)
  stock[item] -= 1
  return total

print (compute_bill(shopping_list))


i would be possible to buy 9 bananas:
shopping_list = [""banana"", ""orange"", ""apple""]

stock = {
  ""banana"": 6,
  ""apple"": 0,
  ""orange"": 32,
  ""pear"": 15
}
    
prices = {
  ""banana"": 4,
  ""apple"": 2,
  ""orange"": 1.5,
  ""pear"": 3
}

      # Write your code below!
def compute_bill(food):
  total = 0
  for item in food:
    if not stock[item] <= 0:
      total += prices[item]
      
    else:
      print ((""Stock has no %s"") % item)
  stock[item] -= 1
  return total

print (compute_bill(['banana'] * 9))

while there are only 6 bananas in stock

Guys! Where is the key to solve the exercise?

i told you, if i attempt to buy 9 bananas, i can. Which shouldn’t be possible, because there are only 6 bananas in stock.

Hi,
I’m not sure if this solves your problem, but try indent the stock[item] -= 1 more.
It seems to me that currently it sits on the same level as the ‘for loop’ (i.e under the main function level) but it should be under the ‘for loop’ since we need to do that subtraction in each loop.
I hope this helps
cheers,
D.

Close, (s)he should only decrease stock when the item isn’t in stock, so it should be nested inside the if clause

I guess you wanted to write …the item is in stock…
anyway, it is strange because that’s what I thought at first but putting that line inside the if clause caused an indent error. So I went ahead and tried other indents. And strangely only the above mentioned (by me) worked.
today I went back and tried your suggestion again, and it worked now. pretty odd.
maybe it has something to do with tab vs space indentation?




 dborbas:

maybe it has something to do with tab vs space indentation?


the indent settings within the codecademy editor are not ideal.

A post was split to a new topic: A Day at the Supermarket: Why is this wrong?

You need to put stock[item] -= 1 in the if not statement you have it in the else statement.

I’ve been experiencing many IndentationError messages (in this as well as previous exercises) despite my code being identical to the solution and Codecademy wouldn’t allow me to move on unless I went for the Solution. I even tried deleting the indents of the error Line and reintroducing them in a consistent manner, but it still wouldn’t accept my code. Is there another solution? Do I need to delete all indents of every line and consistently reintroduce them line by line for my code to be recognized?
My code:

3e6a942022e9f7ca71d9883acf6206185afe6726.png3222×1804 627 KB

Solution code:

Codecademy-noerror.png3248×1820 553 KB


codecademy’s editor sucks when it comes to indent. I would re-indent the code in your own local editor, if you haven’t set this up, you could use sites like repl.it

Ok, thanks for the suggestion, I’ll try that next time.

Any idea what I’m doing wrong?

image.png625×853 49.8 KB


The dictionary value is not updated when you just minus 1 from the value, you then need to also set the dictionary value to the value minus 1.
stock[item] = stock[item] - 1

This was exactly the problem. Thank you!

The problem for me was the stock[item] = -1 did not work. I needed to make it stock[item -= 1

why am I getting errors with this code?
def compute_bill(food):
  total = 0
  for items in food:
    if stock[items] > 0:
      total += prices[items]
      stock[items] -= 1
  return total
print compute_bill(shopping_list)


That is literally what this FAQ answers:



 wiki-bot:

Question
Why does it ask me not to use compute_bill?
Answer
If you think you’ve coded your function properly and are receiving an error message along the lines of stock doesn't look quite right! Make sure to not call compute_bill since it changes the stock! , this is because in this step we aren’t using the function after writing it, we’re just writing the function.
Try deleting where you used the function and then Run your code again.
It’s great to want to test your code! However, Codecademy runs tests to check your code that depend on the values being the original values, and running the function in your code in this step changes those values. You’ll be able to use it in the very next step!


"
199,How does the list comprehension in the example code work?,"FAQ,Python FAQ",q-a,2,"
Question
In the context of this exercise, how does this list comprehension in the example work?
[t*element + w*n for element in range(d)]
Answer
The list comprehension provided in the example code returns a list of x values for the bar locations in the graph.
There are 4 variables which will let us do this:
n determines which dataset it is currently for.
t determines the total number of datasets to graph side by side.
d tells us how many bars there are per dataset.
w tells us the width of each individual bar.
If we take the provided values for the first dataset China Data, we get
[2*element + 0.8*1 for element in range(7)]
This essentially means, for each element in range(7), construct a list where each element is
2*element + 0.8
This would give us this list of values,
[0.8, 2.8, 4.8, 6.8, 8.8, 10.8, 12.8]
If we change n to 2 for the second dataset US Data, it gives us the list
[1.6, 3.6, 5.6, 7.6, 9.6, 11.6, 13.6]
These x values will position each pair of bars for each set of data next to each other in a clear way.
","
Hello, i’ve been struggling to understand the logic behind this concept (hope i’m not the only one here) as I like to understand how the code works and not so much to remember or copy-paste the formula.
I tried to simplify the code hoping it could help me understand how it works and I think I’ve got it now. I will post it here hoping someone can give me feedback to check if i’m doing something wrong (and if i’m right to help those that struggle to understand like I did):
store1_x = [X*2 for X in range(6)]

plt.bar(store1_x, sales1)

# Here's the basic formula for the first set of bars (blue ones). 
# As I understand, you want a list from 0 to 5 ( range(6) ) because you need to plot 6 blue bars. 
# X is every element of that list, and it's being multiplied by 2 to separate the blue bars between each other to make room for the orange bars.


store2_x = [X*2 + 1 for X in range(6)]

plt.bar(store2_x, sales2)

# This is the code for the orange bars, it's the same as above, but adding 1. 
# This places the orange bar one space to the right of the preceding blue bar. 
# In the exercise this was originally 0.8, which places the blue and orange bars next to each other.
# A width of 0.8 is actually better to understand the data, but I changed it as it helped me to visualize how the code works.


So basically you’re creating two lists of positions:
[0, 2, 4, 6, 8, 10]
for the blue bars
and
[0+1, 2+1, 4+1, 6+1, 8+1, 10+1]
or
[1, 3, 5, 7, 9, 11]
for the orange bars
NOTE: I know this code positions the ticks in the X axis differently than the initial code, but I think this doesn’t matter when you’re working with string type labels (such as ‘months’, or in this case ‘drinks’) (?)
I hope someone can tell me if i’m understanding this correctly and help others that like to understand how their code works.
Cheers! 
"
200,"Given a single table, how can we split it into multiple tables?","FAQ,Python FAQ",,4,"
Question
In this exercise, it mentions splitting the table into multiple tables. Given a single table, how can we split it into multiple tables?
Answer
In this context, the tables are dataframes. Because they are dataframes, we just need to split the dataframe into separate CSV files using methods from Pandas.
The following example will split a dataframe (“table”) into separate dataframes (“tables”), and save them into separate CSV files, to make them more manageable to work with.
Example
# First, read the original CSV and store in 
# a variable. This is the original ""table"".
data = pd.read_csv(""filename.csv"")

# Split the dataframe into separate ones, by columns.
# These are the ""tables"".
df1 = data[['col1', 'col2']]
df2 = data[['col3', 'col4', 'col5']]
df3 = data[['col6', 'col7', 'col8']]

# Now, we just need to store these into 
# their own CSV files.
# Note: index=False is used to remove the added index column.
df1.to_csv('table1.csv', index=False)
df2.to_csv('table2.csv', index=False)
df3.to_csv('table3.csv', index=False)

","



 jephos249:

Split the dataframe into separate ones, by columns. # These are the “tables”. df1 = data[[‘col1’, ‘col2’]]


could you split the table using the function which pulls the first 3 and the last 3 columns, assuming it’s only 6 columns long using [-3:]/ [0:3] ?

Can anyone point to a good resource on theory for setting up a dataframe from scratch? It seems like we are getting contradictory messages about what makes for a ‘good table’ with ‘useful data’. In this lesson, it stresses that a dataframe that repeats information, such as customer name, products, etc., can ultimately result in tables that are big and unmanageable. However, in other lessons that focus on ‘tidy data’, it seems to stress that this kind of repetition is actually desirable for working with the data and doing analysis. So what’s the deal? Is it the difference between efficiency of data storage vs. efficiency of data usage? What is the actual best practice here?

Is your question about setting up a database from scratch? A database is a collection of tables (or dataframes in Pandas). For theory behind setting up a relational database from scratch, I found this resource provided a helpful overview: https://launchschool.com/books/sql/read/table_relationships
"
201,When should I create a dataframe using a dictionary or a list?,"FAQ,Python FAQ",q-a,4,"
Question
When should I create a Pandas dataframe using a dictionary or a list?
Answer
You can create Pandas dataframes using either a dictionary or a list of lists, but depending on several factors, using one can be preferred over the other.
Using dictionaries can be much faster, since you can just include the column names as the keys, and include the values of the column as a list for the keys. However, a disadvantage of using a dictionary is that the columns will not preserve the order that you entered them, and will default to alphabetical ordering instead. This is important to keep in mind especially if the column order is important.
Using a list of lists allows you to enter each row of data one at a time as a  separate list, but it may take longer than using a dictionary, since column names must be added as a separate list after the rows are added. However, a list of lists allows you to order the column names specifically, which can be very important.
","
Thanks! Is there a way to use dictionaries and order the columns afterwards?



stackoverflow.com






How to change the order of DataFrame columns?


python, pandas, dataframe


  asked by
  
  
    Timmie
  
  on 10:22PM - 30 Oct 12 UTC






Basically create a reordered list including all the column names and then use the list as an index when creating a copy of your df.
also this: Can we select columns of a dataframe in any order?

I was just thinking that…it’s so easy and saves time as you people have already pasted the links at the bottom of the exercises. Codecademy is the best…there’s no doubt about that. You are amazing @jephos249.
"
202,"We learned how to add columns, but what if wanted to remove them?","FAQ,Python FAQ",q-a,3,"
Question
In the lesson, we learned how to add columns to a dataframe, but what if wanted to remove them?
Answer
In addition to being able to add columns, we have the ability to remove columns of a dataframe in Pandas.
There are a few ways you can go about removing columns from a dataframe:


Creating a new dataframe, and including just the columns you want to keep from the original dataframe. For example, if we only wanted to include these columns from a dataframe, it effectively “removes” all the other columns not included:
new_df = df[['col1', 'col4']]


You can utilize the built-in drop() method, to delete a specific column. In order to drop a column, we must specify axis=1. We can do so as follows:
df.drop('col3', axis=1, inplace=True)


To drop multiple columns at once, we can enter in multiple column names as a list using drop(), like so:
df.drop(['col3', 'col5'], axis=1, inplace=True)


","
I used the following code…can you please tell me what is wrong with that @jephos249

salutation = lambda row: 'Dear Mr. ’ + row[‘last_name’] if row == ‘male’ else 'Dear Ms. ’ + row[‘last_name’]


orders[‘salutation’] = orders.gender.apply(salutation)

Error it’s showing

string indices must be integers, not str


apply must indicate to which to apply: adding ""   , axis = 1 "" after salutation,
"
203,What is a character?,"FAQ,Python FAQ",,1,"
Question
In Python, what is a character?
Answer
A character is a single unit of information like a letter, number, symbol or space, and is always 1 length long. Characters are essentially the building blocks of strings.
Depending on localization or encoding, there can be many characters used for different languages around the world. For the courses on Codecademy, we mainly utilize the standard ASCII encoding system, which includes the familiar set of characters like the digits 0-9, all letters of the alphabet in both lowercase and uppercase, as well as symbols like ‘!’.
",
204,How will Triangle objects know which __init__ method to use?,"FAQ,Python FAQ",,2,"
Question
How will Triangle objects know which init method to use?
Answer
In this exercise we’ve defined a new class called Triangle that inherits from the base class Shape. Both classes define an __init__() method! Luckily, Python is smart enough to see that we intended to use the initialize method in our Triangle class when creating a new Triangle object.
Python checks the object that called the method and sees that it has a method of the same name that then takes priority over the one in the base class.
In the case of __init__() being defined twice, it sees that we’re initializing a Triangle, so we use that method.
","
Any chance we could expand/simplify this?
"
205,"If we make changes to a list passed in as an argument, does it change the list itself?","FAQ,Python FAQ",,7,"
Question
If we make changes to a list passed in as an argument, does it change the list itself?
Answer
Without going into too much detail, the general answer is yes, changes to a list that is passed in as an argument for a function can change the list itself.
Say for example, that you had the following function that takes in a list, and changes the value at index 1 to the value 20.
def update_list(lst):
  lst[1] = 20

When we run this function with any list as an argument, it will change the value being referenced for that list at index 1.
numbers = [1, 2, 3, 4]
update_list(numbers)
print(numbers) # [1, 20, 3, 4]

names = [""Alice"", ""Bob"", ""Carl""]
update_list(names)
print(names) # [""Alice"", 20, ""Carl""]

The reason for this is that Python lists store references to objects, rather than the objects themselves. So, running this function is changing the reference at index 1 of the lists to be changed to the value 20.
","



 jephos249:

The reason for this is that Python lists store references to objects, rather than the objects themselves.


Another way to describe a list is as a pointer object. As described above, each element in the list is a reference to an object in memory somewhere. The objects are not passed into the function but remain where they are. If we manipulate an element, it will simply point to a new object but remain referenced from the same index in the list as before.

Clarifying, I do not speak English well.
So, if I want to test things or validate with some changes in the list, the best solution would be to save this list and the changes in a temporary list within the function, right?

It all depends upon what you want the global list to look like when your function is completed. If you want it to stay the same, then make a copy inside the function and return a new list. If you want it changed, then don’t make a copy. Regardless what you call the list inside the function, the global object will see any changes performed by the function.

i do not understand the iintent behind this question,can someone tell me what was another thing that could occur?

The title of this thread is: If we make changes to a list passed in as an argument, does it change the list itself?
Let us say that we need a function that will return a given list with the character ‘x’ appended.
Version 1 (answer to question: yes):
def add_x(lst):    
    lst.append('x')
    return lst
    
my_lst = ['a', 'b', 'c']
new_lst = add_x(my_lst)

print(""new_lst is {}"".format(new_lst))
print(""my_lst is {}"".format(my_lst))

#Output:
new_lst is ['a', 'b', 'c', 'x']
my_lst is ['a', 'b', 'c', 'x']    # original list  is changed

Version 2 (answer to question: no):
def add_x(lst):
    out_lst = lst[:]
    out_lst.append('x')
    return out_lst
    
my_lst = ['a', 'b', 'c']
new_lst = add_x(my_lst)

print(""new_lst is {}"".format(new_lst))
print(""my_lst is {}"".format(my_lst))

#Output:
new_lst is ['a', 'b', 'c', 'x']
my_lst is ['a', 'b', 'c']     # original list is not changed


You made it so much clear,
Thanks a lot
"
206,Does return print values to the screen?,"FAQ,Python FAQ",,2,"
Question
Does return print values to the screen?
Answer
No, return simply gives a value to wherever it was called in the program. In this exercise, we see that our function list_function() just takes a parameter x and returns it. print looks for a value after it to display it to the screen, and the value it gets is the value returned by the list_function() when we pass it a list, n!
Anytime you want something to be printed, you need to use the print function.
","
Interesting and useful topic! 
"
207,What is the easiest way to access the last element of a list?,"FAQ,Python FAQ",,1,"
Question
Is there a way to find the last item in a list without using the len() function?
Answer
The last item in a list can be found using the index value computed by len() - 1 for the list. A short-hand for this is to use an index value of -1. For any list, accessing the index of [-1] will return the last element of the list without needing to use the len() function.
In the example below, both print() functions will output orange for the color.
colors = ['red', 'green', 'blue', 'yellow', 'orange']

print(colors[-1])

print(colors[len(colors) - 1])

",
208,"Why do we write this method after the variable, unlike len( )?","FAQ,Python FAQ",,7,"
Question
Why do we write this method after the variable, unlike len( )?
Answer
Some methods, like len( ), are built into Python and can be used on lots of different things. Others, like lower( ), belong to strings, and can only be used attached to strings, and that’s why you see them attached at the end of a string instead of being on their own with a string inside their parentheses. A lesson on this exact topic, with more detail, is coming up soon!
","
I had noticed this earlier and got confused – did the wrong thing here…think it would be helpful to explain this earlier – hate having to get things wrong especially as you example on a previous screen showed lower followed by parens… Another thing which is confusing is why you have to put empty parens round things like this example print var.lower()
Not your fault - nature of the language but it needs stressing earlier.

That is the challenge, to explain these concepts earlier on, you would overload learners with information like functions, methods, classes, instances and so on. Not a great idea either

I completely agree. I feel like I was tricked into getting it wrong which is a really demotivating way to learn something new.
It’s not as if the information is really that complicated at this point. No need to hold back on the explanation until two cards later.

My issue is how the instructions are worded. it actually doesn’t make sense when you read it. I could infer what was intended based off the example ( kind of) butttt…you guys gotta work on being more explicit in the instructions. it literally made no sense, what does “call lower()” mean? should it say “enter” or “type lower()”?

That make so much sense, thanks a lot!

IMHO this is exactly the right way to learn. To spoon feed us explicit instructions means that we plod on without having to think - making errors in a safe environment demonstrates what can go wrong and we remember that.
"
209,FAQ Hint: Be aware of nesting iteratives and loops,"FAQ,Python FAQ",,15,"
Concept
As per this lesson, you may find yourself wanting to combine loops like for and while. However in doing so, it is important to understand how they will interact when nested.
Mechanics
There are a few key issues that I have seen pop up regularly in questions:
The first if you have two for loops, the inner for loop will run completely for each step in the outer for loop. Example:
list1 = [1,2,3]
list2 = ['a', 'b', 'c']
for n in list1:
  for L in list2:
    print(str(n) + L)
#output: 1a, 1b, 1c, 2a, 2b, 2c, 3a, 3b, 3c

As you can see, it cycles through all of the second loop before moving on to #2 in the first loop. This also demonstrates that a variable used in the outer loop can be used in the inner loop. Variables from the inner loop can be used in the outer loop but only after being defined (this could be useful if you were creating a list for example).
On the other hand, an outer while will not be checked during the running of an inner loop.
i = 0
while i < 2:
  for n in range(0,6):
    i = n
    print(i)
#output: 0, 1, 2, 3, 4, 5

As you can see, the inner for loop will run to completion ignoring the while loop even though you may have expected it to stop once i was 2.
These are just a couple examples that will hopefully help solve issues with your own code. Please discuss below and help each other to further solve challenges that arise.
","
@catower, great comments!.
It’s also well to note that (unlike in some other languages) you can’t adjust the value of the iteration variable from within a for loop, as you can from within a while loop.
for i in range(0,3):
    print(i)
    i = i + 10
    print(i)

Output:
0
10
1
11
2
12

Here, at least within the loop, range() keeps an iron grip on the value of i.




 patrickd314:

It’s also well to note that (unlike in some other languages) you can’t adjust the value of the iteration variable from within a for loop, as you can from within a while loop.


Indeed. 
This is because the for implementation in Python leverages an internal counter to track which item from the iterable sequence comes next, and overwrites your target variable (i in your example) with that value each iteration until it reaches the end of the iterator.
This is why you get odd behaviour in some cases, for example if you remove items from a list while iterating over it.

So I completely misinterpreted the question and thought I was supposed to delete all the elements which are even numbered, and it sent me down a rabbit whole for a few days. I feel like the more I progress, the more the questions become more obtuse.
Anyway, I would like to share all my failures in order to help those who come after. Ultimately, I don’t think I solved it the way CA intended it to be solved. But hey, it works
#Write your function here
def delete_starting_evens(lst):
  index = 0
  for element in range(len(lst)):    
    if lst[element] % 2 == 0:
      index += 1
    else:
      break
  del lst[:index]
  return lst
  
      

""""""def delete_starting_evens(lst):
  index = -1
  while index >= 0:
    for element in range(len(lst)):
      print(lst)
      if lst[element] % 2 == 0:
        del lst[element]        
      index +=1
    return lst""""""

""""""def delete_starting_evens(lst):
  index = -1
  for element in range(len(lst)):
    #print(lst[element])   
    if lst[element] % 2 == 0:
      #print(lst[element])
      index += 1
      #print(index)
  print(index)
  print(lst[:index])
  del lst[:index]
  return lst""""""
      
      
""""""
  element += 1
  del lst[:element]
  return lst""""""


""""""def delete_starting_evens(lst):
  for element in range(len(lst)):
    if lst[element] % 2 == 0:
      print(lst[element])
      continue
    else:      
      return lst""""""

""""""def delete_starting_evens(lst):
  while lst:
    for element in range(len(lst)):
      if lst[element] % 2 == 0:
        del lst[element]
      else:
        break
  return lst""""""

""""""def delete_starting_evens(lst):
  for element in reversed(range(len(lst))):
    if lst[element] % 2 == 0:
      del lst[element]
      # print(lst[element])
  return lst""""""

#Uncomment the lines below when your function is done
print(delete_starting_evens([4, 8, 10, 11, 12, 15]))
print(delete_starting_evens([4, 8, 10]))









The word “delete” is a bit misleading.
Generally a function or method should either modify something, or return a new something. Not both. If it does both then the user might use one but not account for the other, and it’s pretty weird to present the result in two ways when there is only one result.
Unless the intention is specifically to modify an existing value, then you’ll want to create a new value and leave the input unchanged.
So the spirit of the function then is to create a list that is a copy of the original, but without leading even values.
Your function is easily amended by changing this:
  del lst[:index]
  return lst

To not modify the original, and instead return a copy from index and onwards.
It’s also worth noting that this easily breaks into two separate and composable concepts, dropwhile, and a condition, so this would be one implementation:
from functools import partial

def dropwhile(p, xs):
    res = list(reversed(xs))
    while res and p(res[-1]):
        res.pop()
    return list(reversed(res))

def even(x):
    return x % 2 == 0

delete_starting_evens = partial(dropwhile, even)


Oh, oh, I spend alot of time to solve this task.
In most I hade an Empty value
And I got it to return of a list to the funktion and move the indent to
def delete_starting_evens(lst):
    while len(lst) > 0 and lst[0] % 2 == 0:
      lst = lst[1:]
    return lst  


Your post helped clear things up. I think I was under the same impression as
@kurthamm5378307535.

Why doesn’t this work?
def delete_starting_evens(lst):
  for i in lst:
    if i % 2 == 0:
      lst.remove(i)
    else:
      break
  return lst


if you change the thing you’re looking at then it’ll look different. you’d need to account for those changes when looking at it or change a separate value
list.remove isn’t what you want anyway

Can please somebody kindly explain why do we need to know the length of the list in order to make this function to work properly? Thank you!

It depends a little on which solution you are looking at (if it’s not the while loop then my apologies, a short piece of the code that’s troubling would help).
If it’s a while loop, len(lst) is used to avoid throwing errors. This would occur in an instance where every value in lst is even. Without checking to see if the list is still populated with len(lst) > 0, slicing and methods such as .pop() would throw index errors.
You could skip the len() calls as with Python empty lists along with similar types have a false boolean value and you could use this to check if the list was still populated such that-
lst = 
bool(lst) == False
if lst: print(‘test’)
Would print nothing, whereas
lst = [‘b’]
bool(lst) == True
if lst: print(‘test’)
Would print ‘test’.
Whether this is more or less readable is a little up for debate-


stackoverflow.com






How do I check if a list is empty?


python, list


  asked by
  
  
    Ray
  
  on 06:20AM - 10 Sep 08 UTC







That’s exactly the answer I was looking for. I think i get it now, thanks! Will also read through the link you shared

I could not grasp the logic on this example.
i = 0
while i < 2:
  for n in range(0,6):
    i = n
    print(i)
#output: 0, 1, 2, 3, 4, 5

I thought if n=i and when n gets to 2, n should stop

Hi @py4630439988.
Check the nesting on these loops. The for loop is separate to the while statement whilst it runs. The conditional i < 2 is checked once at the start of the while loop when i == 0 which evaluates to True. Code inside the while loop is then executed (it does not check the value of i again until this has finished).
For loop runs and prints 0 through to 5 (i does change but it is never checked against anything). Once the for loop has finished i == 5. As the code inside the while loop has now been executed it starts it’s next iteration and the the check for the while loop is performed again i < 2 which is now False since i == 5.
So I think your issue is that you expect the while loop conditional i < 2 is checked more often than it is.

its cleared now thx a lot
"
210,What is the easiest way to access the last element of a list?,"FAQ,Python FAQ",,1,"
Question
Is there a way to find the last item in a list without using the len() function?
Answer
The last item in a list can be found using the index value computed by len() - 1 for the list. A short-hand for this is to use an index value of -1. For any list, accessing the index of [-1] will return the last element of the list without needing to use the len() function.
In the example below, both print() functions will output orange for the color.
colors = ['red', 'green', 'blue', 'yellow', 'orange']

print(colors[-1])

print(colors[len(colors) - 1])

",
211,"Why do we write this method after the variable, unlike len( )?","FAQ,Python FAQ",,7,"
Question
Why do we write this method after the variable, unlike len( )?
Answer
Some methods, like len( ), are built into Python and can be used on lots of different things. Others, like lower( ), belong to strings, and can only be used attached to strings, and that’s why you see them attached at the end of a string instead of being on their own with a string inside their parentheses. A lesson on this exact topic, with more detail, is coming up soon!
","
I had noticed this earlier and got confused – did the wrong thing here…think it would be helpful to explain this earlier – hate having to get things wrong especially as you example on a previous screen showed lower followed by parens… Another thing which is confusing is why you have to put empty parens round things like this example print var.lower()
Not your fault - nature of the language but it needs stressing earlier.

That is the challenge, to explain these concepts earlier on, you would overload learners with information like functions, methods, classes, instances and so on. Not a great idea either

I completely agree. I feel like I was tricked into getting it wrong which is a really demotivating way to learn something new.
It’s not as if the information is really that complicated at this point. No need to hold back on the explanation until two cards later.

My issue is how the instructions are worded. it actually doesn’t make sense when you read it. I could infer what was intended based off the example ( kind of) butttt…you guys gotta work on being more explicit in the instructions. it literally made no sense, what does “call lower()” mean? should it say “enter” or “type lower()”?

That make so much sense, thanks a lot!

IMHO this is exactly the right way to learn. To spoon feed us explicit instructions means that we plod on without having to think - making errors in a safe environment demonstrates what can go wrong and we remember that.
"
212,Can the data type of a value be changed when overwriting it in a dictionary?,"FAQ,Python FAQ",,3,"
Question
Once a value is added to a dictionary when it is overwritten, can the data type for the value be changed?
Answer
Yes, whenever a value is overwritten in a dictionary, it can be saved as another data type regardless of how it was originally stored. In the following code example, the value for key “B” is originally a number. It is then overwritten with a string value and finally a list of strings. All are stored as valid values for key “B”.
letters = { ""A"": 10, ""B"": 20, ""C"": 30, ""D"": 40 }

letters[""B""] = ""string""
print(letters)
# {'A': 10, 'B': 'string', 'C': 30, 'D': 40}

letters[""B""] = ('this', 'is', 'a', 'tuple')
print(letters)
# {'A': 10, 'B': ('this', 'is', 'a', 'tuple'), 'C': 30, 'D': 40}

","



 ajaxninja66418:

finally a list of strings.





 ajaxninja66418:

letters[“B”] = (“this”, “is”, “a”, “list”)


Typo. It’s a tuple of strings.




 pontustv:

It’s a tuple of strings.


Indeed, it is a tuple. We can verify that by adding this line of code at the end:
print(type(letters[""B""]))

Output from that statement:
<class 'tuple'>
"
213,How should my while/else be indented?,"FAQ,Python FAQ",,14,"
Question
How should my while/else be indented?
Answer
When making a while / else statement, the while and the else should be on the same level of indentation. In the example code below, we can see that while and else are totally unindented:
count = 0
while count < 3:
  num = random.randint(1, 6)
  print num
  if num == 5:
    print ""Sorry, you lose!""
    break
  count += 1
else:
  print ""You win!""

If you indent the else at the end that tells the user they won, then it will attach it to the if inside of the loop, which isn’t the goal here!
","
2 posts were split to a new topic: Is there something wrong with this code?

Why is this while loop only running one time?  https://gist.github.com/be8701724f37ca552cfc8d43ebeb200a
This is how I read each line of the code and what I expect to happen yet it only runs once.
while guesses left greater than 0:
Ask user for a guess
if guess equals the random number:
print “You win!”
Exit (i.e. break) the loop
Remove a guess by 1
if guesses left are not greater than 0:
print “You lose”

If you put guess = int(raw_input(""Enter your guess: "")) expression inside a while loop it’'ll  be works. This is just what I see.

I don’t understand why my code is rejected by CC despite checking that all indentation matches the model given (edit: as well as the Solution). Also, I don’t see why after entering the first guess, the second line shows the string twice:
Your guess: Your guess

Codecademy-while.png.jpg3764×1906 327 KB


I have the same issue. Also interested in the answer.

+1. The same issue.
raw_input inside the while loop works incorrectly

same here

ac63f1b5682d57e0953c4fff7a8c8f3ccd0185d6.png1046×488 23.9 KB


I had the same issue. Even when I asked for the solution, the while loop didn’t work correctly. Reloading the page in my browser fixed the issue. I’m starting to see this trend a lot, especially if I step away and the session times out before I get back to it. Now any time I have a problem that seems strange, I reload the page and it usually fixes itself.

I have the same issue!

in my opinion,first you must change guesses_left decrement by one not in “your win” but in after code ptint “your lose”.
then,you get in next line to write guesses_left decrement by one.otomatic this code not end because after print "" you win "" in the next line you write break

well i have found out the mistake
we have to put guesses_left-=1 after the raw_input statement rather than in the if condition
Cheers!

Even the actual solution has a problem
from random import randint

# Generates a number from 1 through 10 inclusive
random_number = randint(1, 10)

guesses_left = 3
# Start your game!
while guesses_left > 0:
  guess = int(raw_input(""Your guess: ""))
  if guess == random_number:
    print ""You win!""
    break
  guesses_left -= 1 #alligned with if
else:
  print ""You lose.""

although the code is right, but the output if the second guess is right a third guess should not be promoted.

I was using the same code as you, it didnt work in firefox, but was good in chrome.
"
214,Why doesn’t it accept my answer if I put spaces around the slashes?,"FAQ,Python FAQ",q-a,21,"
Question
Why doesn’t it accept my answer if I put spaces around the slashes?
Answer
For any exercise on Codecademy, your code is checked over by tests running in the background when you press Run. If the instructions ask for a specific output, variable name, or value, that is exactly what you must type.
Computer’s aren’t able to interpret what you meant to type, so we have to use exactly what is being checked for, otherwise it’ll be counted wrong.
In this exercise, it asks for us to display the date as mm/dd/yyyy, without any spacing anywhere. So that’s exactly how we should print it, and including spaces will throw a convenient error message:
It looks like there are spaces surrounding the slashes.
","
it did work
from datetime import datetime
now = datetime.now()
print '%02d / %02d / %04d' %(now.day, now.month, now.year)

my Result
08 / 09 / 2018

Did it work in the lesson, though? What you have fashioned is print output, not a date string. Standard date formats have no spaces in them. In order for that to be accepted in the lesson, the spaces must be removed.

take a look at my screenshot

i was wondering too sir

I run it for hour:minute:second, it run and displayed the result  but again  displayed
It looks like there are spaces surrounding the colons. Remember to use + for string concatenation

time.png1366×768 95.9 KB

Don’t whether its because i run it inside the practicing environment?
Sir, i really need clarification on this one.

It is the lesson environment that is reporting that error which means it doesn’t match the expectations. The lesson checker is very limited in scope and does not have a range of expectations. More likely, there is one expected pattern to match against, and that’s it. Deviation from that pattern, however valid, will result in an error.
We’re writing lesson code, not real world production code. For best results follow the instructions to the letter.

Thanks you very much sir.

Does it matter what letter you use after the %02 ? I tried d and I and they worked but other like f and a didn’t. What is the importance of the letters after the %02/%04s?




 mutatedmango:

Does it matter what letter you use after the %02 ?


Yes, it must be a letter that the interpreter recognizes.
d => digit
i => integer (same as above)
f => float
s => string
r => representation (a list, tuple, set, dictionary)

%04s will pad the left side of a string with spaces up to a maximum output length of 4. If the string is 4 or more characters long there will be no pad.

>>> print (""%04s"" % 'a')
   a
>>> print (""%04s"" % 'abcde')
abcde
>>> print (""%04d"" % 1)
0001
>>> print (""%4.2f"" % 1.1)
1.10
>>> 

Note how it pads a number with 0’s. Note also how padding is ignored on floats.

https://pyformat.info/

The above has both old and new examples for comparison. The new format method may not work in Python 2. There is a way to include it but I’ve forgotten and will have to research that again.

A post was split to a new topic: The result on console right but it doesnt check the box

My output was right in my console changing the code to this form;
print ‘% 02d / % 02d / % 04d’ % ( now.month, now.day, now.year )
I had no error messages but this 11 /  19 /  2018

What formatting instructions were you given. Be sure to follow that pattern exactly, with no spaces.
'%s/%s/%s' % ()

I followed the instructions right and got it right and also did an experiment by going the wrong way and still had it right.


Print the date and time together in the form:
mm/dd/yyyy hh:mm:ss

There is only one space character in the pattern.
Given that you passed on one attempt, any further attempts will not affect that result unless you Reset the exercise.

It will work, after we have completed the exercise.
If we did it, as per exercise, it does not matter later, if we change the output in same exercise; provided syntax is maintained correct.

Even if I set the year to two digits, it still printed out ‘2019’.

It will miss the check if you did it correctly right the first time. After doing it correctly I read the side readings and tried what someone mentioned with spaces. if you run it it will pass with no error. If you reset the lesson and do it with spaces it will not run and tell you to take out the spaces.
That is what happened when I was poking around this.

my one is showing 05/05/0005…
it should be 27/5/2020…
why it is happening?

Please post your code and a link to the this exercise.

Thanks Sir for your reply.  It was my fault. I typed( now.month/ now.month/ now.month) which was wrong.
"
215,How can I XOR two numbers without using the ^ operator?,"FAQ,Python FAQ",,5,"
Question
How can I XOR two numbers without using the ^ operator?
Answer
It might help to write out the numbers on paper and do it as you would any other math. For bit strings of different lengths, simply write out the numbers and fill in the leftmost missing bits with 0s. For example:
0b10011001 ^ 0b1111
We’d write that out as follows:
  1001 1001
^ 0000 1111
-------------
  1001 0110

","
I agree that it is easy to do this on paper or in my head.
But I understood the task to mean “write Python code that does the same job without using ^”.
I was hoping to find a solution for that here.
My main problem is to make the numbers the same length before comparing them with a loop.
Thanks!




 2timit:

My main problem is to make the numbers the same length before comparing them with a loop.


One approach will be to convert the numbers to strings, and pad out the left side of the shorter string with zeroes.
Say we have two numbers, 218 and 47 and we wish to express,
218 XOR 47

The first step will be to recast both numbers as strings. Hint: bin() returns str objects, '0b...' Of course there is a manual way to convert decimal to binary, but for now we’ll use the provided function to get to the strings themselves.
>>> a = bin(218)
>>> b = bin(47)
>>> a, b
('0b11011010', '0b101111')
>>> len(a), len(b)
(10, 8)
>>> 

We will first need to remove the 0b before padding out the shorter of the two.
>>> c, d = a[2:], b[2:]
>>> while len(d) < len(c):
    d = '0' + d

    
>>> c, d
('11011010', '00101111')
>>> 

Now both strings are the same length so we can begin comparing the characters at the same position in each.
>>> xor = '0b'
>>> for i in range(len(c)):
    if c[i] != d[i]:
        xor += '1'
    else:
        xor += '0'

        
>>> xor
'0b11110101'
>>> bin(218 ^ 47)
'0b11110101'
>>> 


Thanks a lot, Roy!
I did not think of concatenating zeroes to the left.
Other than that, I made the function more general (decides which arg is shorter, swaps if necessary to let c be the shorter, then padds c).
And (without looking at your code I did not check the bits for equality but checked 1) if the concat to ‘01’ or ‘10’
2) checked if their int add up to 1
So, with your help for the padding, I found my own solution.
Thanks!!

You can use a combination of other logic operators to run as the ^ (XOR) operator.
The following code returns the same result than print bin(0b1110 ^ 0b101):
print bin((0b1110 | 0b101) & ~(0b1110 & 0b101))
"
216,Why does it ask me not to use compute_bill?,"FAQ,Python FAQ",,27,"
Question
Why does it ask me not to use compute_bill?
Answer
If you think you’ve coded your function properly and are receiving an error message along the lines of stock doesn't look quite right! Make sure to not call compute_bill since it changes the stock!, this is because in this step we aren’t using the function after writing it, we’re just writing the function.
Try deleting where you used the function and then Run your code again.
It’s great to want to test your code! However, Codecademy runs tests to check your code that depend on the values being the original values, and running the function in your code in this step changes those values. You’ll be able to use it in the very next step!
","
Could you say me where is my problem
shopping_list = [""banana"", ""orange"", ""apple""]

stock = {
  ""banana"": 6,
  ""apple"": 0,
  ""orange"": 32,
  ""pear"": 15
}
    
prices = {
  ""banana"": 4,
  ""apple"": 2,
  ""orange"": 1.5,
  ""pear"": 3
}

      # Write your code below!
def compute_bill(food):
  total = 0
  for item in food:
    if not stock[item] <= 0:
      total += prices[item]
      
    else:
      print ((""Stock has no %s"") % item)
  stock[item] -= 1
  return total

print (compute_bill(shopping_list))


i would be possible to buy 9 bananas:
shopping_list = [""banana"", ""orange"", ""apple""]

stock = {
  ""banana"": 6,
  ""apple"": 0,
  ""orange"": 32,
  ""pear"": 15
}
    
prices = {
  ""banana"": 4,
  ""apple"": 2,
  ""orange"": 1.5,
  ""pear"": 3
}

      # Write your code below!
def compute_bill(food):
  total = 0
  for item in food:
    if not stock[item] <= 0:
      total += prices[item]
      
    else:
      print ((""Stock has no %s"") % item)
  stock[item] -= 1
  return total

print (compute_bill(['banana'] * 9))

while there are only 6 bananas in stock

Guys! Where is the key to solve the exercise?

i told you, if i attempt to buy 9 bananas, i can. Which shouldn’t be possible, because there are only 6 bananas in stock.

Hi,
I’m not sure if this solves your problem, but try indent the stock[item] -= 1 more.
It seems to me that currently it sits on the same level as the ‘for loop’ (i.e under the main function level) but it should be under the ‘for loop’ since we need to do that subtraction in each loop.
I hope this helps
cheers,
D.

Close, (s)he should only decrease stock when the item isn’t in stock, so it should be nested inside the if clause

I guess you wanted to write …the item is in stock…
anyway, it is strange because that’s what I thought at first but putting that line inside the if clause caused an indent error. So I went ahead and tried other indents. And strangely only the above mentioned (by me) worked.
today I went back and tried your suggestion again, and it worked now. pretty odd.
maybe it has something to do with tab vs space indentation?




 dborbas:

maybe it has something to do with tab vs space indentation?


the indent settings within the codecademy editor are not ideal.

A post was split to a new topic: A Day at the Supermarket: Why is this wrong?

You need to put stock[item] -= 1 in the if not statement you have it in the else statement.

I’ve been experiencing many IndentationError messages (in this as well as previous exercises) despite my code being identical to the solution and Codecademy wouldn’t allow me to move on unless I went for the Solution. I even tried deleting the indents of the error Line and reintroducing them in a consistent manner, but it still wouldn’t accept my code. Is there another solution? Do I need to delete all indents of every line and consistently reintroduce them line by line for my code to be recognized?
My code:

3e6a942022e9f7ca71d9883acf6206185afe6726.png3222×1804 627 KB

Solution code:

Codecademy-noerror.png3248×1820 553 KB


codecademy’s editor sucks when it comes to indent. I would re-indent the code in your own local editor, if you haven’t set this up, you could use sites like repl.it

Ok, thanks for the suggestion, I’ll try that next time.

Any idea what I’m doing wrong?

image.png625×853 49.8 KB


The dictionary value is not updated when you just minus 1 from the value, you then need to also set the dictionary value to the value minus 1.
stock[item] = stock[item] - 1

This was exactly the problem. Thank you!

The problem for me was the stock[item] = -1 did not work. I needed to make it stock[item -= 1

why am I getting errors with this code?
def compute_bill(food):
  total = 0
  for items in food:
    if stock[items] > 0:
      total += prices[items]
      stock[items] -= 1
  return total
print compute_bill(shopping_list)


That is literally what this FAQ answers:



 wiki-bot:

Question
Why does it ask me not to use compute_bill?
Answer
If you think you’ve coded your function properly and are receiving an error message along the lines of stock doesn't look quite right! Make sure to not call compute_bill since it changes the stock! , this is because in this step we aren’t using the function after writing it, we’re just writing the function.
Try deleting where you used the function and then Run your code again.
It’s great to want to test your code! However, Codecademy runs tests to check your code that depend on the values being the original values, and running the function in your code in this step changes those values. You’ll be able to use it in the very next step!


"
217,What are the backslashes in the string?,"FAQ,Python FAQ","q-a,strings",4,"
In the practice for .format() the backslashes are not included, yet I was supposed to know that it was needed? Why was it not shown in the example code?
","
""The poem \""{}\"" is written by {}.""

The topic of escape characters must have come up in early lessons on strings.
Above, the quotes inside the string are escaped so they are ignored by the string parser and render as printed characters.
The output will look like,
The poem ""I Hear America Singing"" is written by Walt Whitman.

We can also write the code so the string is in single quotes. This way no excapement is required.
'The poem ""{}"" is written by {}.'

Is there any way in which doing the method provided in this exercise:
'The poem \""{}\"" is written by {}.'.format(title, poet)

is better than:
'The poem ""%s"" is written by %s.' % (title, poet)

The second method seems simpler to me. Am I missing something? Is there a scenario where .format() is better?

The second example is legacy code inherited from C and written into early versions of Python, while the first was a late addition to version 2.7.x, i believe. It  is far superior to the its predecessor in many ways.
This page compares the two…

https://pyformat.info/

Study the examples and in the end, ask yourself, which is more powerful and robust?
Aside



 lonelypenguin42:

‘The poem “{}” is written by {}.’.format(title, poet)


When the opening/closing quotes are single, we don’t need to escape double quotes in the string.
'The poem ""{}"" is written by {}.'.format(title, poet)
"
218,What does it mean that pop will return a value to me?,"FAQ,Python FAQ",q-a,3,"
Question
What does it mean that pop will return a value to me?
Answer
pop() is a function, just like the ones you wrote in earlier exercises. The value it returns is the element you remove from the array!
This is very useful when you want to do things like check a value being removed, which we couldn’t do with del() since it doesn’t return a value. If we wanted to store a popped value, we could do so like this:
my_list = [""cat"", ""dog"", ""mouse""]
popped = my_list.pop(0)

if popped == ""cat"":
  print ""We found the cat!""

","
why that can’t be done with del()
like this:
my_list = [“cat”, “dog”, “mouse”]
deleted = del(my_list[0])
if deleted = “cat”:
print “why”

Hi @matanselig,
del is not a function, however you are attempting to utilize it with function call syntax here:
deleted = del(my_list[0])

This, by itself, actually would delete the item represented by my_list[0]:
del(my_list[0])

The parentheses are not needed, so you can do this instead:
del my_list[0]

However since del is not a function, it does not return anything at all, and the line where you used it is not a valid assignment statement.
See the official documentation here: The del statement.
Also see official documentation on the list.pop([i]) method here: Data Structures.
Edited on January 2, 2019 to identify list.pop([i]) as a method.
"
219,Does the dictionary pop() function remove the item from the dictionary?,"FAQ,Python FAQ",q-a,3,"
Question
Does the pop() function on a dictionary just access the data or remove it?
Answer
The pop() function will return the value for the key AND then remove the key/value from the dictionary. The following code example shows the results of performing a pop() on a dictionary to remove the item indexed by key “C”.
letters = { ""A"": 10, ""B"": 20, ""C"": 30, ""D"": 40 }

value = letters.pop(""C"")

print(letters)
# {'A': 10, 'B': 20, 'D': 40}

","
is the .pop() in the dictionary a function or a method? how come in the lesson it specified as same with .get() method and here on the question and answer platform called function?
and can someone clarify difference between a function and a method?

Both .pop() and .get() are methods. Methods belong to a certain class, so can only be called on instance of that class. you can also recognize methods by the difference in calling style:
# calling print function
print(""hello world"")
# calling method
{}.get('a')

"
220,What does it mean for code to be reusable and what good is that?,"FAQ,Python FAQ",q-a,7,"
Question
What does it mean for code to be reusable and what good is that?
Answer
You may hear people mention DRY programming, which stands for Don’t Repeat Yourself. Simple enough, but you’d be surprised how much time and effort you’ll save by following through with it!
Often at times we’ll write code that needs some functionality repeated several times, perhaps even with different values each time. For example, if we tried to calculate the cost of a bill and tip for every meal, we’d have to write out the entire calculation each time for every different meal!
Wouldn’t it be better if we could give the cost of the meal to a function and have it handled the same way regardless of what the meal is or how much it cost?
That’s what we’ll be looking into for the next little while! Making functions that are able to do some action given some input and produce some output, all in the name of saving time and energy!
","
What is the meaning of the *= symbol in code??

if i search: python *=, the first search result:
https://stackoverflow.com/questions/20622890/python-what-does-mean/20622898
google is your friend while programming.

How, depending on a given problem, should we use or not a function. I still have this little worry. Thanks in advance

This is an interesting topic.

#example variable value
bill = 10
#shorthand to calculate bill plus tax
bill *= 1.08
#the long version (bill = 10 * 1.08)
bill = bill * 1.08

The asterisk (*) is a multiplication symbol in this usage.
For example if sales tax was 8 percent and you want to know how much something is once you add tax it could be written as follows:
bill *= 1.08
   """"""because if you multiply something times 1, it stays the original amount. If you multiply an amount by 1.08 it remains the same figure plus 8 percent more. so it multiplies the amount that (bill) represented""""""
"
221,How does the list comprehension in the example code work?,"FAQ,Python FAQ",q-a,2,"
Question
In the context of this exercise, how does this list comprehension in the example work?
[t*element + w*n for element in range(d)]
Answer
The list comprehension provided in the example code returns a list of x values for the bar locations in the graph.
There are 4 variables which will let us do this:
n determines which dataset it is currently for.
t determines the total number of datasets to graph side by side.
d tells us how many bars there are per dataset.
w tells us the width of each individual bar.
If we take the provided values for the first dataset China Data, we get
[2*element + 0.8*1 for element in range(7)]
This essentially means, for each element in range(7), construct a list where each element is
2*element + 0.8
This would give us this list of values,
[0.8, 2.8, 4.8, 6.8, 8.8, 10.8, 12.8]
If we change n to 2 for the second dataset US Data, it gives us the list
[1.6, 3.6, 5.6, 7.6, 9.6, 11.6, 13.6]
These x values will position each pair of bars for each set of data next to each other in a clear way.
","
Hello, i’ve been struggling to understand the logic behind this concept (hope i’m not the only one here) as I like to understand how the code works and not so much to remember or copy-paste the formula.
I tried to simplify the code hoping it could help me understand how it works and I think I’ve got it now. I will post it here hoping someone can give me feedback to check if i’m doing something wrong (and if i’m right to help those that struggle to understand like I did):
store1_x = [X*2 for X in range(6)]

plt.bar(store1_x, sales1)

# Here's the basic formula for the first set of bars (blue ones). 
# As I understand, you want a list from 0 to 5 ( range(6) ) because you need to plot 6 blue bars. 
# X is every element of that list, and it's being multiplied by 2 to separate the blue bars between each other to make room for the orange bars.


store2_x = [X*2 + 1 for X in range(6)]

plt.bar(store2_x, sales2)

# This is the code for the orange bars, it's the same as above, but adding 1. 
# This places the orange bar one space to the right of the preceding blue bar. 
# In the exercise this was originally 0.8, which places the blue and orange bars next to each other.
# A width of 0.8 is actually better to understand the data, but I changed it as it helped me to visualize how the code works.


So basically you’re creating two lists of positions:
[0, 2, 4, 6, 8, 10]
for the blue bars
and
[0+1, 2+1, 4+1, 6+1, 8+1, 10+1]
or
[1, 3, 5, 7, 9, 11]
for the orange bars
NOTE: I know this code positions the ticks in the X axis differently than the initial code, but I think this doesn’t matter when you’re working with string type labels (such as ‘months’, or in this case ‘drinks’) (?)
I hope someone can tell me if i’m understanding this correctly and help others that like to understand how their code works.
Cheers! 
"
222,Can list slicing work without specifying the end?,"FAQ,Python FAQ",,6,"
Question
In this exercise, the list slice shows a start and end point. Will a slice work without specifying the end?
Answer
Yes, it is possible to use a slice without specifying the end. In that case, the slice will return the list from the start point through the end of the list. This would be useful if you wanted to remove a known number of items from the start of the list and keep the remainder.
In the following example code, a list is sliced using a defined start and end point and then again specifying only the start.
colors = ['red', 'green', 'blue', 'yellow', 'orange']

# Values from index 1 to less than 4 = ['green', 'blue', 'yellow']
print(colors[1:4])

#  Start at index 1 till end = ['green', 'blue', 'yellow', 'orange']
print(colors[1:])

","
From the exercise, if we use employees.append( ) to add a name to the list, can we select the 8th element in the list?
employees = ['Michael', 'Dwight', 'Jim', 'Pam', 'Ryan', 'Andy', 'Robert']

employees.append('Carlos')

print(employees(8))


Hey @cesararellano7696287, welcome to the forums!
A couple things you might want to remember are:



 cesararellano7696287:

print(employees(8))


To select an element of a list, you use square brackets() instead of parentheses(). So if you were going to do this, you would have to change that.

employees = ['Michael', 'Dwight', 'Jim', 'Pam', 'Ryan', 'Andy', 'Robert']
                 ^          ^       ^       ^      ^       ^        ^  
                0th        1st     2nd     3rd    4th     5th      6th
employees.append('Carlos')

If you added the list item ‘Carlos’ to the end of the list, that new element would be at list index 7 so this code would give you an error regardless.
Hope this helps!
Steven

Hi Steven,
Thank you so much. That’s what I figured would be the case. Appreciate the clarification.
Thanks,
Cesar

employees += ""john""
['Michael', 'Dwight', 'Jim', 'Pam', 'Ryan', 'Andy', 'Robert', 'carlos', 'j', 'o', 'h', 'n']

I added in carlos using append as discussed above, then tried to use += and it separates the letters in john.  Not sure what is different?  Thanks


Hi @core1805653314,
The string, ""john"", was converted to a list of its component characters in order for it to be concatenated to the list of employees. Try placing ""john"" within its own list, instead, in order to perform the concatenation, as follows:
employees += [""john""]

"
223,Why do these scores need to be saved as floats?,"FAQ,Python FAQ",,5,"
Question
Why do these scores need to be saved as floats?
Answer
Later on in this project we’ll be creating a function to average the grades earned by each student. To average numbers, if we worked with integers, we would get inaccurate results because of how integers divide. Using floats ensures that we return only the most accurate of averages!
","
What is the disadvantage of entering all numbers as floats?

Since the scores are (presumably) presented as integers, it is mildly annoying to be required to add “dot zero” to each one.  In Python 3, that would not be necessary, since “regular” division works as you would expect, and it is integer division that requires an extra keystroke…

I aren’t sure what you mean when you say ‘regular’ division - do you mean it would float if it needed to instead of rounding?

In Python 3, the / operator returns a float
print(5/3)
'''Output:
1.6666666666666667
'''

… whereas, if you mean to use integer division, you must use //
print(5//3)
'''Output:
1
'''

"
224,What other functions are available through the math module?,"FAQ,Python FAQ",,3,"
Question
What other functions are available through the math module?
Answer
Lots of useful functions are made available through the math module, like ceil(x), which rounds a number x up, and even trigonometric functions, like acos(x), which returns the arc cosine of x in radians!
For a full list of functions available in the math module, check out the full documentation page!
","
Is there any way to get info about functions in module from console?

Use help() and then type
math
"
225,When should I create a dataframe using a dictionary or a list?,"FAQ,Python FAQ",q-a,4,"
Question
When should I create a Pandas dataframe using a dictionary or a list?
Answer
You can create Pandas dataframes using either a dictionary or a list of lists, but depending on several factors, using one can be preferred over the other.
Using dictionaries can be much faster, since you can just include the column names as the keys, and include the values of the column as a list for the keys. However, a disadvantage of using a dictionary is that the columns will not preserve the order that you entered them, and will default to alphabetical ordering instead. This is important to keep in mind especially if the column order is important.
Using a list of lists allows you to enter each row of data one at a time as a  separate list, but it may take longer than using a dictionary, since column names must be added as a separate list after the rows are added. However, a list of lists allows you to order the column names specifically, which can be very important.
","
Thanks! Is there a way to use dictionaries and order the columns afterwards?



stackoverflow.com






How to change the order of DataFrame columns?


python, pandas, dataframe


  asked by
  
  
    Timmie
  
  on 10:22PM - 30 Oct 12 UTC






Basically create a reordered list including all the column names and then use the list as an index when creating a copy of your df.
also this: Can we select columns of a dataframe in any order?

I was just thinking that…it’s so easy and saves time as you people have already pasted the links at the bottom of the exercises. Codecademy is the best…there’s no doubt about that. You are amazing @jephos249.
"
226,Why would I print a variable instead of just printing the string?,"FAQ,Python FAQ",,2,"
Question
Why would I print a variable instead of just printing the string?
Answer
Often when you write a program you’ll be displaying things that change based on user input. For example, if you want to greet a user with ”Hello, username, good to see you!”, you can’t possibly know everyone’s username when writing your program. So you’d take their username as input and store it in a variable, and then you can print it later as a variable, rather than a hard-coded string!
This concept of avoiding hard-coding is generally a good practice because it allows for code that works more broadly, and should be something you actively look for when trying to improve your code.
","
That’s a good answer, plus I would add that variables can be short and descriptive. You might have a string that is very long and would take a long time to type (with the possibility of errors), but once stored in a short variable you have access to that whole long string just by re-using that short variable you once declared.
"
227,Is there anything special about the Codecademy editor?,"FAQ,Python FAQ",,5,"
Question
Is there anything special about the Codecademy editor?
Answer
Yes! When you write code, you need to use a text editor like the one here on Codecademy, rather than a word processor like Microsoft Word. When you go off on your own and write code on your computer, there are lots of free options available, like Atom or Sublime Text. The key difference between text editors like these and word processors like Word is the formatting. Word processors like Word save a lot more than just the text you type; they save font style, font weight, font size, formatting - all kinds of settings. This causes issues when trying to compile and execute a piece of code, which is why we use plain text editors that don’t write anything but the text.
","
which text editor is this one used in Codecademy?

Codecademy uses it’s own text editor. It cannot be used outside their website and has certain limits to it’s functionality when it comes to more advanced code. If you’re looking to code outside of the Codecademy site, look into one of the many free(or paid) text editors available on the internet.

yeah I wish it was downloadable

I sometimes use Brackets and TextWrangler to manage text; both are free. But the Codecademy editor is very convenient and built into the lessons, allowing you to remain in one browser window. There are many other editors that people use such as TextMate, UltraEdit and Sublime.
"
228,Why does an instance need to be set to a variable?,"FAQ,Python FAQ","classes,q-a",6,"
About this exercise Instantiation - can somebody explain?
“Above, we created an object by adding parentheses to the name of the class. We then assigned that new instance to the variable  cool_instance  for safe-keeping.”
If we create an object without assigning it to a variable (just adding parentheses to a class name), is it not safe enough? Safe from what? What are “the dangers”?
Thank you in advance
","
I think safe-keeping just means a place where we can access it again
If we just make an instance:
CoolClass()

without the variable, there is no way to access the instance




 stetim94:

without the variable, there is no way to access the instance


Thank you for the answer, but I still can’t understand, if we “managed” to access it once(during the assignment to a variable), why could not we do this again? In other words - if we change where possible the names of the variables to just class names with parenthesis - will it work? If not, why?(In some cases it worked, I tried)




 system2120220371:

(In some cases it worked, I tried)


Code samples of this would be really useful to understand exactly what you did.



 system2120220371:

if we change where possible the names of the variables to just class names with parenthesi


How do we then access properties of the instance?

Please, believe, I feel stupid enough, but I NEED to get it. Here is what I meant from exercise Methods with Arguments:
If instead
class Circle:
  pi = 3.14
  def area(self, radius):
    return self.pi*radius**2
circle = Circle()  
pizza_area = circle.area(12/2)
teaching_table_area = circle.area(36/2)
round_room_area = circle.area(11460/2)

we write
class Circle:
  pi = 3.14
  def area(self, radius):
    return self.pi*radius**2
#circle = Circle()  ------  > without this
pizza_area = Circle().area(12/2)
teaching_table_area = Circle().area(36/2)
round_room_area = Circle().area(11460/2)


i changed the code a bit:
from math import pi

class Circle:
    pi = 3.14
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return self.pi*self.radius**2

    def circumference(self):
        return 2 * pi * self.radius

    def diameter(self):
        return self.radius * 2

circle = Circle(6)
print(circle.area())
print(circle.circumference())
print(circle.diameter())

if we now where to follow your approach, we could create a new circle for every method we want to call. Which we would violate DRY (don’t repeat yourself)
i realize this example still isn’t ideal, classes really becomes clear when the project/code base starts to grow, classes give us the capability to group similar code.
"
229,What are A and B in programming?,"FAQ,Python FAQ",,8,"
Question
What are A and B in programming?
Answer
In the graphic shown here we can think of A and B as statements.
In programming, a statement can be thought of as something that has some result. Take, for example, what we’ve been writing so far: 10 < 1 results in False, or (30 + 1) != 3 results in True.
So A and B are just statements like those, and they can be as complex as you want. Then we use and, or, and not as operators on these statements to make what we call expressions. An expression is just something that results in some value, True or False in this case.
If you want a challenge, take a look at the example below that’s a bit more than what we’ve done so far. If it doesn’t make sense, that’s totally fine! You will understand it in the exercises to come!
left_half  = (100 + 10) >= (20 - 5)  # True
right_half = (25 / 5) == 70  # False
bool_complex_false = left_half and right_half  # True AND False is False!

","
A and  B here are Statements . Its generally known as “PREPOSITION”.
A preposition is an atomic sentence which can result either true or false and nothing else .
eg. A= its Sunny outside.
B= My father is  not at home .
you can see the answers to the statement A and B can either be true or false and nothing else . In computer language the value given to A and B are 0(false) and 1(true). By these values we can form premises.

Not to be overly semantic, this is a statement…
left_half  = (100 + 10) >= (20 - 5)

and this is an expression…
(100 + 10) >= (20 - 5)

It is the expression that yields a value, not the statement, which only assigns the value to a variable.
result = A and B

Above, A and B represent expressions (which can also be literals), with and being the logical AND operating on the two operands.

Thanks guy! It is very helpful to me.




 wiki-bot:

In the graphic shown here  we can think of A and B as statements


So what you guys are saying is the A and B are statement in this situation but…



 mtf:

this is an expression …
(100 + 10) >= (20 - 5)

It is the expression that yields a value, not the statement, which only assigns the value to a variable.
result = A and B

Above, A and B represent expressions (which can also be literals), with and being the logical AND operating on the two operands.


they can also be expressions too?




 evanito123:

they can also be expressions too?


To clear the confusion, they and not statements, but expressions. The lesson text is incorrect.
A and B in logical expressions are called operands, but they too are expressions.
""A""

is known as a string expression, which in logical terms is truthy since the string has a length greater than zero.
a + b

is an expression, that represents a value. All expressions represent a value whether it is numeric, string, boolean, data structure or anonymous function (lambda). All expressions have a logical value, as well… truthy or falsy.
Consider,
>>> a, b = 6, 7
>>> a + b > b + a
False
>>> a * b > b * a
False
>>> 

The first line is a statement, the second and third are expressions.
As mentioned earlier, statements do not have a value. They are an instruction step. Notice how the last two lines echo a value, that is the evaluation of the expression.
The bottom line is that we can use all manner of expressions to construct a logical expression. It will all boil down to a single boolean value.

Thanks, this made it very clear.
In the first line of your answer, you meant they are not statements, instead of they and not statements, Right?

Right. You read correctly. Lots of that typo disparity in dyslexia. The work never ends.
"
230,How is this different from a string?,"FAQ,Python FAQ",q-a,14,"
Question
How is the syntax for a multi-line string different from a string that has two additional quotes inside of it?
Answer
In our Codecademy editor, strings and multi-line comments do share the same color: yellow. However! They’re not the same. When Python sees three quotation marks (single ’ or double ”) before and after something, it knows to make that a comment, rather than run it as code, if it’s not preceded by assignment to a variable. To illustrate this point, take a look at the example below:
long_string = """"""
This is just a long string assigned to the long_string variable!
useful for paragraphs
or lines that are very long
""""""

""""""
This is a multi-line comment.
It spands multiple lines!
It has no variable before it that it is being assigned to,
so it is not a string like above.
""""""

","
It’s probably worth noting that long/docstrings are evaluated as string literals depending on where they are in the code. If they are in the right docstring locations they are added to the __doc__ special dictionary. Otherwise they are ignored by the bytecode interpreter.

Example to support @robmuh’s post above…
>>> def foo():
	""""""This is a
lengthy docstring that will be
parsed and bytecode interpreted
by Python.
""""""
	return '''foobar'''

>>> foo()
'foobar'
>>> foo.__doc__
'This is a\nlengthy docstring that will be\nparsed and bytecode interpreted\nby Python.'
>>> 

Note that the return is treated as a normal string.

Actually they are the same. And neither is a comment, but they don’t generate op-codes if not used, it’s dead code.




 ionatan:

if not used


Would that mean using it in an assignment?

Essentially it’s a “comment” because it doesn’t translate to any op-code
Assignment does (even if the variable isn’t used later, python doesn’t optimize such things, not cpython anyway (the reference implementation, and also most commonly used))

So would the following be a more accurate description?
>>> def foo():
	""""""This is a detailed
docstring that will be parsed
and written internally to the
__doc__ attribute of its
function object.
""""""
	pass

>>> print (foo.__doc__)
This is a detailed
docstring that will be parsed
and written internally to the
__doc__ attribute of its
function object.

>>> 


Talking about whether docstrings are added by opcodes? That isn’t an unused string, it’s not dead code, it does something. I don’t know whether an opcode is used to add it, but my guess would be yes

How is this different from using the “#” to make a comment?




 imntesta:

How is this different from using the “#” to make a comment?


That is a single line comment. Docstrings are intended to document a function.

So do I need to create a variable to print a multi line string? Or can I just print “”“A multi line string without first assigning it a variable?”""""

I’m not going to suggest it is the intended use, but we may be able to use docstrings to present preformatted text (the spacing, anyway). It can be printed directly, or stored in a variable and printed later.

Ok, so to further that, what is a docstring?

See the the earlier post above for an example. A docstring is intended to document a function, and when it appears at the top of function scope it can be accessed, printed or even saved to a variable.
>>> def foo():
	""""""This is a detailed
docstring that will be parsed
and written internally to the
__doc__ attribute of its
function object.
""""""
	return foo.__doc__

>>> print(foo())
This is a detailed
docstring that will be parsed
and written internally to the
__doc__ attribute of its
function object.

>>> 

"
231,"Given a single table, how can we split it into multiple tables?","FAQ,Python FAQ",,4,"
Question
In this exercise, it mentions splitting the table into multiple tables. Given a single table, how can we split it into multiple tables?
Answer
In this context, the tables are dataframes. Because they are dataframes, we just need to split the dataframe into separate CSV files using methods from Pandas.
The following example will split a dataframe (“table”) into separate dataframes (“tables”), and save them into separate CSV files, to make them more manageable to work with.
Example
# First, read the original CSV and store in 
# a variable. This is the original ""table"".
data = pd.read_csv(""filename.csv"")

# Split the dataframe into separate ones, by columns.
# These are the ""tables"".
df1 = data[['col1', 'col2']]
df2 = data[['col3', 'col4', 'col5']]
df3 = data[['col6', 'col7', 'col8']]

# Now, we just need to store these into 
# their own CSV files.
# Note: index=False is used to remove the added index column.
df1.to_csv('table1.csv', index=False)
df2.to_csv('table2.csv', index=False)
df3.to_csv('table3.csv', index=False)

","



 jephos249:

Split the dataframe into separate ones, by columns. # These are the “tables”. df1 = data[[‘col1’, ‘col2’]]


could you split the table using the function which pulls the first 3 and the last 3 columns, assuming it’s only 6 columns long using [-3:]/ [0:3] ?

Can anyone point to a good resource on theory for setting up a dataframe from scratch? It seems like we are getting contradictory messages about what makes for a ‘good table’ with ‘useful data’. In this lesson, it stresses that a dataframe that repeats information, such as customer name, products, etc., can ultimately result in tables that are big and unmanageable. However, in other lessons that focus on ‘tidy data’, it seems to stress that this kind of repetition is actually desirable for working with the data and doing analysis. So what’s the deal? Is it the difference between efficiency of data storage vs. efficiency of data usage? What is the actual best practice here?

Is your question about setting up a database from scratch? A database is a collection of tables (or dataframes in Pandas). For theory behind setting up a relational database from scratch, I found this resource provided a helpful overview: https://launchschool.com/books/sql/read/table_relationships
"
232,"We learned how to add columns, but what if wanted to remove them?","FAQ,Python FAQ",q-a,3,"
Question
In the lesson, we learned how to add columns to a dataframe, but what if wanted to remove them?
Answer
In addition to being able to add columns, we have the ability to remove columns of a dataframe in Pandas.
There are a few ways you can go about removing columns from a dataframe:


Creating a new dataframe, and including just the columns you want to keep from the original dataframe. For example, if we only wanted to include these columns from a dataframe, it effectively “removes” all the other columns not included:
new_df = df[['col1', 'col4']]


You can utilize the built-in drop() method, to delete a specific column. In order to drop a column, we must specify axis=1. We can do so as follows:
df.drop('col3', axis=1, inplace=True)


To drop multiple columns at once, we can enter in multiple column names as a list using drop(), like so:
df.drop(['col3', 'col5'], axis=1, inplace=True)


","
I used the following code…can you please tell me what is wrong with that @jephos249

salutation = lambda row: 'Dear Mr. ’ + row[‘last_name’] if row == ‘male’ else 'Dear Ms. ’ + row[‘last_name’]


orders[‘salutation’] = orders.gender.apply(salutation)

Error it’s showing

string indices must be integers, not str


apply must indicate to which to apply: adding ""   , axis = 1 "" after salutation,
"
233,What do the terms in Bayes' Theorem mean? A specific example,"FAQ,Python FAQ",q-a,1,"
Question
In this lesson, we are are presented with Bayes’ Theorem as follows
P(positive ∣ review) = (P(review | positive)⋅P(positive))​ / P(review).

What do these terms mean in plain language?
Answer
Let’s first begin with the left-hand side: P(positive ∣ review). This is the probability that a provided review is positive. This is our goal in these lessons.
Now let’s look at the numerator on the right-hand side: P(review | positive)⋅P(positive). As we’re told in this lesson, P(positive) is the probability that any review in our data set is positive. The term P(review | positive) is the probability that each of the words in the review appear in some positive review in our data set, given that we already know the review is a positive review.
Finally, let’s look at the denominator of the right-hand side: P(review). This can be looked at as the probability that the words in the review appear somewhere in our data set. Of course, since we’re dividing by this value, we should check that this value is not zero. What would it mean for P(review) to equal zero? Well, that would tell us that none of the words in the provided review appear in our data set. This is a problem because, as written, our algorithm won’t be able to classify this review in any way. Therefore, it’s “good” for our program to fail here as it provides an understanding of how our data set may be lacking.
",
234,How can I write the binary equivalent of a number?,"FAQ,Python FAQ",,5,"
Question
How can I write the binary equivalent of a number?
Answer
To write any number in binary, add the necessary powers of 2 until you’ve got your number. This is easy enough for small numbers, but not feasible for larger ones. For a better method, check out this video tutorial on converting decimal to binary!
","
This video really helped me out, thanks!

Take any number and divide it in half repeatedly disregarding remainders along the way until you get to 1. Write each answer to the left of the previous answer. Under each answer you write 1 if the answer is odd and 0 if the answer is even.
Example:
Write 2019 in binary.

1   3   7   15    31    63    126    252   504   1009   2019  - Repeatedly half 2019 until you get to 1, 
                                                                disregard remainders
1   1   1    1     1     1      0      0     0      1      1  - Write 1 under odd answers, 0 under even.

Answer: 2019 in binary is 0b11111100011.


Fantastic, you should integrate Khan Academy in your maths section of CodeCademy. That would make your offering close to perfect.

Another good video with another method of converting a decimal number to Binary using 2-4-8-16-32-64-128 bits places





"
235,Should we always import Matplotlib when using the Seaborn module?,"FAQ,Python FAQ",q-a,1,"
Question
Should we always import Matplotlib when using the Seaborn module?
Answer
The short answer is yes, you should always import Matplotlib if you are using Seaborn.
Seaborn is built on top of Matplotlib. It is an extension to it, and not a substitute. It builds on top of Matplotlib, introducing some additional plot types and provides some visual improvements to some plots and graphs.
However, on its own Seaborn doesn’t have all the functionality that Matplotlib provides, including the ability to change some defaults applied by Matplotlib.
We still need Matplotlib if we want to do things like changing the plot title or tick labels, and adding a legend. Matplotlib just makes it easier for us to do these things alongside Seaborn.
Also, we still need to have plt.show() because plots creating using seaborn must be displayed like Matplotlib plots. In some versions, Seaborn does allow you to do sns.plot.show(), but this is considered bad practice, and you should use plt.show() from Matplotlib instead.
",
236,Where in my code do I make this new slice of new_word?,"FAQ,Python FAQ",q-a,28,"
Question
Where in my code do I make this new slice of new_word?
Answer
A common issue here is trying to replace what we already had for new_word, where we concatenated word, first, and pyg. For this exercise we should change new_word again, but by assigning a value over it using the existing version of itself. Take a look at the example below for a better idea:
my_word = first + middle + suffix
my_word = my_word[index_to_slice_goes_here]

Otherwise, we’d be writing new_word = new_word[...] without having defined new_word yet, which will give you an error that reads: NameError: ‘new_word’ is not defined because we’re trying to use it to define itself, which is invalid.
","
2 posts were split to a new topic: This Code Seems Counter-Intuitive

in the terminal for Pyglatin
i type Love
and it shows velay
how it’s executed

There is space between I love you so is.alpha doest not count the space so it would not execute so you could use or insted of and . Even you could add the ASCII code of the characters

Why can’t I declare the three variables we declared inside the if statement outside of it? What would happen?




 gleagbothenoob:

Why can’t I declare the three variables we declared inside the if statement outside of it? What would happen?


technically you could, but why would you? You only want to do these steps when the user input is valid (which the if condition is checking)

I don’t understand the concept of slicing. I will show you :
s = ‘Charlie’
print s[0]
print s[1:4]
When you print this it prints :
C
har
Why doesn’t it print
C
and then
harl
Because the 1 to 4 letters in Charlie are harl
Plz help 

Review how slicing works: given str[x:y], x is the index of the first character of the slice, and y is one greater than the final index of the slice
That way str[x:len(str)] will work the way you want.

the exercise is
“Set new_word equal to the slice from the 1st index all the way to the end of new_word . Use [1:len(new_word)] to do this.”
the 1st index is 0 so how it became a 1 ?? the instruction should be reworded to be “… Use '[0:len(new_word)]…” OR mention “…2nd index…” instead of “…1st index…”.




 bad.banana:

the 1st index is 0 so how it became a 1 ?


the 1st index is the 1st index, if it says first letter, then yes, the index would have been zero

i disagree.
the first index of any array is always zero. for example, the array array1 = (1, 2, 3, 4) what is the value of the first index? starting from zero, the value of the first index is “1”.

well, given counting is from zero, the 0st index would be the first element, the 1st index is the second element.

LOL.
no such thing as 0st index.
All arrays have 0 as the index of their first element which is also called the base index and the last index of an array will be total size of the array minus 1
in the problem description, if what is indended is the second member of the array then it should have been referred to as the second element.




 bad.banana:

in the problem description, if what is indended is the second member of the array then it should have been referred to as the second element .


but second element is at index position 1, aka the 1st index. You have to bridge a gap here, that human counting starts at 1 while indexes start counting at 0.
we can endless argue about this, but it doesn’t matter. You need to understand what the exercise asks of you, and how to achieve this.

Just wanted to point out that the instructions for for step 10 are a little unclear. Not only is it tricky that we need to create a new variable, but we also have to omit the print statement. No way I would have been able to figure that out without peaking at the solution. It would be nice if the instructions were more thorough! I prefer not to look at the solutions, but you leave me no choice! 

You can always come to the forum to ask your question? Then we can help you in steps, then you don’t have to peak at the solution 

I keep getting a syntax error when slicing, with the syntax error pointing to the colon:
if len(original) > 0 and original.isalpha():
word = original.lower()
first = word[0]
new_word = [1:len(word)] + first + pyg
print new_word
else:
print ‘empty’

File “python”, line 8
new_word = [1:len(word)] + first + pyg
SyntaxError: invalid syntax

EDIT: nevermind, I realized I wasn’t calling the variable before the slice. Corrected by changing to:
new_word = word[1:len(word)] + first + pyg

how does this work ‘Set  new_word  equal to the slice from the 1st index all the way to the end of  new_word . Use  [1:len(new_word)]  to do this.’, when the new_word is just being created and also it includes + first + pyg before the it is know how many letters it will have?

len() will count the number of characters which are currently in the string. The addition to the string has already occurred, so will be included in the count.

thank you for the clarification. But it feels counter-intuitive
"
237,"In Pandas, can we compare the values of two columns in the same dataframe?","FAQ,Python FAQ",q-a,4,"
Question
In Pandas, can we compare the values of two columns in the same dataframe?
Answer
Yes, you can compare values of different columns of a dataframe within the logical statement.
Say for example, you had data that stored the buy price and sell price of stocks in two columns. If you wanted to select rows of the data for which the buy price was less than the sell price, you could compare their values in the logical statement.
Example
# This logical statement is comparing 
# the values of column `buy_price`
# and column `sell_price`
gains = df[df.buy_price < df.sell_price]

","
I found the above question & answer very usuful.
So, I tried based on lesson’s data to find the months for which visits in eastern clinics are less than those in western.
The expected output should be the data for March, April, May, June
I wrote:
less_east_relation_to_west =
df[df.‘clinic_east’ < df.‘clinic_west’]
print(less_east_relation_to_west)
Nevertheless, there was no output. The same happened even when I rewrote the code without ’ ’ in the name of the columns (clinic).
What was wrong with my code?

Hey @jminer583,
Try writing the column name without ‘’ .
less_east_relation_to_west =
df[df.clinic_east < df.clinic_west]
print(less_east_relation_to_west)

The above code works fine. and show the output given below.
month	clinic_east	clinic_north	clinic_south	clinic_west
2	March	81	96	65	96
3	April	80	80	54	180
4	May	51	54	54	154
5	June	112	109	79	129


df[df.‘clinic_east’ < df.‘clinic_west’]
You don’t need the single inverted commas in the above piece of your code. Without those, it should work fine.
"
238,Does concatenating dataframes preserve row order?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, does concatenating dataframes preserve row order?
Answer
Yes, by default, concatenating dataframes will preserve their row order. The order of the dataframes to concatenate will be the order of the result dataframe.
One way to think of the concat method is that it just stacks a dataframe on top of another dataframe.
For example,
pd.concat([df1, df2, df3])
will result in a dataframe with the rows of df1 stacked on top of the rows of df2, which will be stacked on top of the rows in df3, preserving their initial row order.
In addition, by default, duplicate rows will be included when concatenating dataframes. So,
pd.concat([df1, df1])
will result in having the dataframe df1 on top of itself with all rows duplicated.
",
239,Should all custom exception classes inherit from Exception?,"FAQ,Python FAQ",q-a,1,"
Question
When defining custom exception classes, should they all inherit from the Exception class?
Answer
Yes, all custom exception classes should either directly inherit from the Python Exception class or should inherit from another class (or chain of classes) which can trace back to Exception.
",
240,Can we change the colors of a pie chart?,"FAQ,Python FAQ",q-a,2,"
Question
In the context of this exercise, can we change the colors of a pie chart?
Answer
Yes, you can set specific colors for a pie chart using the colors parameter.
To set specific colors for a pie chart, you can pass in a list of color values. If there are more wedges than the number of colors, the wedges will cycle through the list of colors.
Example
plt.pie(data, colors=[""red"", ""orange"", ""yellow"", ""green""])

","
Thankyou so can we also change the color of the bars…
"
241,What do the terms in Bayes' Theorem mean? A specific example,"FAQ,Python FAQ",q-a,1,"
Question
In this lesson, we are are presented with Bayes’ Theorem as follows
P(positive ∣ review) = (P(review | positive)⋅P(positive))​ / P(review).

What do these terms mean in plain language?
Answer
Let’s first begin with the left-hand side: P(positive ∣ review). This is the probability that a provided review is positive. This is our goal in these lessons.
Now let’s look at the numerator on the right-hand side: P(review | positive)⋅P(positive). As we’re told in this lesson, P(positive) is the probability that any review in our data set is positive. The term P(review | positive) is the probability that each of the words in the review appear in some positive review in our data set, given that we already know the review is a positive review.
Finally, let’s look at the denominator of the right-hand side: P(review). This can be looked at as the probability that the words in the review appear somewhere in our data set. Of course, since we’re dividing by this value, we should check that this value is not zero. What would it mean for P(review) to equal zero? Well, that would tell us that none of the words in the provided review appear in our data set. This is a problem because, as written, our algorithm won’t be able to classify this review in any way. Therefore, it’s “good” for our program to fail here as it provides an understanding of how our data set may be lacking.
",
242,Can we stack more than 2 bars in a bar chart?,"FAQ,Python FAQ",,4,"
Question
In the context of this exercise, can we stack more than 2 bars on top of each other?
Answer
Yes, you can absolutely stack more than 2 bars on a bar chart.
In order to do this, the bottom of each subsequent set of bars should equal the total heights of the bars below them.
Example
# Given the follow y values for 3 groups of data
group1 = [1, 1, 1, 1]
group2 = [2, 2, 2, 2]
group3 = [3, 3, 3, 3]

x = [0, 1, 2, 3] # x positions

# First layer of bars
plt.bar(x, group1)

# Second layer of bars
plt.bar(x, group2, bottom=group1)

# Adding a third layer of bars.
# Calculate the bottom height of the third layer
# by adding together all lower layer heights.
bottom_of_3 = [1+2, 1+2, 1+2, 1+2] # [3, 3, 3, 3]

# Third layer of bars
plt.bar(x, group3, bottom=bottom_of_3)

","
You can also add up those numbers using numpy arrays - helpful when dealing with large lists of data:
import numpy as np # importing numpy
from matplotlib import pyplot as plt

sales1 =  [91, 76, 56, 66, 52, 27]
sales2 = [65, 82, 36, 68, 38, 40]
sales3 = [32, 35, 55, 95, 23, 2] # I just made these numbers up

plt.bar(range(len(sales1)), sales1, label=""Location 1"")
plt.bar(range(len(sales2)), sales2, bottom=sales1, label=""Location 2"")

# Creating a variable that contains an array of values 
# equal to sales1 + sales2 at each index
bottom_of_3 = np.array(sales1) + np.array(sales2)

# Creating third layer of bars using the new variable
plt.bar(range(len(sales3)), sales3, bottom=bottom_of_3, label=""Location 3"")

*Note that the use of numpy for stacked bar charts comes up in a later lesson. Thanks Codecademy 




 jephos249:

bottom_of_3 = [1+2, 1+2, 1+2, 1+2]


We can even use list comprehensions for the same.
sales1 =  [91, 76, 56, 66, 52, 27]
sales2 = [65, 82, 36, 68, 38, 40]
sales = [25,32, 37, 35, 55, 23] # I just made these numbers up

plt.bar(range(len(sales1)), sales1, label=""Location 1"")
plt.bar(range(len(sales2)), sales2, bottom=sales1, label=""Location 2"")

# Creating a variable that contains an array of values equal to sales1 + sales2 at each index

bottom_3 = [sales1[i] + sales2[i] for i in range(len(sales1))]
plt.bar(range(len(sales)), sales, bottom = bottom_3, label = ""Location 3"")
plt.show()

Hope this helps 

I think zip is useful here.
bottom_3 = [v1 + v2 for (v1, v2) in zip(sales1, sales2)]

"
243,What are A and B in programming?,"FAQ,Python FAQ",,8,"
Question
What are A and B in programming?
Answer
In the graphic shown here we can think of A and B as statements.
In programming, a statement can be thought of as something that has some result. Take, for example, what we’ve been writing so far: 10 < 1 results in False, or (30 + 1) != 3 results in True.
So A and B are just statements like those, and they can be as complex as you want. Then we use and, or, and not as operators on these statements to make what we call expressions. An expression is just something that results in some value, True or False in this case.
If you want a challenge, take a look at the example below that’s a bit more than what we’ve done so far. If it doesn’t make sense, that’s totally fine! You will understand it in the exercises to come!
left_half  = (100 + 10) >= (20 - 5)  # True
right_half = (25 / 5) == 70  # False
bool_complex_false = left_half and right_half  # True AND False is False!

","
A and  B here are Statements . Its generally known as “PREPOSITION”.
A preposition is an atomic sentence which can result either true or false and nothing else .
eg. A= its Sunny outside.
B= My father is  not at home .
you can see the answers to the statement A and B can either be true or false and nothing else . In computer language the value given to A and B are 0(false) and 1(true). By these values we can form premises.

Not to be overly semantic, this is a statement…
left_half  = (100 + 10) >= (20 - 5)

and this is an expression…
(100 + 10) >= (20 - 5)

It is the expression that yields a value, not the statement, which only assigns the value to a variable.
result = A and B

Above, A and B represent expressions (which can also be literals), with and being the logical AND operating on the two operands.

Thanks guy! It is very helpful to me.




 wiki-bot:

In the graphic shown here  we can think of A and B as statements


So what you guys are saying is the A and B are statement in this situation but…



 mtf:

this is an expression …
(100 + 10) >= (20 - 5)

It is the expression that yields a value, not the statement, which only assigns the value to a variable.
result = A and B

Above, A and B represent expressions (which can also be literals), with and being the logical AND operating on the two operands.


they can also be expressions too?




 evanito123:

they can also be expressions too?


To clear the confusion, they and not statements, but expressions. The lesson text is incorrect.
A and B in logical expressions are called operands, but they too are expressions.
""A""

is known as a string expression, which in logical terms is truthy since the string has a length greater than zero.
a + b

is an expression, that represents a value. All expressions represent a value whether it is numeric, string, boolean, data structure or anonymous function (lambda). All expressions have a logical value, as well… truthy or falsy.
Consider,
>>> a, b = 6, 7
>>> a + b > b + a
False
>>> a * b > b * a
False
>>> 

The first line is a statement, the second and third are expressions.
As mentioned earlier, statements do not have a value. They are an instruction step. Notice how the last two lines echo a value, that is the evaluation of the expression.
The bottom line is that we can use all manner of expressions to construct a logical expression. It will all boil down to a single boolean value.

Thanks, this made it very clear.
In the first line of your answer, you meant they are not statements, instead of they and not statements, Right?

Right. You read correctly. Lots of that typo disparity in dyslexia. The work never ends.
"
244,How can I obtain just the odd indices of a list?,"FAQ,Python FAQ",,48,"
Question
In the context of this code challenge, how can I obtain just the odd indices of a list?
Answer
There are a few ways you can obtain the odd indices of a list. The methods shown here will be how to obtain the indices and not the actual values stored in the list at the indices. Once you have the indices, you can get the actual values easily.
One way is using the range() function, such that it starts at the first odd index, 1, and has a step value of 2, so that it returns the odd indices 1, 3, 5, ....
range(1, len(list), 2)

Another way to obtain the odd indices of a list is using list comprehension, in which you can use a condition that will only include the odd indices.
[i for i in range(len(lst)) if i % 2 == 1]

One other way is to use a for loop over the indices of a list, and using an if statement that checks whether that index is odd, similar to the condition used in the list comprehension above. This method will not be shown here, but feel free to try implementing it on your own!
","
You could also slice the list. For example:

lst[1::2]

This will return only the odd indices of the list

That’s right. Also del [: : 2] will delete all even indices and return odd indices numbers. 

Now I am not 100% sure about this, but I think the solution given by the course fails when the list provided has an odd number of elements because by using the range with the length of the list, it will automatically exclude the last element of the list.

if that is the case, the challenge is to write code to prove this
i don’t think it will happen, given range/len starts counting at one while indices start at zero
so if have the following list:
[1, 2, 3, 4, 5]

the length is 5 while the highest index is 4

When I was on that exercise, I added an element to the list of the example and the solution provided did not print it, which was when I decided to post my previous reply.

so you claim this:
#Write your function here
def odd_indices(lst):
  new_lst = []
  for index in range(1, len(lst), 2):
    new_lst.append(lst[index])
  return new_lst

#Uncomment the line below when your function is done
print(odd_indices([4, 3, 7, 10, 11, -2, 6]))

doesn’t work? Works fine, 6 is an even index, so it make sense it isn’t added.
next time, please add a code sample to prove your point. thank you

I think there’s a correction in the way you used the list comprehension. Let me know if I’m wrong:
def odd_indices(lst):
result = [lst[i] for i in range(len(lst)) if i%2==1]
return(result)
print(odd_indices([4, 3, 7, 10, 11, -2]))

def odd_indices(lst):
new_list = [i for i in range(len(lst)) if i % 2 == 1]
return new_list
print(odd_indices([4, 3, 7, 10, 11, -2]))
How come when I run this code it returns [1, 3, 5]?
It seems it is giving me the odd indices but not their values…

Look at the post just above yours. See the difference?

Hello can you please help me?
def odd_indices(lst):
  odd_indices_lst=[]
  for i in range(1,len(lst),2):
    odd_indices_lst.append(lst[i])
    
  return odd_indices_lst
#Uncomment the line below when your function is done
print(odd_indices([4, 3, 7, 10, 11, -2]))

this way the code works as it is supposed to. evereything seems fine.
I tried to remove the append command and use the += command instead.
instead of writting odd_indices_lst.append(lst[i])
i tried writting  odd_indices_lst += lst[1]  and i ended up with an TypeError: ‘int’ object is not iterable.
Could you please explain why the += doesn’t work in this example?
Thank you very much.

You can “add” (I.e., make use of the + operator) a list to another list (equivalent to lst.extend), but you must append an object of a different type to a list.

so the difference is that append adds any type of object to a list, but in order to use + or += you must add an object of the same type.?
is that why if i put the +=lst[1] into [] brackets it works perfectly?
def odd_indices(lst):
  odd_indices_lst=[]
  for i in range(1,len(lst),2):
    odd_indices_lst+=[(lst[i])]
  return odd_indices_lst
                 

after all cleared up, why should i choose append over the += or why should i choose += over append? Im asking specifically for this exercise.

that seems interesting. could you explain how does this work?

its already mentioned? + is list extending. This should give you what you need to start some research:
https://www.geeksforgeeks.org/append-extend-python/




 code5132969222:

so the difference is that append adds any type of object to a list, but in order to use + or += you must add an object of the same type.?


Not quite: += or lst.extend() work to “append” the entire contents of a list to a given list.  The material to be added must be within a list.



 code5132969222:

why should i choose append over the += or why should i choose += over append?


It just depends on what you are trying to do.
If I want to add an int to a list of ints, why would I want to create an extra step of first putting my int inside a list just so that I could use +=, when I have append() available?
On the other hand, if I have a list of int whose elements I’d like to tack on to an existing list, why go through the first list and do for-in-append() for each element when I have extend (or += ) available?


On the other hand, if I have a  list of int  whose elements I’d like to tack on to an existing list, why go through the first list and do  for-in-append()  for each element when I have  extend  (or  +=  ) available?

Yes, but coulnd’t you just use .append() like that :
list_a.append(list_b) 

correct me if i’m wrong but isn’t that possible?

It’s really a matter of choosing one method or the other.
[1, 2, 3] + [4, 5, 6]        =>  [1, 2, 3, 4, 5, 6]

[1, 2, 3].extend([4, 5, 6])  =>  [1, 2, 3, 4, 5, 6]

We cannot append multiple values in one expression, so this won’t work…
>>> [1, 2, 3].append(4, 5, 6)

Traceback (most recent call last):
  File ""<pyshell#0>"", line 1, in <module>
    [1, 2, 3].append(4, 5, 6)
TypeError: append() takes exactly one argument (3 given)

and if we attempt to append a list, we get this,
>>> a = [1, 2, 3]
>>> a.append([4, 5, 6])
>>> a
[1, 2, 3, [4, 5, 6]]
>>> 


here is my workaround :
def odd_indices(lst):
  return [lst[i] for i in range(len(lst)) if i % 2 != 0]
   

print(odd_indices([4, 3, 7, 10, 11, -2]))
#[3, 10, -2]


any comments on it ?

We would have to conclude that list comprehensions have already been taught, which may not in fact be the case at this point for most learners. Can you confirm that solution should be on the table?
If we take comprehensions off the table, we may still use range to isolate the odd indices.
result = []
for i in range(1, len(lst), 2):
    result.append(lst[i])
return result
"
245,"When plotting multiple lines in Matplotlib, does each need to have the same number of x and y values?","FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, when plotting multiple lines in Matplotlib, does each line need to have the same number of x and y values?
Answer
No, when you are plotting multiple lines, they do not need to have the same amount of x and y values, nor do they need to share the same x values.
When you plot multiple lines, it is as though each line is plotted separately onto the same graph.
For example, the following code will draw two lines on a single plot. The first line will be drawn on the x coordinates 0 to 4, while the second line will be drawn over the x coordinates 5 to 8. The second line will also have one less value than the first line.
Example
x1 = [0, 1, 2, 3, 4]
x2 = [5, 6, 7, 8]

y1 = [100, 200, 300, 400, 500]
y2 = [100, 200, 300, 400]

plt.plot(x1, y1)
plt.plot(x2, y2)

plt.show()

",
246,Why does it ask me not to use compute_bill?,"FAQ,Python FAQ",,27,"
Question
Why does it ask me not to use compute_bill?
Answer
If you think you’ve coded your function properly and are receiving an error message along the lines of stock doesn't look quite right! Make sure to not call compute_bill since it changes the stock!, this is because in this step we aren’t using the function after writing it, we’re just writing the function.
Try deleting where you used the function and then Run your code again.
It’s great to want to test your code! However, Codecademy runs tests to check your code that depend on the values being the original values, and running the function in your code in this step changes those values. You’ll be able to use it in the very next step!
","
Could you say me where is my problem
shopping_list = [""banana"", ""orange"", ""apple""]

stock = {
  ""banana"": 6,
  ""apple"": 0,
  ""orange"": 32,
  ""pear"": 15
}
    
prices = {
  ""banana"": 4,
  ""apple"": 2,
  ""orange"": 1.5,
  ""pear"": 3
}

      # Write your code below!
def compute_bill(food):
  total = 0
  for item in food:
    if not stock[item] <= 0:
      total += prices[item]
      
    else:
      print ((""Stock has no %s"") % item)
  stock[item] -= 1
  return total

print (compute_bill(shopping_list))


i would be possible to buy 9 bananas:
shopping_list = [""banana"", ""orange"", ""apple""]

stock = {
  ""banana"": 6,
  ""apple"": 0,
  ""orange"": 32,
  ""pear"": 15
}
    
prices = {
  ""banana"": 4,
  ""apple"": 2,
  ""orange"": 1.5,
  ""pear"": 3
}

      # Write your code below!
def compute_bill(food):
  total = 0
  for item in food:
    if not stock[item] <= 0:
      total += prices[item]
      
    else:
      print ((""Stock has no %s"") % item)
  stock[item] -= 1
  return total

print (compute_bill(['banana'] * 9))

while there are only 6 bananas in stock

Guys! Where is the key to solve the exercise?

i told you, if i attempt to buy 9 bananas, i can. Which shouldn’t be possible, because there are only 6 bananas in stock.

Hi,
I’m not sure if this solves your problem, but try indent the stock[item] -= 1 more.
It seems to me that currently it sits on the same level as the ‘for loop’ (i.e under the main function level) but it should be under the ‘for loop’ since we need to do that subtraction in each loop.
I hope this helps
cheers,
D.

Close, (s)he should only decrease stock when the item isn’t in stock, so it should be nested inside the if clause

I guess you wanted to write …the item is in stock…
anyway, it is strange because that’s what I thought at first but putting that line inside the if clause caused an indent error. So I went ahead and tried other indents. And strangely only the above mentioned (by me) worked.
today I went back and tried your suggestion again, and it worked now. pretty odd.
maybe it has something to do with tab vs space indentation?




 dborbas:

maybe it has something to do with tab vs space indentation?


the indent settings within the codecademy editor are not ideal.

A post was split to a new topic: A Day at the Supermarket: Why is this wrong?

You need to put stock[item] -= 1 in the if not statement you have it in the else statement.

I’ve been experiencing many IndentationError messages (in this as well as previous exercises) despite my code being identical to the solution and Codecademy wouldn’t allow me to move on unless I went for the Solution. I even tried deleting the indents of the error Line and reintroducing them in a consistent manner, but it still wouldn’t accept my code. Is there another solution? Do I need to delete all indents of every line and consistently reintroduce them line by line for my code to be recognized?
My code:

3e6a942022e9f7ca71d9883acf6206185afe6726.png3222×1804 627 KB

Solution code:

Codecademy-noerror.png3248×1820 553 KB


codecademy’s editor sucks when it comes to indent. I would re-indent the code in your own local editor, if you haven’t set this up, you could use sites like repl.it

Ok, thanks for the suggestion, I’ll try that next time.

Any idea what I’m doing wrong?

image.png625×853 49.8 KB


The dictionary value is not updated when you just minus 1 from the value, you then need to also set the dictionary value to the value minus 1.
stock[item] = stock[item] - 1

This was exactly the problem. Thank you!

The problem for me was the stock[item] = -1 did not work. I needed to make it stock[item -= 1

why am I getting errors with this code?
def compute_bill(food):
  total = 0
  for items in food:
    if stock[items] > 0:
      total += prices[items]
      stock[items] -= 1
  return total
print compute_bill(shopping_list)


That is literally what this FAQ answers:



 wiki-bot:

Question
Why does it ask me not to use compute_bill?
Answer
If you think you’ve coded your function properly and are receiving an error message along the lines of stock doesn't look quite right! Make sure to not call compute_bill since it changes the stock! , this is because in this step we aren’t using the function after writing it, we’re just writing the function.
Try deleting where you used the function and then Run your code again.
It’s great to want to test your code! However, Codecademy runs tests to check your code that depend on the values being the original values, and running the function in your code in this step changes those values. You’ll be able to use it in the very next step!


"
247,When should I create a dataframe using a dictionary or a list?,"FAQ,Python FAQ",q-a,4,"
Question
When should I create a Pandas dataframe using a dictionary or a list?
Answer
You can create Pandas dataframes using either a dictionary or a list of lists, but depending on several factors, using one can be preferred over the other.
Using dictionaries can be much faster, since you can just include the column names as the keys, and include the values of the column as a list for the keys. However, a disadvantage of using a dictionary is that the columns will not preserve the order that you entered them, and will default to alphabetical ordering instead. This is important to keep in mind especially if the column order is important.
Using a list of lists allows you to enter each row of data one at a time as a  separate list, but it may take longer than using a dictionary, since column names must be added as a separate list after the rows are added. However, a list of lists allows you to order the column names specifically, which can be very important.
","
Thanks! Is there a way to use dictionaries and order the columns afterwards?



stackoverflow.com






How to change the order of DataFrame columns?


python, pandas, dataframe


  asked by
  
  
    Timmie
  
  on 10:22PM - 30 Oct 12 UTC






Basically create a reordered list including all the column names and then use the list as an index when creating a copy of your df.
also this: Can we select columns of a dataframe in any order?

I was just thinking that…it’s so easy and saves time as you people have already pasted the links at the bottom of the exercises. Codecademy is the best…there’s no doubt about that. You are amazing @jephos249.
"
248,Does concatenating dataframes preserve row order?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, does concatenating dataframes preserve row order?
Answer
Yes, by default, concatenating dataframes will preserve their row order. The order of the dataframes to concatenate will be the order of the result dataframe.
One way to think of the concat method is that it just stacks a dataframe on top of another dataframe.
For example,
pd.concat([df1, df2, df3])
will result in a dataframe with the rows of df1 stacked on top of the rows of df2, which will be stacked on top of the rows in df3, preserving their initial row order.
In addition, by default, duplicate rows will be included when concatenating dataframes. So,
pd.concat([df1, df1])
will result in having the dataframe df1 on top of itself with all rows duplicated.
",
249,Should all custom exception classes inherit from Exception?,"FAQ,Python FAQ",q-a,1,"
Question
When defining custom exception classes, should they all inherit from the Exception class?
Answer
Yes, all custom exception classes should either directly inherit from the Python Exception class or should inherit from another class (or chain of classes) which can trace back to Exception.
",
250,What do percentiles tell us?,"FAQ,Python FAQ",q-a,1,"
Question
What do percentiles tell us?
Answer
Percentiles tell us how a value of a dataset stands relative to the rest of the data.
One well-known example is for standardized test scores. Percentiles tell us how well someone performed relative to all other test scores. A score in the 95th percentile means that they performed better than 95 percent of test takers and 5 percent performed better.
Percentiles depend entirely on the dataset, so a set of scores from one school can have very different percentiles from the set of scores of another school. The measure used for the values will also affect the data, such as if the tests are out of 1600 or out of 100.
Further applications of percentiles that are important in data analysis are applications such as for determining the interquartile range (3rd - 1st percentile), which is used to know how spread a dataset is.
",
251,What calculation was used to determine the probability of this exercise?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, what calculation was used to determine the probability of making an exact number of baskets?
Answer
The calculation used is known as the Probability Mass Function. This gives us the probability of getting exactly “r” successes in “n” trials.
The calculation is as follows,
Probablity of r = nCr * (p^r) * (1-p)^(n-r)
p = Probability of making a basket.
n = number of trials.
r = number of specific events to obtain.
This gives us the Probability of making exactly ""r"" out of ""n"" baskets.
nCr is the combination, or “n choose r” operation. The formula for this is
n! / (r! * (n - r)!)
As an example,
'''
Given the probability of making a basket as: 0.5.
What is the probability of making exactly 2 out of 5 baskets?

Plugging this into our equation, we have
(5 C 2) * (0.5^2) * (1-0.5)^(5-2)
= 10 * 0.25 * 0.125
= 0.31
'''

Feel free to try out different values in the exercise, and see how this works!
",
252,Is there an ideal bin width for histograms?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, is there an ideal bin width for histograms?
Answer
In regards to bin widths, there is no “one size fits all” solution to picking a perfect bin width for any dataset. It is highly dependent on the data and how you choose the range of values per bin.
Ideally, your bin widths will be able to give a meaningful representation of your data. One example is if your data is for age ranges of a poll, the bins might be 10 wide (10-20, 20-30, …), which can make a lot of sense.
Choosing too few or too many bins can take away from one’s understanding of the data.
Choosing too few bins will result in an inaccurate representation of the distribution. For example, if we only had 2 bins for the entire graph, we might end up with bars that don’t tell us much. For example, it would be like choosing age ranges of 10-50 and 50-90.
Choosing too many bins can end up giving us many empty spaces and cause the bar to not appear smooth. This is like choosing age ranges of 10-12, 12-14, 14-16, …, 88-90, which is probably not be necessary.
There do exist complex formulas that can be used to get a more precise bin size for a dataset, such as Sturge’s formula, Doane’s formula, or the Freedman-Diaconis rule, but these are beyond the scope of the course.
",
253,Should we always import Matplotlib when using the Seaborn module?,"FAQ,Python FAQ",q-a,1,"
Question
Should we always import Matplotlib when using the Seaborn module?
Answer
The short answer is yes, you should always import Matplotlib if you are using Seaborn.
Seaborn is built on top of Matplotlib. It is an extension to it, and not a substitute. It builds on top of Matplotlib, introducing some additional plot types and provides some visual improvements to some plots and graphs.
However, on its own Seaborn doesn’t have all the functionality that Matplotlib provides, including the ability to change some defaults applied by Matplotlib.
We still need Matplotlib if we want to do things like changing the plot title or tick labels, and adding a legend. Matplotlib just makes it easier for us to do these things alongside Seaborn.
Also, we still need to have plt.show() because plots creating using seaborn must be displayed like Matplotlib plots. In some versions, Seaborn does allow you to do sns.plot.show(), but this is considered bad practice, and you should use plt.show() from Matplotlib instead.
",
254,"Given a single table, how can we split it into multiple tables?","FAQ,Python FAQ",,4,"
Question
In this exercise, it mentions splitting the table into multiple tables. Given a single table, how can we split it into multiple tables?
Answer
In this context, the tables are dataframes. Because they are dataframes, we just need to split the dataframe into separate CSV files using methods from Pandas.
The following example will split a dataframe (“table”) into separate dataframes (“tables”), and save them into separate CSV files, to make them more manageable to work with.
Example
# First, read the original CSV and store in 
# a variable. This is the original ""table"".
data = pd.read_csv(""filename.csv"")

# Split the dataframe into separate ones, by columns.
# These are the ""tables"".
df1 = data[['col1', 'col2']]
df2 = data[['col3', 'col4', 'col5']]
df3 = data[['col6', 'col7', 'col8']]

# Now, we just need to store these into 
# their own CSV files.
# Note: index=False is used to remove the added index column.
df1.to_csv('table1.csv', index=False)
df2.to_csv('table2.csv', index=False)
df3.to_csv('table3.csv', index=False)

","



 jephos249:

Split the dataframe into separate ones, by columns. # These are the “tables”. df1 = data[[‘col1’, ‘col2’]]


could you split the table using the function which pulls the first 3 and the last 3 columns, assuming it’s only 6 columns long using [-3:]/ [0:3] ?

Can anyone point to a good resource on theory for setting up a dataframe from scratch? It seems like we are getting contradictory messages about what makes for a ‘good table’ with ‘useful data’. In this lesson, it stresses that a dataframe that repeats information, such as customer name, products, etc., can ultimately result in tables that are big and unmanageable. However, in other lessons that focus on ‘tidy data’, it seems to stress that this kind of repetition is actually desirable for working with the data and doing analysis. So what’s the deal? Is it the difference between efficiency of data storage vs. efficiency of data usage? What is the actual best practice here?

Is your question about setting up a database from scratch? A database is a collection of tables (or dataframes in Pandas). For theory behind setting up a relational database from scratch, I found this resource provided a helpful overview: https://launchschool.com/books/sql/read/table_relationships
"
255,FAQ Hint: Be aware of nesting iteratives and loops,"FAQ,Python FAQ",,15,"
Concept
As per this lesson, you may find yourself wanting to combine loops like for and while. However in doing so, it is important to understand how they will interact when nested.
Mechanics
There are a few key issues that I have seen pop up regularly in questions:
The first if you have two for loops, the inner for loop will run completely for each step in the outer for loop. Example:
list1 = [1,2,3]
list2 = ['a', 'b', 'c']
for n in list1:
  for L in list2:
    print(str(n) + L)
#output: 1a, 1b, 1c, 2a, 2b, 2c, 3a, 3b, 3c

As you can see, it cycles through all of the second loop before moving on to #2 in the first loop. This also demonstrates that a variable used in the outer loop can be used in the inner loop. Variables from the inner loop can be used in the outer loop but only after being defined (this could be useful if you were creating a list for example).
On the other hand, an outer while will not be checked during the running of an inner loop.
i = 0
while i < 2:
  for n in range(0,6):
    i = n
    print(i)
#output: 0, 1, 2, 3, 4, 5

As you can see, the inner for loop will run to completion ignoring the while loop even though you may have expected it to stop once i was 2.
These are just a couple examples that will hopefully help solve issues with your own code. Please discuss below and help each other to further solve challenges that arise.
","
@catower, great comments!.
It’s also well to note that (unlike in some other languages) you can’t adjust the value of the iteration variable from within a for loop, as you can from within a while loop.
for i in range(0,3):
    print(i)
    i = i + 10
    print(i)

Output:
0
10
1
11
2
12

Here, at least within the loop, range() keeps an iron grip on the value of i.




 patrickd314:

It’s also well to note that (unlike in some other languages) you can’t adjust the value of the iteration variable from within a for loop, as you can from within a while loop.


Indeed. 
This is because the for implementation in Python leverages an internal counter to track which item from the iterable sequence comes next, and overwrites your target variable (i in your example) with that value each iteration until it reaches the end of the iterator.
This is why you get odd behaviour in some cases, for example if you remove items from a list while iterating over it.

So I completely misinterpreted the question and thought I was supposed to delete all the elements which are even numbered, and it sent me down a rabbit whole for a few days. I feel like the more I progress, the more the questions become more obtuse.
Anyway, I would like to share all my failures in order to help those who come after. Ultimately, I don’t think I solved it the way CA intended it to be solved. But hey, it works
#Write your function here
def delete_starting_evens(lst):
  index = 0
  for element in range(len(lst)):    
    if lst[element] % 2 == 0:
      index += 1
    else:
      break
  del lst[:index]
  return lst
  
      

""""""def delete_starting_evens(lst):
  index = -1
  while index >= 0:
    for element in range(len(lst)):
      print(lst)
      if lst[element] % 2 == 0:
        del lst[element]        
      index +=1
    return lst""""""

""""""def delete_starting_evens(lst):
  index = -1
  for element in range(len(lst)):
    #print(lst[element])   
    if lst[element] % 2 == 0:
      #print(lst[element])
      index += 1
      #print(index)
  print(index)
  print(lst[:index])
  del lst[:index]
  return lst""""""
      
      
""""""
  element += 1
  del lst[:element]
  return lst""""""


""""""def delete_starting_evens(lst):
  for element in range(len(lst)):
    if lst[element] % 2 == 0:
      print(lst[element])
      continue
    else:      
      return lst""""""

""""""def delete_starting_evens(lst):
  while lst:
    for element in range(len(lst)):
      if lst[element] % 2 == 0:
        del lst[element]
      else:
        break
  return lst""""""

""""""def delete_starting_evens(lst):
  for element in reversed(range(len(lst))):
    if lst[element] % 2 == 0:
      del lst[element]
      # print(lst[element])
  return lst""""""

#Uncomment the lines below when your function is done
print(delete_starting_evens([4, 8, 10, 11, 12, 15]))
print(delete_starting_evens([4, 8, 10]))









The word “delete” is a bit misleading.
Generally a function or method should either modify something, or return a new something. Not both. If it does both then the user might use one but not account for the other, and it’s pretty weird to present the result in two ways when there is only one result.
Unless the intention is specifically to modify an existing value, then you’ll want to create a new value and leave the input unchanged.
So the spirit of the function then is to create a list that is a copy of the original, but without leading even values.
Your function is easily amended by changing this:
  del lst[:index]
  return lst

To not modify the original, and instead return a copy from index and onwards.
It’s also worth noting that this easily breaks into two separate and composable concepts, dropwhile, and a condition, so this would be one implementation:
from functools import partial

def dropwhile(p, xs):
    res = list(reversed(xs))
    while res and p(res[-1]):
        res.pop()
    return list(reversed(res))

def even(x):
    return x % 2 == 0

delete_starting_evens = partial(dropwhile, even)


Oh, oh, I spend alot of time to solve this task.
In most I hade an Empty value
And I got it to return of a list to the funktion and move the indent to
def delete_starting_evens(lst):
    while len(lst) > 0 and lst[0] % 2 == 0:
      lst = lst[1:]
    return lst  


Your post helped clear things up. I think I was under the same impression as
@kurthamm5378307535.

Why doesn’t this work?
def delete_starting_evens(lst):
  for i in lst:
    if i % 2 == 0:
      lst.remove(i)
    else:
      break
  return lst


if you change the thing you’re looking at then it’ll look different. you’d need to account for those changes when looking at it or change a separate value
list.remove isn’t what you want anyway

Can please somebody kindly explain why do we need to know the length of the list in order to make this function to work properly? Thank you!

It depends a little on which solution you are looking at (if it’s not the while loop then my apologies, a short piece of the code that’s troubling would help).
If it’s a while loop, len(lst) is used to avoid throwing errors. This would occur in an instance where every value in lst is even. Without checking to see if the list is still populated with len(lst) > 0, slicing and methods such as .pop() would throw index errors.
You could skip the len() calls as with Python empty lists along with similar types have a false boolean value and you could use this to check if the list was still populated such that-
lst = 
bool(lst) == False
if lst: print(‘test’)
Would print nothing, whereas
lst = [‘b’]
bool(lst) == True
if lst: print(‘test’)
Would print ‘test’.
Whether this is more or less readable is a little up for debate-


stackoverflow.com






How do I check if a list is empty?


python, list


  asked by
  
  
    Ray
  
  on 06:20AM - 10 Sep 08 UTC







That’s exactly the answer I was looking for. I think i get it now, thanks! Will also read through the link you shared

I could not grasp the logic on this example.
i = 0
while i < 2:
  for n in range(0,6):
    i = n
    print(i)
#output: 0, 1, 2, 3, 4, 5

I thought if n=i and when n gets to 2, n should stop

Hi @py4630439988.
Check the nesting on these loops. The for loop is separate to the while statement whilst it runs. The conditional i < 2 is checked once at the start of the while loop when i == 0 which evaluates to True. Code inside the while loop is then executed (it does not check the value of i again until this has finished).
For loop runs and prints 0 through to 5 (i does change but it is never checked against anything). Once the for loop has finished i == 5. As the code inside the while loop has now been executed it starts it’s next iteration and the the check for the while loop is performed again i < 2 which is now False since i == 5.
So I think your issue is that you expect the while loop conditional i < 2 is checked more often than it is.

its cleared now thx a lot
"
256,What happens to the x-tick labels if the text becomes long?,"FAQ,Python FAQ",q-a,1,"
Question
On a bar chart, what happens to the x-tick labels if the text becomes long?
Answer
When x-tick label strings become too long, you will not get any error messages. However, the label text will start to overlap with the other label text, which can make them hard to read.
To prevent the issue of labels overlapping, you might utilize the rotation parameter, which will rotate the text for each label. By rotating the text, the text is no longer stuck stretching out horizontally but will stretch out on an angle, which will prevent overlap with the other labels.
Another way to prevent the issue of overlap is by avoiding it entirely. This can be done by choosing label text lengths that are not too long. You might do this by abbreviating terms.
Having label text that is easy to read is important so that other people will also be able to read and understand the information displayed on your graphs.
",
257,How can I write the binary equivalent of a number?,"FAQ,Python FAQ",,5,"
Question
How can I write the binary equivalent of a number?
Answer
To write any number in binary, add the necessary powers of 2 until you’ve got your number. This is easy enough for small numbers, but not feasible for larger ones. For a better method, check out this video tutorial on converting decimal to binary!
","
This video really helped me out, thanks!

Take any number and divide it in half repeatedly disregarding remainders along the way until you get to 1. Write each answer to the left of the previous answer. Under each answer you write 1 if the answer is odd and 0 if the answer is even.
Example:
Write 2019 in binary.

1   3   7   15    31    63    126    252   504   1009   2019  - Repeatedly half 2019 until you get to 1, 
                                                                disregard remainders
1   1   1    1     1     1      0      0     0      1      1  - Write 1 under odd answers, 0 under even.

Answer: 2019 in binary is 0b11111100011.


Fantastic, you should integrate Khan Academy in your maths section of CodeCademy. That would make your offering close to perfect.

Another good video with another method of converting a decimal number to Binary using 2-4-8-16-32-64-128 bits places





"
258,Can we round the mean to a specified number of decimal places?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, can we round the mean to a specified number of decimal places?
Answer
To round a single value to a number of decimal places, we can utilize the round() function in Python.
To use the round() function you can pass in a number to round, and an optional second value which is the number of decimal places. If you do not input a second value, then it will round to 0 decimal places by default.
Numpy provides a way to round every value in an array, through the np.round() function.
The np.round() function works similar to the round() function in Python, because you can input a specific number of decimal places to round each value in the array to.
Example
number = 1.234
print round(number, 2) # 1.23
print round(number) # 1.0

array = np.array([1.11, 2.22, 3.33, 4.44])
print np.round(array, 1)
# [1.1, 2.2, 3.3, 4.4]

",
259,Will an error always occur when trying to access a key that doesn't exist?,"FAQ,Python FAQ",q-a,1,"
Question
Will an error always be generated when trying to access a key which doesn’t exist in a dictionary?
Answer
Yes, an error will always be generated so care must be taken to check that the key exists OR exception handling must be used to handle an exception generated by the invalid key. If iterating over the keys in a dictionary provided by the keys() function, then it is safe to assume the key exists.
",
260,Are histograms related to bar charts?,"FAQ,Python FAQ",q-a,1,"
Question
Are histograms related to bar charts?
Answer
Although they appear somewhat similar, histograms and bar charts are different and serve specific purposes.
Histogram
Histograms are used for graphing a distribution of frequencies, for quantitative data.
Visually, all the bars are usually touching, with no space between them.
The bars represent the amount of values in the dataset that fall between each ‘bin’ or range of values. For example, each bin might show the number of people within certain age ranges (10-20, 20-30, …).
Bar chart
Bar charts are used to group data based on categories.
Visually, these are usually spaced apart.
Each bar represents how much of the data falls into a category. For example, a bar chart might show how many students there are per major in a university, where each major is a “category”.
",
261,How does the list comprehension in the example code work?,"FAQ,Python FAQ",q-a,2,"
Question
In the context of this exercise, how does this list comprehension in the example work?
[t*element + w*n for element in range(d)]
Answer
The list comprehension provided in the example code returns a list of x values for the bar locations in the graph.
There are 4 variables which will let us do this:
n determines which dataset it is currently for.
t determines the total number of datasets to graph side by side.
d tells us how many bars there are per dataset.
w tells us the width of each individual bar.
If we take the provided values for the first dataset China Data, we get
[2*element + 0.8*1 for element in range(7)]
This essentially means, for each element in range(7), construct a list where each element is
2*element + 0.8
This would give us this list of values,
[0.8, 2.8, 4.8, 6.8, 8.8, 10.8, 12.8]
If we change n to 2 for the second dataset US Data, it gives us the list
[1.6, 3.6, 5.6, 7.6, 9.6, 11.6, 13.6]
These x values will position each pair of bars for each set of data next to each other in a clear way.
","
Hello, i’ve been struggling to understand the logic behind this concept (hope i’m not the only one here) as I like to understand how the code works and not so much to remember or copy-paste the formula.
I tried to simplify the code hoping it could help me understand how it works and I think I’ve got it now. I will post it here hoping someone can give me feedback to check if i’m doing something wrong (and if i’m right to help those that struggle to understand like I did):
store1_x = [X*2 for X in range(6)]

plt.bar(store1_x, sales1)

# Here's the basic formula for the first set of bars (blue ones). 
# As I understand, you want a list from 0 to 5 ( range(6) ) because you need to plot 6 blue bars. 
# X is every element of that list, and it's being multiplied by 2 to separate the blue bars between each other to make room for the orange bars.


store2_x = [X*2 + 1 for X in range(6)]

plt.bar(store2_x, sales2)

# This is the code for the orange bars, it's the same as above, but adding 1. 
# This places the orange bar one space to the right of the preceding blue bar. 
# In the exercise this was originally 0.8, which places the blue and orange bars next to each other.
# A width of 0.8 is actually better to understand the data, but I changed it as it helped me to visualize how the code works.


So basically you’re creating two lists of positions:
[0, 2, 4, 6, 8, 10]
for the blue bars
and
[0+1, 2+1, 4+1, 6+1, 8+1, 10+1]
or
[1, 3, 5, 7, 9, 11]
for the orange bars
NOTE: I know this code positions the ticks in the X axis differently than the initial code, but I think this doesn’t matter when you’re working with string type labels (such as ‘months’, or in this case ‘drinks’) (?)
I hope someone can tell me if i’m understanding this correctly and help others that like to understand how their code works.
Cheers! 
"
262,"We learned how to add columns, but what if wanted to remove them?","FAQ,Python FAQ",q-a,3,"
Question
In the lesson, we learned how to add columns to a dataframe, but what if wanted to remove them?
Answer
In addition to being able to add columns, we have the ability to remove columns of a dataframe in Pandas.
There are a few ways you can go about removing columns from a dataframe:


Creating a new dataframe, and including just the columns you want to keep from the original dataframe. For example, if we only wanted to include these columns from a dataframe, it effectively “removes” all the other columns not included:
new_df = df[['col1', 'col4']]


You can utilize the built-in drop() method, to delete a specific column. In order to drop a column, we must specify axis=1. We can do so as follows:
df.drop('col3', axis=1, inplace=True)


To drop multiple columns at once, we can enter in multiple column names as a list using drop(), like so:
df.drop(['col3', 'col5'], axis=1, inplace=True)


","
I used the following code…can you please tell me what is wrong with that @jephos249

salutation = lambda row: 'Dear Mr. ’ + row[‘last_name’] if row == ‘male’ else 'Dear Ms. ’ + row[‘last_name’]


orders[‘salutation’] = orders.gender.apply(salutation)

Error it’s showing

string indices must be integers, not str


apply must indicate to which to apply: adding ""   , axis = 1 "" after salutation,
"
263,Can we use the Boolean operators or/and for combining Numpy logical statements?,"FAQ,Python FAQ",q-a,1,"
Question
Can we use the Boolean operators or/and to combine multiple logical statements in Numpy?
Answer
No, when using Numpy, the operators & (and) and | (or) must be used when combining multiple logical statements.
If we try to apply the operators and or or instead, it will result in a ValueError, because they are not applicable within the context of Numpy arrays and boolean statements.
At a deeper level, & is actually short for the bitwise_and() function, and | is short for the bitwise_or() function in Numpy. Both ways do the same thing, comparing two arrays and returning a list of True or False values.
Example
# | is short for bitwise_or()
(a > 5) | (a < 2)
np.bitwise_or((a > 5), (a < 2))

# & is short for bitwise_and()
(a > 5) & (a < 2)
np.bitwise_and((a > 5), (a < 2))

",
264,Does the character being replaced in .replace() have to be nonempty?,"FAQ,Python FAQ",,8,"
Question
In the context of this exercise, does the character being replaced in the .replace() method have to be nonempty?
Answer
No, the character being replaced in the .replace() method does not have to be a nonempty string, and can be the empty string ''.
When providing an empty string as the argument for the character to be replaced, this will essentially replace every part between characters in the string. One way you can look at this, is as though every nonempty character has two empty spaces around it, which can overlap with their adjacent characters.
Here is an example that might help to illustrate this more clearly
empty_string = ''
replaced = empty_string.replace('', '!!!')
print(replaced) # !!!

example_string = ""code""
result = example_string.replace('', '==')
print(result) # ==c==o==d==e==

","
Hello,
if in this example:



 jephos249:

example_string = “code” result = example_string.replace(’’, ‘==’)


instead of '' we used ' ' as a character to be replaced, what would happen? Would it give us some kind of error because we don’t have any whitespaces in our string (“code”)?
Thank you.

If in s.replace(old, new), old is not present in s, the function simply returns s.
s1 = 'abc'
s2 = s1.replace('b', 'x')
s3 = s1.replace('z', 'x')
print(s2)
print(s3)

# Output:
axc
abc


Consider,
>>> 'code'.replace('', ' ')
' c o d e '
>>> 

As we can see there is a preponderance of empty strings through the string, code so the method does what it knows how to do. It replaces every instance with a space.
It does not know how to replace something that is not there so it simply ignores it and does nothing.

How can I count empty spaces ‘’ in a string I’m trying something like this :
my = ""abcdef""

for i in my:
  if i == '':
    print(""yes"")

specially how replace method detect empty places  in given string




 css7713845194:

for i in my:


The for loop will only iterate over members of the sequence (characters). There are no characters in between. What replace does is not the same. It replaces all instances of nothing with a space (in the above). We would need to know the inner workings of the method to understand how it does this, but that is not important. We know that we can insert a character or characters between each character in a string.
We can demonstrate similar behavior with the str.join() method.
>>> ' '.join('abcdef')
'a b c d e f'
>>> 

The how of it is a bit of a mystery, but the logic makes sense.
Bottom line, use only code that we understand and can predict the behavior of so we know what to expect, and how to plan it.

.replace can take 3 arguments i.e,
word = ""Hello Hello Hello""
re = word.replace(""H"", ""J"", 2)

here 2 is the number of times you want the word or character to be replaced


You have just mentioned 2… just wanted to say that




 cloud5428235796:

can take 3 arguments


Which if anybody reads the documentation they will be quick to learn. However, it is moot if we want global replacement, which is the default when we do not specify a maximum count.
"
265,Where in my code do I make this new slice of new_word?,"FAQ,Python FAQ",q-a,28,"
Question
Where in my code do I make this new slice of new_word?
Answer
A common issue here is trying to replace what we already had for new_word, where we concatenated word, first, and pyg. For this exercise we should change new_word again, but by assigning a value over it using the existing version of itself. Take a look at the example below for a better idea:
my_word = first + middle + suffix
my_word = my_word[index_to_slice_goes_here]

Otherwise, we’d be writing new_word = new_word[...] without having defined new_word yet, which will give you an error that reads: NameError: ‘new_word’ is not defined because we’re trying to use it to define itself, which is invalid.
","
2 posts were split to a new topic: This Code Seems Counter-Intuitive

in the terminal for Pyglatin
i type Love
and it shows velay
how it’s executed

There is space between I love you so is.alpha doest not count the space so it would not execute so you could use or insted of and . Even you could add the ASCII code of the characters

Why can’t I declare the three variables we declared inside the if statement outside of it? What would happen?




 gleagbothenoob:

Why can’t I declare the three variables we declared inside the if statement outside of it? What would happen?


technically you could, but why would you? You only want to do these steps when the user input is valid (which the if condition is checking)

I don’t understand the concept of slicing. I will show you :
s = ‘Charlie’
print s[0]
print s[1:4]
When you print this it prints :
C
har
Why doesn’t it print
C
and then
harl
Because the 1 to 4 letters in Charlie are harl
Plz help 

Review how slicing works: given str[x:y], x is the index of the first character of the slice, and y is one greater than the final index of the slice
That way str[x:len(str)] will work the way you want.

the exercise is
“Set new_word equal to the slice from the 1st index all the way to the end of new_word . Use [1:len(new_word)] to do this.”
the 1st index is 0 so how it became a 1 ?? the instruction should be reworded to be “… Use '[0:len(new_word)]…” OR mention “…2nd index…” instead of “…1st index…”.




 bad.banana:

the 1st index is 0 so how it became a 1 ?


the 1st index is the 1st index, if it says first letter, then yes, the index would have been zero

i disagree.
the first index of any array is always zero. for example, the array array1 = (1, 2, 3, 4) what is the value of the first index? starting from zero, the value of the first index is “1”.

well, given counting is from zero, the 0st index would be the first element, the 1st index is the second element.

LOL.
no such thing as 0st index.
All arrays have 0 as the index of their first element which is also called the base index and the last index of an array will be total size of the array minus 1
in the problem description, if what is indended is the second member of the array then it should have been referred to as the second element.




 bad.banana:

in the problem description, if what is indended is the second member of the array then it should have been referred to as the second element .


but second element is at index position 1, aka the 1st index. You have to bridge a gap here, that human counting starts at 1 while indexes start counting at 0.
we can endless argue about this, but it doesn’t matter. You need to understand what the exercise asks of you, and how to achieve this.

Just wanted to point out that the instructions for for step 10 are a little unclear. Not only is it tricky that we need to create a new variable, but we also have to omit the print statement. No way I would have been able to figure that out without peaking at the solution. It would be nice if the instructions were more thorough! I prefer not to look at the solutions, but you leave me no choice! 

You can always come to the forum to ask your question? Then we can help you in steps, then you don’t have to peak at the solution 

I keep getting a syntax error when slicing, with the syntax error pointing to the colon:
if len(original) > 0 and original.isalpha():
word = original.lower()
first = word[0]
new_word = [1:len(word)] + first + pyg
print new_word
else:
print ‘empty’

File “python”, line 8
new_word = [1:len(word)] + first + pyg
SyntaxError: invalid syntax

EDIT: nevermind, I realized I wasn’t calling the variable before the slice. Corrected by changing to:
new_word = word[1:len(word)] + first + pyg

how does this work ‘Set  new_word  equal to the slice from the 1st index all the way to the end of  new_word . Use  [1:len(new_word)]  to do this.’, when the new_word is just being created and also it includes + first + pyg before the it is know how many letters it will have?

len() will count the number of characters which are currently in the string. The addition to the string has already occurred, so will be included in the count.

thank you for the clarification. But it feels counter-intuitive
"
266,What happens if we try to access an invalid index of a string?,"FAQ,Python FAQ",q-a,1,"
Question
In Python, what happens if we try to access an invalid index of a string?
Answer
If we try to access an index of a string that’s not a valid index, then the IndexError will be thrown. This will also apply when using negative indices, as it will try to access an index starting from the final index moving left.
Example
string = ""Hello""

# These will both give an IndexError
print(string[5])
print(string[-6])

",
267,Can print be used on more than just strings?,"FAQ,Python FAQ","python-syntax,q-a",4,"
is print() function always used for printing a string, or we can print other data types without converting  them to the string form
","
print() will print anything that you ask it to.  You do not need to convert to string; the print() function  does that (as well as it can). You may need to do some formatting to make the output useful, attractive, or both.
a = 'abc&xyz'  # string
b = 3.16  #float
c = {2:'a', 3:'b'}  # dictionary
d = 6 < 2  # boolean
e = [1,2,3,4,5] # list
f = sum(e)  # value returned from a function
g = sum # a function

for obj in [a,b,c,d,e,f,g]:
    print(obj)


Output:
abc&xyz
3.16
{2: 'a', 3: 'b'}
False
[1, 2, 3, 4, 5]
15
<built-in function sum>


what does “< built-in function sum >” mean? I had to add spaces to get that to print.  Did the comment box just not print something?

It means that Python found that sum is a function built into the program. If you do the example, replacing sum by any of the functions listed here https://docs.python.org/3/library/functions.html . You should get the same result
"
268,What is an exception?,"FAQ,Python FAQ",q-a,10,"
Question
This exercise mentions an exception, what is that?
Answer
If something is an error, it should not be handled by your program in a way that allows the user to continue using the program, as it can cause unexpected behavior and issues. They should be fixed!
An exception, on the other hand, is something that you might want to allow your program to handle. Later you’ll come across something called catching exceptions, and that’s what this means. Exceptions typically don’t cause your program to behave in unexpected ways if they occur, so long as you handle them properly.
","
Hi, i still cant not fully understand the concept of exceptions. can i get a more simpler explanation? thanks

For example:
get_user_input = raw_input(""enter an integer: "")
trying_convert = int(get_user_input)

we ask the user for a integer by prompting for input with raw_input. But raw_input stores the result as string, so we need to convert to integer.
If the users enters 5, converting to integer goes fine. But if the enters hello, python will raise an error, given this can’t be converted to integer
The error raised by python will exit the program
If we then want to give the user another chance of entering input, we will first need to make an exception for the error so our program can continue running

another change, or another chance?

So in other words, an exception is just  something to allow someone to still run the program after an error? I.e. incorrect password try again? I understand it may not be exactly like that, but that was the closest analogy I could think of.




 canseeno:

So in other words, an exception is just something to allow someone to still run the program after an error?


errors produces by python, like a ValueError (like in my earlier example) or a NameError.
lets say you have this code:
print x

you will get a NameError (x isn’t defined). This we could prevent by making exception:
try:
   print x
   # except keyword which allows us to create an exception
   # then the exception we expect, in this case a NameError
except NameError:
  print ""x is not defined""




 canseeno:

I.e. incorrect password try again?


no, that would be more something like:
# not secure, don't use this anywhere important
# it just serves as an example

# give the user 3 attempts to enter there password
for i in range(3):
    password = raw_input(""enter your password: "")
    # check length of password
    if len(password) > 7:
        print ""valid password""
        break
else:
    # 3 incorrect passwords where entered. 
   # because i use for/else, the else clause only runs
   # when loop condition becomes false
   # not when the loop breaks
   print ""invalid password""


So password validation is not a python exception, a password validation is just code we write, and then print a message to user.

I think it’s something like this:
often you can drive your car with the brake lightly on. it is bad for the car, it will probably break or wear out the brakes, you won’t be able to get up to speed, but you can often make the car move even with the brake on. So that would be an exception.
if there is no fuel in the tank your car won’t be able to drive your car at all. so that would be an error.

I guess so because that it is a very legit example and then  it  would classify as an exception given your statement.

I think we used to call this an ‘error trap’ - is that the same thing?

The trapping then seems done by try except:
https://www.bbc.co.uk/bitesize/guides/zgkhw6f/revision/4
"
269,Can the result of a modulo operation be larger than the divisor?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, can the result of a modulo operation be larger than the divisor?
Answer
No, the result of a modulo operation can never be larger than the divisor, assuming all positive values being used in the operation. If the division is done correctly, then the divisor was fitted into the dividend as many times as possible. If the remainder is larger than the divisor, then this means the divisor could still be fitted into the dividend, so that means the division was not done correctly.
Explanation
""""""
Take for example
10 % 3

Dividend: 10
Divisor: 3

We divide the divisor into the dividend as many times as possible, 
until we cannot fit it into the dividend any more.
10 >= 3 * 1
10 >= 3 * 2
10 >= 3 * 3
10 < 3 * 4 # Stop at the previous.

We stop at 3 * 3 because the 3 * 4 does not fit into 10 anymore. 

We then take the remainder of this,
10 – 3 * 3 = 1

Therefore the remainder is 1, which is less than the divisor, 3.
""""""

The only way that the remainder would be greater than the divisor would be if we stopped at 3 * 2 or earlier, which would have been incorrect.
",
270,Is there an ideal bin width for histograms?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, is there an ideal bin width for histograms?
Answer
In regards to bin widths, there is no “one size fits all” solution to picking a perfect bin width for any dataset. It is highly dependent on the data and how you choose the range of values per bin.
Ideally, your bin widths will be able to give a meaningful representation of your data. One example is if your data is for age ranges of a poll, the bins might be 10 wide (10-20, 20-30, …), which can make a lot of sense.
Choosing too few or too many bins can take away from one’s understanding of the data.
Choosing too few bins will result in an inaccurate representation of the distribution. For example, if we only had 2 bins for the entire graph, we might end up with bars that don’t tell us much. For example, it would be like choosing age ranges of 10-50 and 50-90.
Choosing too many bins can end up giving us many empty spaces and cause the bar to not appear smooth. This is like choosing age ranges of 10-12, 12-14, 14-16, …, 88-90, which is probably not be necessary.
There do exist complex formulas that can be used to get a more precise bin size for a dataset, such as Sturge’s formula, Doane’s formula, or the Freedman-Diaconis rule, but these are beyond the scope of the course.
",
271,Can we stack more than 2 bars in a bar chart?,"FAQ,Python FAQ",,4,"
Question
In the context of this exercise, can we stack more than 2 bars on top of each other?
Answer
Yes, you can absolutely stack more than 2 bars on a bar chart.
In order to do this, the bottom of each subsequent set of bars should equal the total heights of the bars below them.
Example
# Given the follow y values for 3 groups of data
group1 = [1, 1, 1, 1]
group2 = [2, 2, 2, 2]
group3 = [3, 3, 3, 3]

x = [0, 1, 2, 3] # x positions

# First layer of bars
plt.bar(x, group1)

# Second layer of bars
plt.bar(x, group2, bottom=group1)

# Adding a third layer of bars.
# Calculate the bottom height of the third layer
# by adding together all lower layer heights.
bottom_of_3 = [1+2, 1+2, 1+2, 1+2] # [3, 3, 3, 3]

# Third layer of bars
plt.bar(x, group3, bottom=bottom_of_3)

","
You can also add up those numbers using numpy arrays - helpful when dealing with large lists of data:
import numpy as np # importing numpy
from matplotlib import pyplot as plt

sales1 =  [91, 76, 56, 66, 52, 27]
sales2 = [65, 82, 36, 68, 38, 40]
sales3 = [32, 35, 55, 95, 23, 2] # I just made these numbers up

plt.bar(range(len(sales1)), sales1, label=""Location 1"")
plt.bar(range(len(sales2)), sales2, bottom=sales1, label=""Location 2"")

# Creating a variable that contains an array of values 
# equal to sales1 + sales2 at each index
bottom_of_3 = np.array(sales1) + np.array(sales2)

# Creating third layer of bars using the new variable
plt.bar(range(len(sales3)), sales3, bottom=bottom_of_3, label=""Location 3"")

*Note that the use of numpy for stacked bar charts comes up in a later lesson. Thanks Codecademy 




 jephos249:

bottom_of_3 = [1+2, 1+2, 1+2, 1+2]


We can even use list comprehensions for the same.
sales1 =  [91, 76, 56, 66, 52, 27]
sales2 = [65, 82, 36, 68, 38, 40]
sales = [25,32, 37, 35, 55, 23] # I just made these numbers up

plt.bar(range(len(sales1)), sales1, label=""Location 1"")
plt.bar(range(len(sales2)), sales2, bottom=sales1, label=""Location 2"")

# Creating a variable that contains an array of values equal to sales1 + sales2 at each index

bottom_3 = [sales1[i] + sales2[i] for i in range(len(sales1))]
plt.bar(range(len(sales)), sales, bottom = bottom_3, label = ""Location 3"")
plt.show()

Hope this helps 

I think zip is useful here.
bottom_3 = [v1 + v2 for (v1, v2) in zip(sales1, sales2)]

"
272,"When plotting multiple lines in Matplotlib, does each need to have the same number of x and y values?","FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, when plotting multiple lines in Matplotlib, does each line need to have the same number of x and y values?
Answer
No, when you are plotting multiple lines, they do not need to have the same amount of x and y values, nor do they need to share the same x values.
When you plot multiple lines, it is as though each line is plotted separately onto the same graph.
For example, the following code will draw two lines on a single plot. The first line will be drawn on the x coordinates 0 to 4, while the second line will be drawn over the x coordinates 5 to 8. The second line will also have one less value than the first line.
Example
x1 = [0, 1, 2, 3, 4]
x2 = [5, 6, 7, 8]

y1 = [100, 200, 300, 400, 500]
y2 = [100, 200, 300, 400]

plt.plot(x1, y1)
plt.plot(x2, y2)

plt.show()

",
273,Will an error always occur when trying to access a key that doesn't exist?,"FAQ,Python FAQ",q-a,1,"
Question
Will an error always be generated when trying to access a key which doesn’t exist in a dictionary?
Answer
Yes, an error will always be generated so care must be taken to check that the key exists OR exception handling must be used to handle an exception generated by the invalid key. If iterating over the keys in a dictionary provided by the keys() function, then it is safe to assume the key exists.
",
274,Why did nothing print to the screen when I pressed Run?,"FAQ,Python FAQ",,27,"
Question
Why did nothing print to the screen when I pressed Run?
Answer
To see your results be sure to call your compute_bill() function in a print statement and pass it the shopping_list list variable as an argument. Like this: print compute_bill(shopping_list).
","
How do we compute for the different number of fruits that we want the compute_ bill function to perform. Currently it is returning the answer 5.5 for the parameter (shopping _list) as it is considering only a single amount for each fruit. When I try to convert (shopping_list) to a dictionary and add different values for the keys(fruits), it returns the same value 5.5 ?

shopping_list represents a list of products the customer wants to buy. The customer can’t determine the price, the prices are fetched from prices dictionary. So if  prices of products need to change, prices needs to be changed
we can pass different lists to compute_bill, which represents customers. for example:
print compute_bill([""banana"", ""orange"", ""apple"", ""banana"", ""orange"", ""apple""])


Thank you for the reply. Besides the method that you have given above, what would be the other methods, if we were to calculate the total bill for the various quantities of each fruit that the customer would buy ?

at the moment, nothing. We need to provide the fruit multiple times as string, or modify the code.

what you could also do, would be adding a third dictionary saying the quantity you want and then setting the total to be price * quantity, but in this case you are modifying the code.




 wiki-bot:

print compute_bill(shopping_list


shopping_list = [""banana"", ""orange"", ""apple""]

stock = {
  ""banana"": 6,
  ""apple"": 0,
  ""orange"": 32,
  ""pear"": 15
}
    
prices = {
  ""banana"": 4,
  ""apple"": 2,
  ""orange"": 1.5,
  ""pear"": 3
}

# Write your code below!
def compute_bill(shopping_list):
    total = 0
    for item in shopping_list:
        if stock[item]>0:
            total += prices[item]
            stock[item] -= 1
    return total
    print compute_bill(shopping_list)

i was able to pass the page, but still nothing printed on the screen

Did you ever call the function compute_bill()?




 tstone6:

print compute_bill(shopping_list)


the last line of my code is “print compute_bill(shopping_list)” if that’s what you are asking.

Well, looking at the lesson, page 12 wants only the function, not the calling statement; your function passes with the calling statement commented out. Then, page 13 ( the final page) does ask for the calling statement, which does print to the screen, as expected.


shopping_list = [“banana”, “banana”, “orange”, “apple”, “pear”]
…
print(compute_bill(shopping_list))
print(stock)
returns =>
14.5
{‘orange’: 31, ‘pear’: 14, ‘banana’: 4, ‘apple’: 10} #stock after the purchase.

File “python”, line 25
print compute_bill(shopping list)
^
SyntaxError: invalid syntax
I got this error trying to ‘print total’ and:
shopping_list = [“banana”, “orange”, “apple”]
stock = {
“banana”: 6,
“apple”: 0,
“orange”: 32,
“pear”: 15
}
prices = {
“banana”: 4,
“apple”: 2,
“orange”: 1.5,
“pear”: 3
}
Write your code below!
def compute_bill(food):
total = 0
for item in food:
if stock[item] > 0:
total += prices[item]
stock[item] -= 1
return total
print compute_bill(shopping list)

You omitted an underscore.

Shopping_list? 
I was so close. Thanks 

Ok so stupid question but how does the function know to fetch the shopping_list list? and index it against the prices and stock? You define a function to compute the bill and run a for loop on items in “food” but how does Python know that “food” is the shopping list and compare it to the dictionaries?

image.png522×620 29.4 KB


at line 25, you call the function, where you provide an argument (shopping_list) for the parameter (food)
the nice thing about this, is that we can call the function multiple times with different shopping lists, representing different customers buying different things

Okay, that makes sense, I think I was just looking at it to linearly (again like I said, stupid question). Also, when the print function isn’t there it doesn’t throw and error, the code isn’t wrong its just not being called.
Thank you




 method2830872491:

how does Python know that “food” is the shopping list


That list is suppied as the argument to the compute_bill() function. As to the dictionaries, they are hard-coded into the function.

Mine wont connect. Or print anything and i did what they said to do.

Please see this topic:
How to ask good questions (and get good answers)
Won’t connect to what? The codecademy workspace? Could you make a screenshot of this? Along with the other things mentioned in the topic
"
275,Can we change the colors of a pie chart?,"FAQ,Python FAQ",q-a,2,"
Question
In the context of this exercise, can we change the colors of a pie chart?
Answer
Yes, you can set specific colors for a pie chart using the colors parameter.
To set specific colors for a pie chart, you can pass in a list of color values. If there are more wedges than the number of colors, the wedges will cycle through the list of colors.
Example
plt.pie(data, colors=[""red"", ""orange"", ""yellow"", ""green""])

","
Thankyou so can we also change the color of the bars…
"
276,Why does it ask me not to use compute_bill?,"FAQ,Python FAQ",,27,"
Question
Why does it ask me not to use compute_bill?
Answer
If you think you’ve coded your function properly and are receiving an error message along the lines of stock doesn't look quite right! Make sure to not call compute_bill since it changes the stock!, this is because in this step we aren’t using the function after writing it, we’re just writing the function.
Try deleting where you used the function and then Run your code again.
It’s great to want to test your code! However, Codecademy runs tests to check your code that depend on the values being the original values, and running the function in your code in this step changes those values. You’ll be able to use it in the very next step!
","
Could you say me where is my problem
shopping_list = [""banana"", ""orange"", ""apple""]

stock = {
  ""banana"": 6,
  ""apple"": 0,
  ""orange"": 32,
  ""pear"": 15
}
    
prices = {
  ""banana"": 4,
  ""apple"": 2,
  ""orange"": 1.5,
  ""pear"": 3
}

      # Write your code below!
def compute_bill(food):
  total = 0
  for item in food:
    if not stock[item] <= 0:
      total += prices[item]
      
    else:
      print ((""Stock has no %s"") % item)
  stock[item] -= 1
  return total

print (compute_bill(shopping_list))


i would be possible to buy 9 bananas:
shopping_list = [""banana"", ""orange"", ""apple""]

stock = {
  ""banana"": 6,
  ""apple"": 0,
  ""orange"": 32,
  ""pear"": 15
}
    
prices = {
  ""banana"": 4,
  ""apple"": 2,
  ""orange"": 1.5,
  ""pear"": 3
}

      # Write your code below!
def compute_bill(food):
  total = 0
  for item in food:
    if not stock[item] <= 0:
      total += prices[item]
      
    else:
      print ((""Stock has no %s"") % item)
  stock[item] -= 1
  return total

print (compute_bill(['banana'] * 9))

while there are only 6 bananas in stock

Guys! Where is the key to solve the exercise?

i told you, if i attempt to buy 9 bananas, i can. Which shouldn’t be possible, because there are only 6 bananas in stock.

Hi,
I’m not sure if this solves your problem, but try indent the stock[item] -= 1 more.
It seems to me that currently it sits on the same level as the ‘for loop’ (i.e under the main function level) but it should be under the ‘for loop’ since we need to do that subtraction in each loop.
I hope this helps
cheers,
D.

Close, (s)he should only decrease stock when the item isn’t in stock, so it should be nested inside the if clause

I guess you wanted to write …the item is in stock…
anyway, it is strange because that’s what I thought at first but putting that line inside the if clause caused an indent error. So I went ahead and tried other indents. And strangely only the above mentioned (by me) worked.
today I went back and tried your suggestion again, and it worked now. pretty odd.
maybe it has something to do with tab vs space indentation?




 dborbas:

maybe it has something to do with tab vs space indentation?


the indent settings within the codecademy editor are not ideal.

A post was split to a new topic: A Day at the Supermarket: Why is this wrong?

You need to put stock[item] -= 1 in the if not statement you have it in the else statement.

I’ve been experiencing many IndentationError messages (in this as well as previous exercises) despite my code being identical to the solution and Codecademy wouldn’t allow me to move on unless I went for the Solution. I even tried deleting the indents of the error Line and reintroducing them in a consistent manner, but it still wouldn’t accept my code. Is there another solution? Do I need to delete all indents of every line and consistently reintroduce them line by line for my code to be recognized?
My code:

3e6a942022e9f7ca71d9883acf6206185afe6726.png3222×1804 627 KB

Solution code:

Codecademy-noerror.png3248×1820 553 KB


codecademy’s editor sucks when it comes to indent. I would re-indent the code in your own local editor, if you haven’t set this up, you could use sites like repl.it

Ok, thanks for the suggestion, I’ll try that next time.

Any idea what I’m doing wrong?

image.png625×853 49.8 KB


The dictionary value is not updated when you just minus 1 from the value, you then need to also set the dictionary value to the value minus 1.
stock[item] = stock[item] - 1

This was exactly the problem. Thank you!

The problem for me was the stock[item] = -1 did not work. I needed to make it stock[item -= 1

why am I getting errors with this code?
def compute_bill(food):
  total = 0
  for items in food:
    if stock[items] > 0:
      total += prices[items]
      stock[items] -= 1
  return total
print compute_bill(shopping_list)


That is literally what this FAQ answers:



 wiki-bot:

Question
Why does it ask me not to use compute_bill?
Answer
If you think you’ve coded your function properly and are receiving an error message along the lines of stock doesn't look quite right! Make sure to not call compute_bill since it changes the stock! , this is because in this step we aren’t using the function after writing it, we’re just writing the function.
Try deleting where you used the function and then Run your code again.
It’s great to want to test your code! However, Codecademy runs tests to check your code that depend on the values being the original values, and running the function in your code in this step changes those values. You’ll be able to use it in the very next step!


"
277,How does the list comprehension in the example code work?,"FAQ,Python FAQ",q-a,2,"
Question
In the context of this exercise, how does this list comprehension in the example work?
[t*element + w*n for element in range(d)]
Answer
The list comprehension provided in the example code returns a list of x values for the bar locations in the graph.
There are 4 variables which will let us do this:
n determines which dataset it is currently for.
t determines the total number of datasets to graph side by side.
d tells us how many bars there are per dataset.
w tells us the width of each individual bar.
If we take the provided values for the first dataset China Data, we get
[2*element + 0.8*1 for element in range(7)]
This essentially means, for each element in range(7), construct a list where each element is
2*element + 0.8
This would give us this list of values,
[0.8, 2.8, 4.8, 6.8, 8.8, 10.8, 12.8]
If we change n to 2 for the second dataset US Data, it gives us the list
[1.6, 3.6, 5.6, 7.6, 9.6, 11.6, 13.6]
These x values will position each pair of bars for each set of data next to each other in a clear way.
","
Hello, i’ve been struggling to understand the logic behind this concept (hope i’m not the only one here) as I like to understand how the code works and not so much to remember or copy-paste the formula.
I tried to simplify the code hoping it could help me understand how it works and I think I’ve got it now. I will post it here hoping someone can give me feedback to check if i’m doing something wrong (and if i’m right to help those that struggle to understand like I did):
store1_x = [X*2 for X in range(6)]

plt.bar(store1_x, sales1)

# Here's the basic formula for the first set of bars (blue ones). 
# As I understand, you want a list from 0 to 5 ( range(6) ) because you need to plot 6 blue bars. 
# X is every element of that list, and it's being multiplied by 2 to separate the blue bars between each other to make room for the orange bars.


store2_x = [X*2 + 1 for X in range(6)]

plt.bar(store2_x, sales2)

# This is the code for the orange bars, it's the same as above, but adding 1. 
# This places the orange bar one space to the right of the preceding blue bar. 
# In the exercise this was originally 0.8, which places the blue and orange bars next to each other.
# A width of 0.8 is actually better to understand the data, but I changed it as it helped me to visualize how the code works.


So basically you’re creating two lists of positions:
[0, 2, 4, 6, 8, 10]
for the blue bars
and
[0+1, 2+1, 4+1, 6+1, 8+1, 10+1]
or
[1, 3, 5, 7, 9, 11]
for the orange bars
NOTE: I know this code positions the ticks in the X axis differently than the initial code, but I think this doesn’t matter when you’re working with string type labels (such as ‘months’, or in this case ‘drinks’) (?)
I hope someone can tell me if i’m understanding this correctly and help others that like to understand how their code works.
Cheers! 
"
278,What happens if we try to access an invalid index of a string?,"FAQ,Python FAQ",q-a,1,"
Question
In Python, what happens if we try to access an invalid index of a string?
Answer
If we try to access an index of a string that’s not a valid index, then the IndexError will be thrown. This will also apply when using negative indices, as it will try to access an index starting from the final index moving left.
Example
string = ""Hello""

# These will both give an IndexError
print(string[5])
print(string[-6])

",
279,Can the result of a modulo operation be larger than the divisor?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, can the result of a modulo operation be larger than the divisor?
Answer
No, the result of a modulo operation can never be larger than the divisor, assuming all positive values being used in the operation. If the division is done correctly, then the divisor was fitted into the dividend as many times as possible. If the remainder is larger than the divisor, then this means the divisor could still be fitted into the dividend, so that means the division was not done correctly.
Explanation
""""""
Take for example
10 % 3

Dividend: 10
Divisor: 3

We divide the divisor into the dividend as many times as possible, 
until we cannot fit it into the dividend any more.
10 >= 3 * 1
10 >= 3 * 2
10 >= 3 * 3
10 < 3 * 4 # Stop at the previous.

We stop at 3 * 3 because the 3 * 4 does not fit into 10 anymore. 

We then take the remainder of this,
10 – 3 * 3 = 1

Therefore the remainder is 1, which is less than the divisor, 3.
""""""

The only way that the remainder would be greater than the divisor would be if we stopped at 3 * 2 or earlier, which would have been incorrect.
",
280,What happens to the x-tick labels if the text becomes long?,"FAQ,Python FAQ",q-a,1,"
Question
On a bar chart, what happens to the x-tick labels if the text becomes long?
Answer
When x-tick label strings become too long, you will not get any error messages. However, the label text will start to overlap with the other label text, which can make them hard to read.
To prevent the issue of labels overlapping, you might utilize the rotation parameter, which will rotate the text for each label. By rotating the text, the text is no longer stuck stretching out horizontally but will stretch out on an angle, which will prevent overlap with the other labels.
Another way to prevent the issue of overlap is by avoiding it entirely. This can be done by choosing label text lengths that are not too long. You might do this by abbreviating terms.
Having label text that is easy to read is important so that other people will also be able to read and understand the information displayed on your graphs.
",
281,Can we use the Boolean operators or/and for combining Numpy logical statements?,"FAQ,Python FAQ",q-a,1,"
Question
Can we use the Boolean operators or/and to combine multiple logical statements in Numpy?
Answer
No, when using Numpy, the operators & (and) and | (or) must be used when combining multiple logical statements.
If we try to apply the operators and or or instead, it will result in a ValueError, because they are not applicable within the context of Numpy arrays and boolean statements.
At a deeper level, & is actually short for the bitwise_and() function, and | is short for the bitwise_or() function in Numpy. Both ways do the same thing, comparing two arrays and returning a list of True or False values.
Example
# | is short for bitwise_or()
(a > 5) | (a < 2)
np.bitwise_or((a > 5), (a < 2))

# & is short for bitwise_and()
(a > 5) & (a < 2)
np.bitwise_and((a > 5), (a < 2))

",
282,Can we round the mean to a specified number of decimal places?,"FAQ,Python FAQ",q-a,1,"
Question
In the context of this exercise, can we round the mean to a specified number of decimal places?
Answer
To round a single value to a number of decimal places, we can utilize the round() function in Python.
To use the round() function you can pass in a number to round, and an optional second value which is the number of decimal places. If you do not input a second value, then it will round to 0 decimal places by default.
Numpy provides a way to round every value in an array, through the np.round() function.
The np.round() function works similar to the round() function in Python, because you can input a specific number of decimal places to round each value in the array to.
Example
number = 1.234
print round(number, 2) # 1.23
print round(number) # 1.0

array = np.array([1.11, 2.22, 3.33, 4.44])
print np.round(array, 1)
# [1.1, 2.2, 3.3, 4.4]

",
283,When should I create a dataframe using a dictionary or a list?,"FAQ,Python FAQ",q-a,4,"
Question
When should I create a Pandas dataframe using a dictionary or a list?
Answer
You can create Pandas dataframes using either a dictionary or a list of lists, but depending on several factors, using one can be preferred over the other.
Using dictionaries can be much faster, since you can just include the column names as the keys, and include the values of the column as a list for the keys. However, a disadvantage of using a dictionary is that the columns will not preserve the order that you entered them, and will default to alphabetical ordering instead. This is important to keep in mind especially if the column order is important.
Using a list of lists allows you to enter each row of data one at a time as a  separate list, but it may take longer than using a dictionary, since column names must be added as a separate list after the rows are added. However, a list of lists allows you to order the column names specifically, which can be very important.
","
Thanks! Is there a way to use dictionaries and order the columns afterwards?



stackoverflow.com






How to change the order of DataFrame columns?


python, pandas, dataframe


  asked by
  
  
    Timmie
  
  on 10:22PM - 30 Oct 12 UTC






Basically create a reordered list including all the column names and then use the list as an index when creating a copy of your df.
also this: Can we select columns of a dataframe in any order?

I was just thinking that…it’s so easy and saves time as you people have already pasted the links at the bottom of the exercises. Codecademy is the best…there’s no doubt about that. You are amazing @jephos249.
"
284,"We learned how to add columns, but what if wanted to remove them?","FAQ,Python FAQ",q-a,3,"
Question
In the lesson, we learned how to add columns to a dataframe, but what if wanted to remove them?
Answer
In addition to being able to add columns, we have the ability to remove columns of a dataframe in Pandas.
There are a few ways you can go about removing columns from a dataframe:


Creating a new dataframe, and including just the columns you want to keep from the original dataframe. For example, if we only wanted to include these columns from a dataframe, it effectively “removes” all the other columns not included:
new_df = df[['col1', 'col4']]


You can utilize the built-in drop() method, to delete a specific column. In order to drop a column, we must specify axis=1. We can do so as follows:
df.drop('col3', axis=1, inplace=True)


To drop multiple columns at once, we can enter in multiple column names as a list using drop(), like so:
df.drop(['col3', 'col5'], axis=1, inplace=True)


","
I used the following code…can you please tell me what is wrong with that @jephos249

salutation = lambda row: 'Dear Mr. ’ + row[‘last_name’] if row == ‘male’ else 'Dear Ms. ’ + row[‘last_name’]


orders[‘salutation’] = orders.gender.apply(salutation)

Error it’s showing

string indices must be integers, not str


apply must indicate to which to apply: adding ""   , axis = 1 "" after salutation,
"
285,Are histograms related to bar charts?,"FAQ,Python FAQ",q-a,1,"
Question
Are histograms related to bar charts?
Answer
Although they appear somewhat similar, histograms and bar charts are different and serve specific purposes.
Histogram
Histograms are used for graphing a distribution of frequencies, for quantitative data.
Visually, all the bars are usually touching, with no space between them.
The bars represent the amount of values in the dataset that fall between each ‘bin’ or range of values. For example, each bin might show the number of people within certain age ranges (10-20, 20-30, …).
Bar chart
Bar charts are used to group data based on categories.
Visually, these are usually spaced apart.
Each bar represents how much of the data falls into a category. For example, a bar chart might show how many students there are per major in a university, where each major is a “category”.
",
286,Why do we not pass anything for self?,"FAQ,Python FAQ",q-a,1,"
Question
Why do we not pass anything for self?
Answer
Python knows that the __init__() method’s first parameter, typically called self, is assigned to the object you create when you initialize it. That way you can use self throughout your class to accomplish things with that particular object!
If you do pass something for self when initializing an object, you’ll get an error about the number of arguments provided and the number of arguments expected. This is because whatever you pass starts by giving value to the second, third, fourth, and so on, parameters.
In our Animal example, we have 4 parameters total: self, name, age, is_hungry. However, if we try to pass it 4 arguments when we call it, we’re actually passing it 5, because it automatically passes self!
",
287,FAQ Hint: Be aware of nesting iteratives and loops,"FAQ,Python FAQ",,15,"
Concept
As per this lesson, you may find yourself wanting to combine loops like for and while. However in doing so, it is important to understand how they will interact when nested.
Mechanics
There are a few key issues that I have seen pop up regularly in questions:
The first if you have two for loops, the inner for loop will run completely for each step in the outer for loop. Example:
list1 = [1,2,3]
list2 = ['a', 'b', 'c']
for n in list1:
  for L in list2:
    print(str(n) + L)
#output: 1a, 1b, 1c, 2a, 2b, 2c, 3a, 3b, 3c

As you can see, it cycles through all of the second loop before moving on to #2 in the first loop. This also demonstrates that a variable used in the outer loop can be used in the inner loop. Variables from the inner loop can be used in the outer loop but only after being defined (this could be useful if you were creating a list for example).
On the other hand, an outer while will not be checked during the running of an inner loop.
i = 0
while i < 2:
  for n in range(0,6):
    i = n
    print(i)
#output: 0, 1, 2, 3, 4, 5

As you can see, the inner for loop will run to completion ignoring the while loop even though you may have expected it to stop once i was 2.
These are just a couple examples that will hopefully help solve issues with your own code. Please discuss below and help each other to further solve challenges that arise.
","
@catower, great comments!.
It’s also well to note that (unlike in some other languages) you can’t adjust the value of the iteration variable from within a for loop, as you can from within a while loop.
for i in range(0,3):
    print(i)
    i = i + 10
    print(i)

Output:
0
10
1
11
2
12

Here, at least within the loop, range() keeps an iron grip on the value of i.




 patrickd314:

It’s also well to note that (unlike in some other languages) you can’t adjust the value of the iteration variable from within a for loop, as you can from within a while loop.


Indeed. 
This is because the for implementation in Python leverages an internal counter to track which item from the iterable sequence comes next, and overwrites your target variable (i in your example) with that value each iteration until it reaches the end of the iterator.
This is why you get odd behaviour in some cases, for example if you remove items from a list while iterating over it.

So I completely misinterpreted the question and thought I was supposed to delete all the elements which are even numbered, and it sent me down a rabbit whole for a few days. I feel like the more I progress, the more the questions become more obtuse.
Anyway, I would like to share all my failures in order to help those who come after. Ultimately, I don’t think I solved it the way CA intended it to be solved. But hey, it works
#Write your function here
def delete_starting_evens(lst):
  index = 0
  for element in range(len(lst)):    
    if lst[element] % 2 == 0:
      index += 1
    else:
      break
  del lst[:index]
  return lst
  
      

""""""def delete_starting_evens(lst):
  index = -1
  while index >= 0:
    for element in range(len(lst)):
      print(lst)
      if lst[element] % 2 == 0:
        del lst[element]        
      index +=1
    return lst""""""

""""""def delete_starting_evens(lst):
  index = -1
  for element in range(len(lst)):
    #print(lst[element])   
    if lst[element] % 2 == 0:
      #print(lst[element])
      index += 1
      #print(index)
  print(index)
  print(lst[:index])
  del lst[:index]
  return lst""""""
      
      
""""""
  element += 1
  del lst[:element]
  return lst""""""


""""""def delete_starting_evens(lst):
  for element in range(len(lst)):
    if lst[element] % 2 == 0:
      print(lst[element])
      continue
    else:      
      return lst""""""

""""""def delete_starting_evens(lst):
  while lst:
    for element in range(len(lst)):
      if lst[element] % 2 == 0:
        del lst[element]
      else:
        break
  return lst""""""

""""""def delete_starting_evens(lst):
  for element in reversed(range(len(lst))):
    if lst[element] % 2 == 0:
      del lst[element]
      # print(lst[element])
  return lst""""""

#Uncomment the lines below when your function is done
print(delete_starting_evens([4, 8, 10, 11, 12, 15]))
print(delete_starting_evens([4, 8, 10]))









The word “delete” is a bit misleading.
Generally a function or method should either modify something, or return a new something. Not both. If it does both then the user might use one but not account for the other, and it’s pretty weird to present the result in two ways when there is only one result.
Unless the intention is specifically to modify an existing value, then you’ll want to create a new value and leave the input unchanged.
So the spirit of the function then is to create a list that is a copy of the original, but without leading even values.
Your function is easily amended by changing this:
  del lst[:index]
  return lst

To not modify the original, and instead return a copy from index and onwards.
It’s also worth noting that this easily breaks into two separate and composable concepts, dropwhile, and a condition, so this would be one implementation:
from functools import partial

def dropwhile(p, xs):
    res = list(reversed(xs))
    while res and p(res[-1]):
        res.pop()
    return list(reversed(res))

def even(x):
    return x % 2 == 0

delete_starting_evens = partial(dropwhile, even)


Oh, oh, I spend alot of time to solve this task.
In most I hade an Empty value
And I got it to return of a list to the funktion and move the indent to
def delete_starting_evens(lst):
    while len(lst) > 0 and lst[0] % 2 == 0:
      lst = lst[1:]
    return lst  


Your post helped clear things up. I think I was under the same impression as
@kurthamm5378307535.

Why doesn’t this work?
def delete_starting_evens(lst):
  for i in lst:
    if i % 2 == 0:
      lst.remove(i)
    else:
      break
  return lst


if you change the thing you’re looking at then it’ll look different. you’d need to account for those changes when looking at it or change a separate value
list.remove isn’t what you want anyway

Can please somebody kindly explain why do we need to know the length of the list in order to make this function to work properly? Thank you!

It depends a little on which solution you are looking at (if it’s not the while loop then my apologies, a short piece of the code that’s troubling would help).
If it’s a while loop, len(lst) is used to avoid throwing errors. This would occur in an instance where every value in lst is even. Without checking to see if the list is still populated with len(lst) > 0, slicing and methods such as .pop() would throw index errors.
You could skip the len() calls as with Python empty lists along with similar types have a false boolean value and you could use this to check if the list was still populated such that-
lst = 
bool(lst) == False
if lst: print(‘test’)
Would print nothing, whereas
lst = [‘b’]
bool(lst) == True
if lst: print(‘test’)
Would print ‘test’.
Whether this is more or less readable is a little up for debate-


stackoverflow.com






How do I check if a list is empty?


python, list


  asked by
  
  
    Ray
  
  on 06:20AM - 10 Sep 08 UTC







That’s exactly the answer I was looking for. I think i get it now, thanks! Will also read through the link you shared

I could not grasp the logic on this example.
i = 0
while i < 2:
  for n in range(0,6):
    i = n
    print(i)
#output: 0, 1, 2, 3, 4, 5

I thought if n=i and when n gets to 2, n should stop

Hi @py4630439988.
Check the nesting on these loops. The for loop is separate to the while statement whilst it runs. The conditional i < 2 is checked once at the start of the while loop when i == 0 which evaluates to True. Code inside the while loop is then executed (it does not check the value of i again until this has finished).
For loop runs and prints 0 through to 5 (i does change but it is never checked against anything). Once the for loop has finished i == 5. As the code inside the while loop has now been executed it starts it’s next iteration and the the check for the while loop is performed again i < 2 which is now False since i == 5.
So I think your issue is that you expect the while loop conditional i < 2 is checked more often than it is.

its cleared now thx a lot
"
288,Are there any statistics modules for Python?,"FAQ,Python FAQ",q-a,1,"
Question
Are there any statistics modules for Python?
Answer
Yes! Python is a very popular language of choice for many in data analysis, so there have been lots of powerful tools made for that field. Some popular modules include:


NumPy for scientific computing

Pandas, specifically for data analysis

Matplotlib for data visualization

",
289,What kind of conditions can a while loop check?,"FAQ,Python FAQ",q-a,1,"
Question
What kind of conditions can a while loop check?
Answer
Any boolean expression can be used to make the condition for a while loop. In one of the earlier lessons we learned about comparators like <= and ==, and boolean operators like and, or, and not.
Anything that results in True or False can be used as the condition for a while loop to check. The important thing is to ensure that the condition eventually results in False at some point, otherwise you get an infinite loop!
",
290,Why would I print a variable instead of just printing the string?,"FAQ,Python FAQ",,2,"
Question
Why would I print a variable instead of just printing the string?
Answer
Often when you write a program you’ll be displaying things that change based on user input. For example, if you want to greet a user with ”Hello, username, good to see you!”, you can’t possibly know everyone’s username when writing your program. So you’d take their username as input and store it in a variable, and then you can print it later as a variable, rather than a hard-coded string!
This concept of avoiding hard-coding is generally a good practice because it allows for code that works more broadly, and should be something you actively look for when trying to improve your code.
","
That’s a good answer, plus I would add that variables can be short and descriptive. You might have a string that is very long and would take a long time to type (with the possibility of errors), but once stored in a short variable you have access to that whole long string just by re-using that short variable you once declared.
"
291,How can I write the binary equivalent of a number?,"FAQ,Python FAQ",,5,"
Question
How can I write the binary equivalent of a number?
Answer
To write any number in binary, add the necessary powers of 2 until you’ve got your number. This is easy enough for small numbers, but not feasible for larger ones. For a better method, check out this video tutorial on converting decimal to binary!
","
This video really helped me out, thanks!

Take any number and divide it in half repeatedly disregarding remainders along the way until you get to 1. Write each answer to the left of the previous answer. Under each answer you write 1 if the answer is odd and 0 if the answer is even.
Example:
Write 2019 in binary.

1   3   7   15    31    63    126    252   504   1009   2019  - Repeatedly half 2019 until you get to 1, 
                                                                disregard remainders
1   1   1    1     1     1      0      0     0      1      1  - Write 1 under odd answers, 0 under even.

Answer: 2019 in binary is 0b11111100011.


Fantastic, you should integrate Khan Academy in your maths section of CodeCademy. That would make your offering close to perfect.

Another good video with another method of converting a decimal number to Binary using 2-4-8-16-32-64-128 bits places





"
292,"Given a single table, how can we split it into multiple tables?","FAQ,Python FAQ",,4,"
Question
In this exercise, it mentions splitting the table into multiple tables. Given a single table, how can we split it into multiple tables?
Answer
In this context, the tables are dataframes. Because they are dataframes, we just need to split the dataframe into separate CSV files using methods from Pandas.
The following example will split a dataframe (“table”) into separate dataframes (“tables”), and save them into separate CSV files, to make them more manageable to work with.
Example
# First, read the original CSV and store in 
# a variable. This is the original ""table"".
data = pd.read_csv(""filename.csv"")

# Split the dataframe into separate ones, by columns.
# These are the ""tables"".
df1 = data[['col1', 'col2']]
df2 = data[['col3', 'col4', 'col5']]
df3 = data[['col6', 'col7', 'col8']]

# Now, we just need to store these into 
# their own CSV files.
# Note: index=False is used to remove the added index column.
df1.to_csv('table1.csv', index=False)
df2.to_csv('table2.csv', index=False)
df3.to_csv('table3.csv', index=False)

","



 jephos249:

Split the dataframe into separate ones, by columns. # These are the “tables”. df1 = data[[‘col1’, ‘col2’]]


could you split the table using the function which pulls the first 3 and the last 3 columns, assuming it’s only 6 columns long using [-3:]/ [0:3] ?

Can anyone point to a good resource on theory for setting up a dataframe from scratch? It seems like we are getting contradictory messages about what makes for a ‘good table’ with ‘useful data’. In this lesson, it stresses that a dataframe that repeats information, such as customer name, products, etc., can ultimately result in tables that are big and unmanageable. However, in other lessons that focus on ‘tidy data’, it seems to stress that this kind of repetition is actually desirable for working with the data and doing analysis. So what’s the deal? Is it the difference between efficiency of data storage vs. efficiency of data usage? What is the actual best practice here?

Is your question about setting up a database from scratch? A database is a collection of tables (or dataframes in Pandas). For theory behind setting up a relational database from scratch, I found this resource provided a helpful overview: https://launchschool.com/books/sql/read/table_relationships
"
293,Is there a naming convention?,"FAQ,Python FAQ",q-a,1,"
Question
All the variables we’ve made so far have had underscores between the words if they’re more than one word. Is this the standard style that most people use, or is there some naming convention I should follow?
Answer
Two common styles are camelCase and underscore_separated. You simply start with a lowercase word, and any words after the first are capitalized normally. Or, you separate each word with an underscore and leave it all lowercase.
You also cannot start a variable name with a number. Variable names must begin with an _underscore or a letter.
Be descriptive and don’t leave any ambiguity when naming variables. userInput is much more descriptive and unambiguous than x.
There are lots of conventions you can learn more about in the PEP 8 style guide if you’re interested! It’s definitely not something you need to read through, but will greatly benefit you in the long run.
",
294,Does the character being replaced in .replace() have to be nonempty?,"FAQ,Python FAQ",,8,"
Question
In the context of this exercise, does the character being replaced in the .replace() method have to be nonempty?
Answer
No, the character being replaced in the .replace() method does not have to be a nonempty string, and can be the empty string ''.
When providing an empty string as the argument for the character to be replaced, this will essentially replace every part between characters in the string. One way you can look at this, is as though every nonempty character has two empty spaces around it, which can overlap with their adjacent characters.
Here is an example that might help to illustrate this more clearly
empty_string = ''
replaced = empty_string.replace('', '!!!')
print(replaced) # !!!

example_string = ""code""
result = example_string.replace('', '==')
print(result) # ==c==o==d==e==

","
Hello,
if in this example:



 jephos249:

example_string = “code” result = example_string.replace(’’, ‘==’)


instead of '' we used ' ' as a character to be replaced, what would happen? Would it give us some kind of error because we don’t have any whitespaces in our string (“code”)?
Thank you.

If in s.replace(old, new), old is not present in s, the function simply returns s.
s1 = 'abc'
s2 = s1.replace('b', 'x')
s3 = s1.replace('z', 'x')
print(s2)
print(s3)

# Output:
axc
abc


Consider,
>>> 'code'.replace('', ' ')
' c o d e '
>>> 

As we can see there is a preponderance of empty strings through the string, code so the method does what it knows how to do. It replaces every instance with a space.
It does not know how to replace something that is not there so it simply ignores it and does nothing.

How can I count empty spaces ‘’ in a string I’m trying something like this :
my = ""abcdef""

for i in my:
  if i == '':
    print(""yes"")

specially how replace method detect empty places  in given string




 css7713845194:

for i in my:


The for loop will only iterate over members of the sequence (characters). There are no characters in between. What replace does is not the same. It replaces all instances of nothing with a space (in the above). We would need to know the inner workings of the method to understand how it does this, but that is not important. We know that we can insert a character or characters between each character in a string.
We can demonstrate similar behavior with the str.join() method.
>>> ' '.join('abcdef')
'a b c d e f'
>>> 

The how of it is a bit of a mystery, but the logic makes sense.
Bottom line, use only code that we understand and can predict the behavior of so we know what to expect, and how to plan it.

.replace can take 3 arguments i.e,
word = ""Hello Hello Hello""
re = word.replace(""H"", ""J"", 2)

here 2 is the number of times you want the word or character to be replaced


You have just mentioned 2… just wanted to say that




 cloud5428235796:

can take 3 arguments


Which if anybody reads the documentation they will be quick to learn. However, it is moot if we want global replacement, which is the default when we do not specify a maximum count.
"
295,What do percentiles tell us?,"FAQ,Python FAQ",q-a,1,"
Question
What do percentiles tell us?
Answer
Percentiles tell us how a value of a dataset stands relative to the rest of the data.
One well-known example is for standardized test scores. Percentiles tell us how well someone performed relative to all other test scores. A score in the 95th percentile means that they performed better than 95 percent of test takers and 5 percent performed better.
Percentiles depend entirely on the dataset, so a set of scores from one school can have very different percentiles from the set of scores of another school. The measure used for the values will also affect the data, such as if the tests are out of 1600 or out of 100.
Further applications of percentiles that are important in data analysis are applications such as for determining the interquartile range (3rd - 1st percentile), which is used to know how spread a dataset is.
",
296,Where in my code do I make this new slice of new_word?,"FAQ,Python FAQ",q-a,28,"
Question
Where in my code do I make this new slice of new_word?
Answer
A common issue here is trying to replace what we already had for new_word, where we concatenated word, first, and pyg. For this exercise we should change new_word again, but by assigning a value over it using the existing version of itself. Take a look at the example below for a better idea:
my_word = first + middle + suffix
my_word = my_word[index_to_slice_goes_here]

Otherwise, we’d be writing new_word = new_word[...] without having defined new_word yet, which will give you an error that reads: NameError: ‘new_word’ is not defined because we’re trying to use it to define itself, which is invalid.
","
2 posts were split to a new topic: This Code Seems Counter-Intuitive

in the terminal for Pyglatin
i type Love
and it shows velay
how it’s executed

There is space between I love you so is.alpha doest not count the space so it would not execute so you could use or insted of and . Even you could add the ASCII code of the characters

Why can’t I declare the three variables we declared inside the if statement outside of it? What would happen?




 gleagbothenoob:

Why can’t I declare the three variables we declared inside the if statement outside of it? What would happen?


technically you could, but why would you? You only want to do these steps when the user input is valid (which the if condition is checking)

I don’t understand the concept of slicing. I will show you :
s = ‘Charlie’
print s[0]
print s[1:4]
When you print this it prints :
C
har
Why doesn’t it print
C
and then
harl
Because the 1 to 4 letters in Charlie are harl
Plz help 

Review how slicing works: given str[x:y], x is the index of the first character of the slice, and y is one greater than the final index of the slice
That way str[x:len(str)] will work the way you want.

the exercise is
“Set new_word equal to the slice from the 1st index all the way to the end of new_word . Use [1:len(new_word)] to do this.”
the 1st index is 0 so how it became a 1 ?? the instruction should be reworded to be “… Use '[0:len(new_word)]…” OR mention “…2nd index…” instead of “…1st index…”.




 bad.banana:

the 1st index is 0 so how it became a 1 ?


the 1st index is the 1st index, if it says first letter, then yes, the index would have been zero

i disagree.
the first index of any array is always zero. for example, the array array1 = (1, 2, 3, 4) what is the value of the first index? starting from zero, the value of the first index is “1”.

well, given counting is from zero, the 0st index would be the first element, the 1st index is the second element.

LOL.
no such thing as 0st index.
All arrays have 0 as the index of their first element which is also called the base index and the last index of an array will be total size of the array minus 1
in the problem description, if what is indended is the second member of the array then it should have been referred to as the second element.




 bad.banana:

in the problem description, if what is indended is the second member of the array then it should have been referred to as the second element .


but second element is at index position 1, aka the 1st index. You have to bridge a gap here, that human counting starts at 1 while indexes start counting at 0.
we can endless argue about this, but it doesn’t matter. You need to understand what the exercise asks of you, and how to achieve this.

Just wanted to point out that the instructions for for step 10 are a little unclear. Not only is it tricky that we need to create a new variable, but we also have to omit the print statement. No way I would have been able to figure that out without peaking at the solution. It would be nice if the instructions were more thorough! I prefer not to look at the solutions, but you leave me no choice! 

You can always come to the forum to ask your question? Then we can help you in steps, then you don’t have to peak at the solution 

I keep getting a syntax error when slicing, with the syntax error pointing to the colon:
if len(original) > 0 and original.isalpha():
word = original.lower()
first = word[0]
new_word = [1:len(word)] + first + pyg
print new_word
else:
print ‘empty’

File “python”, line 8
new_word = [1:len(word)] + first + pyg
SyntaxError: invalid syntax

EDIT: nevermind, I realized I wasn’t calling the variable before the slice. Corrected by changing to:
new_word = word[1:len(word)] + first + pyg

how does this work ‘Set  new_word  equal to the slice from the 1st index all the way to the end of  new_word . Use  [1:len(new_word)]  to do this.’, when the new_word is just being created and also it includes + first + pyg before the it is know how many letters it will have?

len() will count the number of characters which are currently in the string. The addition to the string has already occurred, so will be included in the count.

thank you for the clarification. But it feels counter-intuitive
"
297,FAQ: Learn Python - Battleship - A Real Win,"FAQ,Python FAQ",,3,"

Community FAQs on Codecademy Python Exercises.png1000×208 141 KB

This community-built FAQ covers the “A Real Win” exercise in Codecademy’s lessons on Python.
FAQs for the Codecademy Python exercise _ A Real Win_:

Why do I get a “break outside of loop” error?


Join the Discussion. We Want to Hear From You!
Have a new question or can answer someone else’s?  Reply () to an existing thread!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources about Python in general? Go here!
Want to take the conversation in a totally different direction? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account, billing, Pro, or Pro Intensive? Reach out to our support team!
None of the above?  Find out where to ask other questions here!
","
Other FAQs
The following are links to additional questions that our community has asked about this exercise:

This list will contain other frequently asked questions that aren’t quite as popular as the ones above.
Currently there have not been enough questions asked and answered about this exercise to populate this FAQ section.
This FAQ is built and maintained by you, the Codecademy community – help yourself and other learners like you by contributing!

Not seeing your question?  It may still have been asked before – try () in the top-right of this page.  Still can’t find it?  Ask it below by hitting the reply button below this post ().

2 posts were split to a new topic: Battleship - buggy user input
"
298,Can we sort Numpy arrays in reverse order?,"FAQ,Python FAQ",,7,"
Question
In the context of this exercise, can we sort Numpy arrays in reverse order?
Answer
In Numpy, the np.sort() function does not allow us to sort an array in descending order. Instead, we can reverse an array utilizing list slicing in Python, after it has been sorted in ascending order.
Example
array = np.array([7, 5, 3, 2, 6, 1, 4])

# Sort in ascending order
sorted_array = np.sort(array)
# [1, 2, 3, 4, 5, 6, 7]

# Reverse the sorted array
reverse_array = sorted_array[::-1]
# [7, 6, 5, 4, 3, 2, 1]

","
How does “::-1” work?




 jephos249:

[1, 2, 3, 4, 5, 6, 7]


I think an array, when printed does not have the comma “,” between values, while a list does. Right?




 mraji:

an array, when printed does not have the comma “,” betw


curious to know the answer if you found out?

I’ve just found out that the first “:” in “::-1” means we want to choose elements from the array in reverse order. The second “:” act as its ordinary use.
So, “::-1” means we choose all the elements, beginning with the last element in reverse order up to the very first element of the array.
I’m not good at explaining but hope you understand what I wanna say 

::n creates a list containing every n-th element of the original list, starting with the zeroth element.
::-n does the same backwards, starting with the last element.

Thanks for the explanation
"
299,What are some other things we can do with KNeighborsClassifier?,"FAQ,Python FAQ",,3,"
Question
In the context of this exercise, what are some other things we can do with KNeighborsClassifier?
Answer
With the KNeighborsClassifier function, you have the option to set a few parameters which can change how the model will work, as well as access to methods that can perform useful tasks.
One parameter is the weights, which you can change to determine how each data point is weighted. You can set this parameter to “uniform”, which is the default value, or “distance”, which uses the inverse of each points’ distances so that close neighbors have more impact than farther neighbors.
Another parameter you can set is the algorithm parameter, which will determine what algorithm is used to compute the nearest neighbors. The values include ball_tree, kd_tree, brute, or auto.
The KNeighborsClassifier function also provides a kneighbors() method, which finds all the K-neighbors for given points and returns the indices and distances to the neighbors.
To see a full list of what the function provides, feel free to check out the official documentation.
","
Hello,
Can you please share the movie_dataset, and  labels files or link to download them?

Do you have to normalize the data before classifier.fit() ?
"
300,Learn Python - File Input / Output - PSA: Buffering Data,"FAQ,Python FAQ",,4,"

Community FAQs on Codecademy Python Exercises.png1000×208 141 KB

This community-built FAQ covers the “PSA: Buffering Data” exercise in Codecademy’s lessons on Python.
FAQs for the Codecademy Python exercise PSA: Buffering Data:

What can we write inside of a with … as code block?

Join the Discussion. We Want to Hear From You!
Have a new question or can answer someone else’s?  Reply () to an existing thread!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources about Python in general? Go here!
Want to take the conversation in a totally different direction? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account, billing, Pro, or Pro Intensive? Reach out to our support team!
None of the above?  Find out where to ask other questions here!
","
Other FAQs
The following are links to additional questions that our community has asked about this exercise:

This list will contain other frequently asked questions that aren’t quite as popular as the ones above.
Currently there have not been enough questions asked and answered about this exercise to populate this FAQ section.
This FAQ is built and maintained by you, the Codecademy community – help yourself and other learners like you by contributing!

Not seeing your question?  It may still have been asked before – try searching for it by clicking the spyglass icon  () in the top-right of this page.  Still can’t find it?  Ask it below by hitting the reply button below this post ().

Hi, may i know how the code will look like if i decide to use
read_and_write_file = open(“text.txt”, “r+”)

I don’t understand how read_file in this block of code works since it was buffered (not sure if I’m saying that right) before the new data was written to the file.

write_file = open(“text.txt”, “w”)
read_file = open(“text.txt”, “r”)
write_file.write(“Not closing files is VERY BAD.”)
write_file.close()
print read_file.read()
read_file.close()

Wouldn’t the read_file at “print read_file.read()” still only contain the old data from before the write?
"
301,"What do I need to change to delete ""number = 5""?","FAQ,Python FAQ","functions-py,q-a",2,"
https://www.codecademy.com/courses/learn-python-3/lessons/intro-to-functions/exercises/parameters?action=resume_content_item
Where do I add function so I can delete number = 5?
","

Now, modify the function definition so that it has a parameter called number . Then delete the number = 5 assignment on the first line of the function.
Pass the number 1 into your function call.

We start out with,
def mult_two_add_three():
  number = 5

The parameter list is empty, and the variable is declared and defined directly in the function body.
We want to be able to supply the function with any value for number so define it in the parameter list, as the instruction suggests…
def mult_two_add_three(number):
  #number = 5

Comment out the declaration line and run the code with the arguments given in this and the next three steps.
"
302,Why does nothing happen when I press Run?,"FAQ,Python FAQ",,45,"
Question
Why does nothing happen when I press Run?
Answer
If you see “What is your name?” printed to the terminal window on the right, then it’s just waiting for you to type your name, press enter, and then answer the next two questions in the same way. When it’s done taking input from you, it will display the string you’ve built and pass the exercise.
If you just see a black screen when you press Run, be sure that you’ve used string formatting correctly and if that doesn’t work, try these few steps:
Be sure to use Chrome, it’s typically the most reliable,
Clear your browser’s cache and press Cmd + Shift + R (Mac) or Ctrl + F5 (Windows),
Or check out our official troubleshooting guide
","
2 posts were split to a new topic: What do These Backslashes Do?

I would like to comment that this exercise is not working for me. I still do not understand it even after clicking to reveal the solution. I would very much appreciate a step by step  from someone who did complete this exercise. I’m pretty sure I’m just overthinking it, but I can’t seem to get it right.

so this is my code
name = raw_input(“What is your name?”)
quest = raw_input(“What is your quest?”)
color = raw_input(“What is your favorite color?”)
print ""Ah, so your name is %s, your quest is %s, "" 
“and your favorite color is %s.” % (name, quest, color)
This is also the code if you press solution, but It wont let me type in my quest it goes What is your name? and you answer your name, then it asks What is your quest?What is your favorite color? and I don’t understand why help would be amazing.

@chiprunner92338
To my understanding, when you put %s into the code, you are telling Python to substitute a string data type right there. Think of %s and substitute string. If you use %d you are telling Python that you want to substitute an integer decimal value.  The % also converts data types, such as from decimal to string.
If you want to learn more, you can look at the link below. Yes, it talks about data types at first, but about half way down it talks about the substitutions.
https://docs.python.org/3/library/stdtypes.html#string-formatting-operations
I am sorry if I have confused you at all or if I am mistaken.

thanks ill see if it helps. If you enter the code youll notice it doesn’t work properly for some reason.

The most simple and working solution with this issue I was able to find was to divide default code lines with empty line by presssing Enter. So, it must be like this:
1 name = raw_input(""What is your name?"")
2
3 quest = raw_input(""What is your quest?"")
4
5 color = raw_input(""What is your favorite color?"")

And if my following code is right - it works fine. Even after pressing reset button - works fine without changing the first three lines.
Don’t know why it worked, though.

name = raw_input(“What is your name?”)
quest = raw_input(“What is your quest?”)
color = raw_input(“What is your favorite color?”)
print ""Ah, so your name is %s, your quest is %s, "" 
“and your favorite color is %s.” % (name, quest, color)
*Leave your code like this
**Hit Run
*** click on box on right
****Type your name  Type your quest  type your color 

what is the backslash used for in the code between the two strings?
print ""Ah, so your name is %s, your quest is %s, "" 
“and your favorite color is %s.” % (name, quest, color)

Hey, this is late but the solution i found was to split the line for “your name is %s” and “your quest is %s” like below. For me, this solved the problem of the quest and colour questions appearing together.
name = raw_input(“What is your name?”)
quest = raw_input(“What is your quest?”)
color = raw_input(“What is your favorite color?”)
print ""Ah, so your name is %s, "" 
“your quest is %s,” 
“and your favorite color is %s.” % (name, quest, color)

Hi, yes the platform maybe has an error. I do the things well but…

platform_error.png1920×1080 215 KB


I’m getting the same error message…not cool.

@victoriocanavesi & @dmf1990. Everyone is getting these errors as well. I recommend sending in a bug report.

Personally I think it’s a bug with the raw_input.  If you remove those sections and just force in strings, it will at least let you past.  My code appears like this:
name = “Chris”
quest = “To find The Holy Grail”
color = “purple”
print ""Ah, so your name is %s, your quest is %s, "" 
“and your favorite color is %s.” % (name, quest, color)
Thankfully the program doesn’t check to see if any of the upper section is correct, so it gives you the Next button once the output looks right.

Very true, but the point of the exercise is that you practice raw input. So bypassing it like that defeats the purpose. I guess if you have already solved the exercise then maybe but otherwise…

this is the same error am getting too

Hi @emmanuelenwuka012199, Welcome to the forums!
What lesson are you getting this error on?

[My problem solved this way] Hey i got same problem when i click on run and when i write in output box it didn’t print anything but then again i did that and this time  i select output box with a click and write into box and i got that.

@stevencopeland
The error is happening here:
Learn Python 2 | String Formatting with %, Part 2
https://www.codecademy.com/courses/learn-python/lessons/strings--console-output/exercises/string-formatting-with--part--1?action=resume_content_item
What is your name? Meg
Traceback (most recent call last):
File “python”, line 1, in 
ExecTimeoutException: Program took too long to terminate.

Mine won’t even ask for my quest, it thinks for a while after I hit Enter after typing my name, then pops up with the error before showing anything else.
"
303,How does `+=` work?,"FAQ,Python FAQ","loops-py,q-a",5,"
Hey I’m just wondering. I didn’t know how to complete the last part of this exercise because I think it’s the first time I see the “+=” operator. Maybe I’m wrong?
","



 davidjimenez49530697:

first time I see the “+=” operator


First time, but not the last. If we query assignment operators in search we find this to be among them.
It happens in two steps. The addition operation is performed where we take the current value and add the new value to it arriving at a new current value once it is assigned back to the variable.
new_current_value = old_current_value + new_value

a = a + b

Both statements above express the same thing.
a += b

expresses it in more succinct terms.

2 posts were split to a new topic: Why += and not append?

2 posts were split to a new topic: Need explanation of output

10 posts were split to a new topic: Why did the pace of the exercises started to go so fast?
"
304,If an instance variable is not set in __init__() can it be referenced by a class method?,"FAQ,Python FAQ",,14,"
Question
If an instance variable is not initialized in the __init__() function, can it still be referenced by a class method?
Answer
Yes, the instance variable can be referenced by a class method using self so long as it has been set before the call. If not, an AttributeError will be generated. As a general rule, it is best to initialize all of the instance variables in the __init__() function for consistency.
","
__init__() is what defines instance variables. Any other is a class variable until an instance changes it within its own context, thereby adopting a new instance variable.

They pyDocs have a good example of the difference between class and instance variables
“”""
instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:
“”""
class Dog:

    kind = 'canine'         # class variable shared by all instances

    def __init__(self, name):
        self.name = name    # instance variable unique to each instance

>>> d = Dog('Fido')
>>> e = Dog('Buddy')
>>> d.kind                  # shared by all dogs
'canine'
>>> e.kind                  # shared by all dogs
'canine'
>>> d.name                  # unique to d
'Fido'
>>> e.name                  # unique to e
'Buddy'


So, ‘store_name’ listed in scenario #1 is the same as calling a variable inside the init method of scenario #2? If so, are there any specific cases where we might use instance variables like the one listed in scenario #1?




alternative_rocks = Store().   # Store is the class name
alternative_rocks.store_name = “Alternative Rocks”




class Store:
def init(self, store_name):
self.store_name = store_name




 ajaxblaster64031:

s the same as calling a variable inside the init method


We use the __init__() method so we can instantiate values particular to that instance. The variables once created are free of that method, which only runs once, ever.
An object has been created that has unique attributes. It won’t mean that other objects cannot have those values, but it does mean that now we can actually group objects by their coincidence on certain attribute values. A cool way to look at data.

Thanks @mtf.  I earlier didn’t understand  the importance of ‘init’ runs once during instantiation but now I understand.
When you said “actually group objects by their coincidence on certain attribute values”, are you referring to comparing the values of instance variables of 2 different objects for the same class?
Let me know if my understanding is incorrect. Slowly trying to make my way through classes and understand it.




 ajaxblaster64031:

are you referring to comparing the values of instance variables of 2 different objects for the same class?


Precisely. Two instances of the same class will have common attributes, though their values will be distinct to each instance. We can then compare attribute values.
We won’t need to group them, though. They already are a group, and they have a name… The attribute.

Got it. Thanks for clarifying.

You’re welcome. Here is something further to consider…
We have two circles. One has a radius of p and the other of q. Given that q is double what p is. by the Law of Squares we know that the area of the circle with radius q will be four times the area of the circle with radius p.
In a classified date structure with such computing ability we can readily compare any number of like objects. In geometry we call this, similarity.
How many triangles can you draw when the angles never change? How many triangles can you draw where the side lengths never change?
Answer: Infinite, and, three. Similarity sides with the first result.

Oh, if you count transformations,
infinite

and,
12

.____
It is not about math, as some would hold. We all have it within us to see the numbers and how they relate. Some math might be needed to analyze what we see, but it doesn’t have to be us doing the math to see it.
If we want to understand what the math is telling us, then math it is. But, it should not keep us from seeing what it is we just saw.
It’s why I love Cosmology.

Fantastic differentiation, thank you so much for posting this!

This might have been asked already, but I still don’t understand the difference between defining instance variables using __init__ vs directly using the object.
This
class Store:
    def __init__(self,store_name):
        self.store_name = store_name

alternative_rocks = Store(""Alternative Rocks"")
alternative_rocks.store_name

vs this
class Store():
    pass

alternative_rocks = Store()
alternative_rocks.store_name = ""Alternative Rocks""
alternative_rocks.store_name


From a programming perspective it may prove more beneficial to have attributes defined in the class so that every instance has them in common and our program does not run the risk of raising an AttributeError because an instance does not have an expected attribute.

Got it, that makes sense, thank you!
"
305,Why is my returned average value incorrect?,"FAQ,Python FAQ",,2,"
Question
Why is my returned average value incorrect?
Answer
A common mistake is writing out a step like numerator / denominator on a line by its own and then trying to return total. This is close, but it won’t store that result anywhere unless you tell it to!
Better yet, we can write that all on the same line as the return and save ourselves from having to create another variable, like this: return numerator / denominator.
Remember that performing math like that on a line of its own simply does the math and moves on without storing it anywhere unless you assign it to some variable.
","
When defining the average function, why is it necessary to convert the total variable to a float?  Wouldn’t it already be a float because it’s the sum of floats?
"
306,How can I read binary numbers?,"FAQ,Python FAQ",,8,"
Question
How can I read binary numbers?
Answer
Binary isn’t how we’re used to reading numbers, so no worries if it doesn’t make sense at first. Like anything, it’ll become more familiar with practice!
First, let’s break down how the base 10 number system works. This is what we use on a daily basis. The number 134 can also be looked at as 1 * 10^2 + 3 * 10^1 + 4 * 10^0, or 100 + 30 + 4.
Starting at 0 for the rightmost index, each index is the exponent of the base, and you multiply that by the number in that index. That’s why we did 4 * 10^0, because 4 is in the 0th index.
We do the same for any base, including binary.
If we have a bit string of 0b1010, we now know what to do to get the decimal number. It’s equivalent to 0 * 2^0 + 1 * 2^1 + 0 * 2^2 + 1 * 2^3, or 8 + 2, which is 10!
","
Am I right in summarizing binary counting as: what is the next number, in base 10 terms, that only contains 0s and 1s?
That’s how the pattern seems to play out for me.

I also don’t understand this part of the explanation provided in this part:
‘The numbers one and zero are the same in base 10 and base 2. But in base 2, once you get to the number 2 you have to carry over the one, resulting in the representation “10”. Adding one again results in “11” (3) and adding one again results in “100” (4).’
I don’t quite get the ‘carry over the one part’

Basically, the 2nd line means that for example, if you have 19, the next number isn’t 10 10, it’s 20, because you make the 9 a 1 and add it to the 1 (10). So in this case, you do 0 -> 1 -> 10, because that 2 is now the “ten” for power two.  Then, add one to make it 11. But, what I don’t get is how 11 goes to 100. what is after 100? 101 -> 1,000 -> 1,001 -> 10,001?

There are 10 kinds of people: those who understand binary and those who do not.
Sorry.  

Once you reach 100, you just add ones as you would in base 10 counting, but jump to the next decimal when reaching 2 in stead of 9 (for base 10 counting).
100, 101, 110, 111, 1000, 1001, 1010,1011, 1100, 1101, 1110, 1111…

Here’s a great website in learning how to convert binary to decimalhttps://decimal.info/binary-to-decimal/5-bit/how-to-convert-00010-binary-to-decimal.html

Basically it means, that in base 10 system you start filling the first place of your number with numbers from 0-9, once it gets full (you reach 9) you make it 0 and move to next place and add 1 and ""carry""it to the added place start counting up from 1 again, then 2 then 3…and so on (0, 1, 2…9>>> 10, 11, 12…19 >>> 20, 21, 22…29 >>> 30, 31…and so on.
in Binary system, you do the same but you only have 0 and 1 to use instead of 0-9, so you start you number with first place 0, then 1, then it gets full and you can only fill it with an extra 1 or 0, so when 1 is full you have to add a 0 to go to the next number, so its 10, then add 1, becomes 11, now 11 is full so you need to add another place so you add 0, become 100, then 101, 110, 111 is full so you add 4th place so it becomes 1000, 10001, 10010 and so on…
"
307,"What are the properties of ‘object’, the simplest and most basic class?","FAQ,Python FAQ",q-a,8,"
Question
What are the properties of ‘object’, the simplest and most basic class?
Answer
In Python, the object from which all classes inherit their most basic properties is called object. This allows us to customize everything about our new class, including how to initialize it, how to set descriptors, accepting arguments, and more.
For an in-depth view, take a look at the top answer of this StackOverflow post about the object we inherit from!
","
Why wasn’t this the first ever excercise for the class module? I felt this exercise has a better explanation of what objects are and throws off any confusion the first exercise brings when it asks to create a class to understand its syntax


the simplest and most basic class

In terms of pre-2015, JS did not have classes, proper, but the language implied a class structure. In truth, it’s only a way to conceptualize what it really is… A prototypal language.
The top of the Object.prototype chain is, null.
 > Object.prototype
<- {constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …}
 > Object.prototype.prototype == null
<- true
 >

All objects inherit from Object.prototype, meaning all those methods and other properties are accessible in the context of any object instance, be it a boolean, string, number, array, plain object or custom object, or function.
The closest thing to an ES class, is a JS constructor. The difference is that any function can be a constructor, but a class requires an explicit class definition.

Earlier in this course, we were told that “Whilst … not a strict ‘requirement’ it is a widely adopted convention” to capitalise the first letter of a class. But the object class always has a lower case “o” in the tutorials. Why is that?




 macmike:

But the object class always has a lower case “o” in the tutorials. Why is that?


Can you furnish an example of this, please, and perhaps a link to the lesson?

For example:-
Learn Python 2: Introduction to Classes: Lessons 7 to 18
Learn Python 2: Classes : Lesson 1 - 7 and probably more
It’s only a style point I think, and I am new to Python, but I would have expected:-
class Car(Object)
rather than
class Car(object)

Python 2 has reached its end of life and should be laid to rest. That said, if we look at the builtins we see they are all lower case…
str
int
float
bool
list
dict

etc. As for, class Dog(object):, in Python 3 we no longer have to specify object as the class our custom class will inherit from. It inherits by default, now.
class Dog:

In writing our own class definitions we should still maintain the convention of capitalizing their name. It is helpful in identifying instances.

I could not agree more. The previous exercise was jumbled confusion that this exercise now carefully explains a simple piece at a time.
"
308,Why isn’t the lesson accepting what I write to the file?,"FAQ,Python FAQ",q-a,6,"
Question
Why isn’t the lesson accepting what I write to the file?
Answer
Be sure not to add any additional spaces or punctuation or unnecessary text to the output file since Codecademy checks for exactly what is asked for. A common error is using string formatting and putting a space between the current for loop variable being written and the newline character, \n.
To fix this, simply remove any spacing you wrote and just write() the current number and the newline character directly afterward.
","
my_list = [i ** 2 for i in range(1, 11)]
my_file = open(“output.txt”, “w”)
Add your code below!
for i in my_list:
print i
my_file.write(“output.txt”""\n"")
my_file.close()
It prints out each number on its own line but isn’t accpeted for some reason. Where abouts am I going wrong?

Add the “+” operator in my_file.write like:
my_file.write(“output.txt” + “\n”)




 mean_sideys:

for i in my_list:
print i
my_file.write(“output.txt”""\n"")
my_file.close()





 pranavabhu:

Add the “+” operator in my_file.write like:
my_file.write(“output.txt” + “\n”)


When I use that code, it works perfect, but is not accepted by the lesson. When I change my code to match the solution’s recommended code, my console registers an error and the lesson doesn’t accept it either. Is there a bug?

This should work (my code):
my_list = [i ** 2 for i in range(1, 11)]
my_file = open(“output.txt”, “w”)
for number in my_list:
my_file.write(str(number) + “\n”)
my_file.close()
my_file = open(“output.txt”, “r”)
print my_file.read()
my_file.close()

this works:
my_list = [i ** 2 for i in range(1, 11)]
my_file = open(“output.txt”, “w”)
Add your code below!
for i in my_list:
my_file.write(str(i) + “\n”)
my_file.close()
"
309,Can we sort Numpy arrays in reverse order?,"FAQ,Python FAQ",,7,"
Question
In the context of this exercise, can we sort Numpy arrays in reverse order?
Answer
In Numpy, the np.sort() function does not allow us to sort an array in descending order. Instead, we can reverse an array utilizing list slicing in Python, after it has been sorted in ascending order.
Example
array = np.array([7, 5, 3, 2, 6, 1, 4])

# Sort in ascending order
sorted_array = np.sort(array)
# [1, 2, 3, 4, 5, 6, 7]

# Reverse the sorted array
reverse_array = sorted_array[::-1]
# [7, 6, 5, 4, 3, 2, 1]

","
How does “::-1” work?




 jephos249:

[1, 2, 3, 4, 5, 6, 7]


I think an array, when printed does not have the comma “,” between values, while a list does. Right?




 mraji:

an array, when printed does not have the comma “,” betw


curious to know the answer if you found out?

I’ve just found out that the first “:” in “::-1” means we want to choose elements from the array in reverse order. The second “:” act as its ordinary use.
So, “::-1” means we choose all the elements, beginning with the last element in reverse order up to the very first element of the array.
I’m not good at explaining but hope you understand what I wanna say 

::n creates a list containing every n-th element of the original list, starting with the zeroth element.
::-n does the same backwards, starting with the last element.

Thanks for the explanation
"
310,What are some other things we can do with KNeighborsClassifier?,"FAQ,Python FAQ",,3,"
Question
In the context of this exercise, what are some other things we can do with KNeighborsClassifier?
Answer
With the KNeighborsClassifier function, you have the option to set a few parameters which can change how the model will work, as well as access to methods that can perform useful tasks.
One parameter is the weights, which you can change to determine how each data point is weighted. You can set this parameter to “uniform”, which is the default value, or “distance”, which uses the inverse of each points’ distances so that close neighbors have more impact than farther neighbors.
Another parameter you can set is the algorithm parameter, which will determine what algorithm is used to compute the nearest neighbors. The values include ball_tree, kd_tree, brute, or auto.
The KNeighborsClassifier function also provides a kneighbors() method, which finds all the K-neighbors for given points and returns the indices and distances to the neighbors.
To see a full list of what the function provides, feel free to check out the official documentation.
","
Hello,
Can you please share the movie_dataset, and  labels files or link to download them?

Do you have to normalize the data before classifier.fit() ?
"
311,Can we compare one value with multiple values using 'or'?,"FAQ,Python FAQ",,15,"
Question
When comparing one value with multiple values, can we just separate each value with or?
Answer
No, when comparing one value with many other values, or cannot be used to check, for instance, if “a value equals some value or another value or another value.” Each side of the or must be a valid expression on their own, so this would not work.
Example
# This would not compare value with 10, 11, 12.
if (value == 10 or 11 or 12):
  print(""Fourth quarter"")

# Instead, each comparison must be separate and 
# valid on their own on each side of each ""or"".
if (value == 10 or value == 11 or value == 12):
  print(""Fourth quarter"")
","
it will not work as expected, fine. but how does it work?

does it just compare the first number and leave or doesn’t compare at all or is there any default result ?

or ( as well as and) does not necessarily return True or False.
or goes through its operands right to left, and returns the value of first one that has a “truth value” of True. If none of them have a truth value of Truth value of True, it returns the value of the last operand.
If all of the operands are True or False, or expressions that resolve to True or False, it will work as you expect.
But if the operands are other objects (ints in the example), Python goes by the rules:

The truth value of False, 0, any empty container or any expression that evaluates to one of those objects is False.
The truth value of everything else is True.

x = 1 or 2

y = 0 or []

z = 3 > 2 or 5 < 10
print(x)
print(y)
print(z)

# Output
1      # first True
[]     # last value, as both have a truth value of False
True   # Expression evaluates to true

(and works in a similar way: it returns the value of the first object that has a truth value of False; otherwise, it returns the value of the last operand tested.)

To more directly answer the OP:
value = 10
if (value == 10 or 11 or 12):
 print(""Fourth quarter"")
 
value = 3.14
if (value == 10 or 11 or 12):
 print(""Fourth quarter"")

# Output:
Fourth quarter
Fourth quarter

The expression (10 or 11 or 12) will always return 10,  according to what I wrote above.  Since 10 has a truth value of True, the if clause will always pass, no matter the value of the variablevalue.

Is the precedence of the comparison operator(==) lesser than ‘or’ operator? As you have said that the logical result is prioritized more than the result of comparison. Does python have a precedence following nature?

== is of higher precedence than and, and and is higher than or, according to the docs.
In the above examples, value == 10 is evaluated first, returning True in one case, and False in the next.
That leaves:
True or 11 or 12  # case 1
False or 11 or 12  # case 2
Let’s evaluate those:
print(True or 11 or 12)
print(False or 11 or 12)

# Output:
True   # First True
11     # First True

Both of these have a truth value of True, so both if blocks are triggered.
Python definitely has an order of operator precedence, which I linked to above. Note that in that table, precedence is from least to greatest (i.e., least on top).  Expressions containing operators of the same precedence are evaluated left to right.

yes but isn’t [] an empty container? therefore shouldn’t it be a False? so why it is printed?

Are you referring to this (from above)?
x = 1 or 2

y = 0 or []

z = 3 > 2 or 5 < 10
print(x)
print(y)
print(z)

# Output
1      # first True
[]     # last value, as both have a truth value of False
True   # Expression evaluates to true

Remember that Python prints, in the case of or, the first value (object) that that has a boolean (“truthy”) value of True, and the second value if both have a boolean value of False.  In this case,  [] is the second value (object). (And, likewise, and returns first False or second True object.)
The point is that, unlike other comparison operators, which return either  True or False or raise a TypeError if the values cannot be compared, and and or return the value of one of their operands.  If those operands are boolean expressions that return True or False, the behavior is what you expect; if not, you will see one of the operands themselves (i.e., one of the objects) returned.
x = 'abc'
y = []

print(bool(x))
print(bool(y))

print(x or y)
print(x and y)

print(x >= y)

Output:
True
False
abc  # first True
[]  # first False
Traceback (most recent call last):
  File ""C:\Users\path\totest.py"", line 9, in <module>
    print(x >= y)
TypeError: '>=' not supported between instances of 'str' and 'list'





 patrickd314:

To more directly answer the OP:
value = 10
if (value == 10 or 11 or 12):
 print(""Fourth quarter"")
 
value = 3.14
if (value == 10 or 11 or 12):
 print(""Fourth quarter"")

# Output:
Fourth quarter
Fourth quarter

The expression (10 or 11 or 12) will always return 10 , according to what I wrote above. Since 10 has a truth value of True , the if clause will always pass, no matter the value of the variable value .


Even though 3.14 is not equal to 10, python will consider it true?




 vipulkataria93452139:

Even though 3.14 is not equal to 10, python will consider it true?


patrickd314 covers this in his answer? 11 and 12 are not compared to anything, as such, python will evaluate if they are truthy values. Truthy means a value which is considered true. Positive integers are considered true.
Which is simple to demonstrate:
if 11:
   print('11 is considered a truthy value')


How can we understand precedence in complex mixes of and or ==
print(0 == False and 3 or 4 and 7 or [ ] and 0 ) # 3

print(0 or False and 3 or 4 and 7 or [ ] and 0 ) # 7


In case you’d like to check a variable against multiple values, you can use sets.
So, in a setting like the original question, we’d have:
if (value in {10, 11, 12}:
  print(""Fourth quarter"")


Since, AND has higher precedence than OR. All the AND’s expression will be solved first, using the logic explained by @patrickd314.



 patrickd314:

and works in a similar way: it returns the value of the first object that has a truth value of False; otherwise, it returns the value of the last operand tested.)


Then, when only OR is remaining in the expression it becomes the same case also explained by @patrickd314

Hi, I know we’re discussing logical and relational operators so it makes sense to see to use OR but I agree with “tajaddini” that the best way to check if a value is 10 or 11 or 12 is to use IN rather than OR
e.g. if value in [10, 11, 12]: …
"
312,How can I check if the type is int or float?,"FAQ,Python FAQ",,12,"
Question
How can I check if the type is int or float?
Answer
To determine whether or not the value given to the function is an int or a float, we need to understand what is being returned to us by the type() function.
type() accepts one argument, as we know, and returns its type as either int, float, or str, among others. It does not return it as a string like ”int”.
If your code looked like this:
def my_function(value):
  if type(value) == “str”:
    return “It’s a string!”

That would be invalid! type() will never return ”str”, so it cannot possibly enter that conditional statement.
Another common error is misusing type()’s argument. For example, if you checked for type(int) or type(float), that’s not quite what we’re trying to do in  this exercise. Be sure to give the argument given to your function as the argument for type().
Lastly, keep in mind that == is used for comparison, while = is used to assign values. If you use = in an expression being checked, you will get an error.
","
I don’t get it. Why does

print type(5)

result in  <type ‘int’>  and not just int ?
Thanks in advance

2 posts were split to a new topic: Why Do We Check Datatypes Without Quotes?

I’d suggest to check the type of ‘n’ in if statements using this :
if type(n) is int:
if type(n) is float:
if type(n) is str:


Can’t you use the .isdigit keyword that codeacademy previously introduced us to?

that is just the format

7 posts were split to a new topic: How can I set the value to test the function

Why wouldn’t I be able to type it like this:

if type(n) == int or float:


Why is the formatting necessary such that I have to type it

if type(n) == int or type(n) == float:


Thank you advance.




 text9129350742:

Why wouldn’t I be able to type it like this:
if type(n) == int or float:



from a human point of view, this makes a lot of sense. Not for the computer.
on the other hand, it allows us to do:
if x == 5 or y:

so either x has to be 5, or y has to be a truthy value.
of course, you could overcome your problem by doing:
if type(n) in (int, float):


Alright, thank you kindly for replying.

Hello, I don’t understand why my first line isn’t valid
here is my code
def distance_from_zero(n)
if type(n) == int or type(n) == float:
  return abs(n)
else: 
  return ""Nope""


you forgot the colon (:) at the end of your function “deceleration”.
Trying to define a function with the incorrect syntax will lead to a syntax error
"
313,Does count() generate an error if it cannot find any items?,"FAQ,Python FAQ",,11,"
Question
In this exercise, count() is used to find the number of items in a list. If the item being counted isn’t in the list, will count() return an error?
Answer
No, count() will not return an error if the item passed to the function is not found. The count() function will return a value of 0. This is shown in the example code below. The first two items passed to count() are present in the vehicles list. The third item is not present in the list at all.
vehicles = ['car', 'truck', 'car', 'van', 'car', 'van']

# Returns value of 3
cars = vehicles.count('car')

# Returns value of 2
vans = vehicles.count('van')

# Returns value of 0
suvs = vehicles.count('suv')

","
How can we count the number on the basis of an element of sublist?
For example,
List = [[“Sam”,12] , [“Ron”, 17], [“Josh”, 12]]
and we need to count how many of them are aged 12.

Hi @pyrockstar05796,
You have a variety of choices regarding how to do this. The following demonstrates the technique of unpacking the elements of inner lists within a for loop:
friends = [[""Sam"", 12], [""Ron"", 17], [""Josh"", 12]]
def age_count(people, age_to_count):
  count = 0
  # unpack people[0], people[1] into name, age
  for name, age in people:
    if age == age_to_count:
      count += 1
  return count

print(age_count(friends, 12))

Output:
2

Edited on May 27, 2019 to add the following:
If you would like, instead, to use the list.count() method that is the subject of the exercise, you can unpack name and age within a list comprehension, then count the cases where age is equivalent to 12 within the resulting list, as follows:
friends = [[""Sam"", 12], [""Ron"", 17], [""Josh"", 12]]
age_12_count = [age for name, age in friends].count(12)
print(age_12_count)

Output:
2

Hello appylpye, i would like your help once again.

def two_euro_slices(pizzas_by_price,two_euro_pizza):
  count = 0
  for type_of_pizza,price in pizzas_by_price:
    if price == two_euro_pizza:
      count +=1
  return count

As you see i tried to use the piece of code you wrote first, when i needed it for an exercise in codecademy(i didn’t copy paste it, first i spend my time trying to understand how it works and then i used it.) Anyway it helped a lot!
The only thing that keeps troubling me till this moment is this:
As you see the return command is exactly below the for.
When it is typed like this everything works fine as it’s supposed to.
But, when i accidentaly moved it a little, for example:
def two_euro_slices(pizzas_by_price,two_euro_pizza):
  count = 0
  for type_of_pizza,price in pizzas_by_price:
    if price == two_euro_pizza:
      count +=1
      return count

when i put it under the count , the whole result is changing.
on the first example it returned 3, which was correct, as i was trying to count the pizza slices that cost 2 euros from a list with pizza types.
but on the second example it returned 1, and i have absolutely no clue about how this worked!
Thanks in advance for your response.

Don’t forget what return does:

It returns a value to the calling statement
It halts processing of the function

In other words, once return is reached one time, the function halts (and actually disappears from the call stack - Python’s “active memory” -  along with all of its variables.)

Hi @code5132969222 ,
You initialized count to 0 here:
  count = 0

Within the for loop, you have this if block:
    if price == two_euro_pizza:
      count +=1
      return count

Considering what @patrickd314 wrote about return statements, what happens the first time within the for loop that the condition within the if block header evaluates to True? Also, what would happen if it did not evaluate to True during any of the loop iterations?

ok i think i get it, correct me if i’m wrong please.
what you are saying is that it prints “1” because once it finds that there is one slice of pizza that costs 2 euros, it stops. right?




 code5132969222:

… once it finds that there is one slice of pizza that costs 2 euros, it stops. right?


Yes, if during any iteration of the for loop, the condition in the if block header becomes True, the code within the if block executes. Accordingly, the value of count increases to 1. Then the return statement executes, which returns that value and terminates execution of the two_euro_slices function.
What happens if none of the pizza slices have a price of €2? In that case, the value 2 does not appear in the pizzas_by_price list at all, and the returned value should be 0. However, the for loop executes all of its iterations, going through the entire list, without the if block condition’s ever evaluating to True. After the loop has completed all of its iterations, the value of count is still 0, which is fine, but there is no return statement after the loop. Control reaches the end of the function’s statements, and by default, None is returned. With there being no €2 slices, 0 would be more appropriate as a returned value.
The first of the two versions of your function produces a correct result , provided that appropriate arguments are passed to it. In fact, since the name of the function reveals that it was specifically written for the purpose of counting €2 slices, the second argument would presumably always be 2. On that basis, the second parameter, two_euro_pizza, should be eliminated to simplify the function, as follows:
def two_euro_slices(pizzas_by_price):
  count = 0
  for type_of_pizza, price in pizzas_by_price:
    if price == 2:
      count +=1
  return count

You could, instead, rename the original version of the function, so that it is appropriate for counting pizzas of whatever price is passed to it as the second argument.




 code5132969222:

ok i think i get it, correct me if i’m wrong please.
what you are saying is that it prints “1” because once it finds that there is one slice of pizza that costs 2 euros, it stops. right?


If you act as the computer, and execute the code, is that what happens? Or do you encounter something that you don’t know what it does?
The answer is already in the code, right? Or if not, then there’s something important in it to learn. Either way, read it.




 appylpye:

age_12_count =[age for name, age in friends].count(12)


What is [age for name, age in friends] doing? I am not able to comprehend this.




 covid19:

[age for name, age in friends]


In the unit on Lists and Dictionaries we cover the concept of comprehensions which are loop constructs contained in a data structure body. The loop above iterates over an object consisting of value pairs. The first value is given as a name, and the second as an age. Each pair is polled and the age value is appended to the list.
The resulting list will consist of only the ages, [12, 17, 12].
"
314,Why does counting start from 0?,"FAQ,Python FAQ",q-a,6,"
Question
Why does counting start from 0?
Answer
In short, just remember that almost all programming languages start counting from zero because it’s optimal.
A famous Dutch computer scientist, Edsger Dijkstra, gives a great mathematical explanation for this! It basically comes down to optimization, which is a common reason behind computer system design choices like this. Dijkstra says, “when starting with subscript 1, the subscript range 1 ≤ i < N+1; starting with 0, however, gives the nicer range 0 ≤  i < N,” in his paper called “Why numbering should start at zero.”
","
2 posts were split to a new topic: How to Print the Length of a String?

Dijkstra’s algorithm solves the single-source shortest path problem with non-negative edge weight.

AppleScript is one language I know that doesn’t start at “0” which messes with a lot of scripters. Then again, AppleScript is a scripting language not a code language.

For reference:

https://en.wikipedia.org/wiki/Zero-based_numbering.

The paper mentioned in the OP is discussed in that article along with exploration into other fields. A good read.

R isn’t zero-indexed either.
"
315,How can we tell if a value best represents the majority of the data?,"FAQ,Python FAQ",,3,"
Question
In the context of this exercise, how can we tell if a value best represents the majority of the data?
Answer
One possible way to do this is as follows:
First remove the outliers from the dataset.
After removing the outliers, the mean can then be calculated with the remaining values for a more accurate value representing the majority of the data.
Then, we can check whether either value is closer to this mean, and whichever is closer can be thought to better represent the majority of the data.
","
Out of the context of this exercise, would it be appropriate in some cases to just use the mean that’s been calculated after removing the outliers as the value to represent the majority of the data? Or would that not work because then I am technically working with a different dataset?

It really comes down to what you are asking the data to show you, in a real-life scenario. Generally speaking, both median and mean do not mean much without being accompanied by interquartile range or variance, respectively, to show how the data is distributed around these values. I am not a statistician but I am a researcher in STEM and use them a lot: you never see mean or median reported without the variance/standard deviation/SEM or IQR 
"
316,FAQ: Learn Python: Files - Reading a File,"FAQ,Python FAQ",,3,"

Community%20FAQs%20on%20Codecademy%20Exercises1000×208 141 KB

This community-built FAQ covers the “Reading a File” exercise from the lesson “Learn Python: Files”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Python 3
FAQs on the exercise Reading a File


Is it necessary to use with to open a file?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
A post was split to a new topic: What is the text1 file for?

2 posts were split to a new topic: Is it necessary to use with to open a file?
"
317,How to handle that a start and end in the wrong order?,"FAQ,Python FAQ","q-a,strings",15,"
How should our function handle other cases, like where the “start” character appears after the “end character”?
For example, should this code:
substring_between_letters(word = ""adogb"", start  = ""b"", end = ""a"")

return “dog”, or simply return the word “adogb”
Another case is if the two arguments appear in the proper order, but only after they appear in the wrong order, like
substring_between_letters(word = ""adogbruna"", start = ""b"", end = ""a""

Should this print “dog”, “run”, or the word?
","

 Substring Between




 erinlaura:

“adogbruna”, start = “b”, end = “a”


print (substring_between_letters(""adogbruna"", ""b"", ""a""))
# adogbruna
print (substring_between_letters(""dogbruna"", ""b"", ""a""))
# run

The first example returns the full word because a comes before b, and we cannot have the end at the beginning.
The second example we remove the starting a, and get the result we expect since a is at the end, and b does precede it.
Similarly, your first example should also return the full word. Switch the a and b around and it will return dog.

def substring_between_letters(word, start, end):
    start = word.find(start)
    end = word.find(end)
    if start and end != -1:
        #print(word[start + 1 : end])
        return word[start + 1: end]
    else:
        return word



One issue I see with that approach is when start and end are the same letters.
substring_between_letters('mountain','n','n')

The return is ''

Played around with the code to work past this issue…
def substring_between_letters(word, start, end):
   before = word.find(start) + 1
   if before == 0:
     return word
   after = word[before:].find(end)
   if after == -1:
     return word
   return word[before : after + before]

print (substring_between_letters('mountain','n','n'))    # tai


what is wrong with my code?
keep present this message, but the parameters are exactly the same

螢幕快照 2019-09-04 上午10.52.34.png1440×665 96.4 KB


I asked about this in support but they told me to go to forums, sooooo…Bump!

Presumably the function crashes (can’t see it all) and presumably the error message is testing for one thing, but reports something else. So both your code and codecademy’s code each has a bug.
specifically the test contains this code:
except TypeError:
  fail_tests(""Your function should accept a parameter `word` and parameters `start` and `end`"")

which is suggesting that a TypeError means that there are missing parameters … no it doesn’t, and function parameters can be inspected so there is no reason to do something this crude.

When starting this exercise i though but if there’s something like this:

substring_between_letters(“applee”, “p”, “e”)

It might end up printing “pl” instead of “ple” if i will use word.find(end) because it will return the first index of “end” in “word”
So I ended up doing like this:
def substring_between_letters(word, start, end):
  if start in word:
    start_index = word.find(start)
    if end in word:
      for i in range(len(word)):
        if end == word[i]:
          end_index = i
      new_word = word[start_index+1:end_index]
      return new_word
    else:
      return word
  else:
    return word

this part loops through letters in “word” and saves the last index of a letter that is equal to the letter of “end”.
      for i in range(len(word)):
        if end == word[i]:
          end_index = i

hope this will be useful as a different approach for others.

This should handle:


Start and End in a wrong order


Start and End are the same letters




gist.github.com


https://gist.github.com/Slyfoxnick/3c193ad7dacc6e4eb941e1face209e9c
substring_between.py
# Write your substring_between_letters function here:
def substring_between_letters(word, start, end):
  if start == end and word.find(start) != -1:
    start = word.find(start) + 1
    end = word.find(end, start)
    return word[start:end]
  
  start = word.find(start) + 1
  end = word.find(end)
  
This file has been truncated. show original








What about searching for start in word, then cutting out the word for what is left after the start, only then searching for ending in what is left
def substring_between_letters(word, start, end):
  startIndex = word.find(start)
  if startIndex == -1:
    return word
  endIndex = word[startIndex + 1:].find(end)
  if endIndex == -1:
    return word
  return word[startIndex + 1: startIndex + 1 + endIndex] 


when I try something like example one, it always returns nothing instead of the full word. Why is that so? I am a bit confused now. Help would be greatly appreciated! .)

Please share what code you are running for us to see. Thanks.

So, if I use this code:
def random_funtion(string, start, end):
index_start = string.find(start)
index_end = string.find(end)
if index_start or index_end == -1:
return string
return string[index_start + 1:index_end]
print(random_funtion(“adogbhjam”, “b”, “a”))
–> it returns the original string but I don’t get why because neither of the indexes is == -1 .
index_start is 4 and index_end is 0.
–> if I delete the if condition, then it just returns nothing




 king-elessar:

if index_start or index_end == -1:


We need to make the same comparison in the first operand as second one.

got it. thank you 
"
318,How can I add an item to the beginning of a list?,"FAQ,Python FAQ",,6,"
Question
How can I add an item to the beginning of a list?
Answer
We learned about a function called insert() that accepts 2 arguments: the position to insert at and the value to insert. If we had a list called my_list that contained the list [1, 2, 3, 4] and we used my_list.insert(0, 5), the resulting list would be [5, 1, 2, 3, 4]. This is because the 0th index is the beginning of the list!
","
What’s the different between inserting in to and appending a list?

With lists you can do certain things with great efficiency:  access an item by its index, change the value of an item at a certain index, and add or remove an item at the end of the list.
Even as a beginner, imagine a list as a series of consecutive memory locations.  You can suppose that, knowing the first address and calling it index zero,  it would be fairly easy to go straight to any index and read or change the value that is stored there, and to add a value to the end of the list.
But what if you wanted to insert an item into the middle of the list?  You’d need to write code to take every item to the “right” of the insertion point, move it over, and give it new address.  It’s the same with remove(), or pop() with any index but the last.
That’s why we say that lst.insert() requires more overhead than lst.append().

So you would insert to every index in a list apart from after the last used index, where you .append a new index?
…why didn’t they just make it all inserting? There must be a reason for this later? Or is it just a historic thing that will get amended in a new version of Python?




 cssace22059:

So you would insert to every index in a list apart from after the last used index, where you .append a new index?


Yes, and using insert would consume much more time than using append.  (Remember that lists can have millions of elements.)



 cssace22059:

…why didn’t they just make it all inserting? There must be a reason for this later? Or is it just a historic thing that will get amended in a new version of Python?


It seems to me to be perfectly logical to have a few methods - append(), default pop(), and identifying an element by its index: lst[idx] - that leverage the strengths of the list structure, while also having others, such as insert(), remove() and pop() from anywhere but the end that perform tasks you might need done, but at a greater cost.

Appending is like tossing a piece of paper on top of a pile. Inserting is like lifting up certain papers to set the paper between two other papers. If you insert, you need to know where the paper is going in the stack.
Imagine you have a stack of 100 papers, with the bottom paper being in position “0.” You have an extra paper, and you add it to the top. Then you tell your personal assistant to go get paper 52 out of the stack. If you had instead ‘inserted’ the new paper somewhere in the middle of the stack, your assistant might go get the paper in position 52 and it isn’t the paper you wanted anymore, because there was just an extra paper inserted at, say, position 20. Now the paper you thought was at position 52 is now at position 53. Chaos!
If you wanted to ‘insert’ the paper at the top of the stack (to avoid disturbing the order of the existing papers), you could either use append, and python places it on the top of the pile, OR you could use insert, but then you would also need to know how many papers are in your stack, because insert must have two pieces of information – what to insert and where to insert it.
"
319,FAQ: Learn Python: Python Lists and Dictionaries - List Slicing,"FAQ,Python FAQ",,2,"

Community FAQs on Codecademy Python Exercises.png1000×208 141 KB

This community-built FAQ covers the “List Slicing” exercise in Codecademy’s lessons on Python.
FAQs for the Codecademy Python exercise List Slicing:

What indexes do I use to access the elements I want?

Join the Discussion. We Want to Hear From You!
Have a new question or can answer someone else’s?  Reply () to an existing thread!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources about Python in general? Go here!
Want to take the conversation in a totally different direction? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account, billing, Pro, or Pro Intensive? Reach out to our support team!
None of the above?  Find out where to ask other questions here!
","
Other FAQs
The following are links to additional questions that our community has asked about this exercise:

This list will contain other frequently asked questions that aren’t quite as popular as the ones above.
Currently there have not been enough questions asked and answered about this exercise to populate this FAQ section.
This FAQ is built and maintained by you, the Codecademy community – help yourself and other learners like you by contributing!

Not seeing your question?  It may still have been asked before – try () in the top-right of this page.  Still can’t find it?  Ask it below by hitting the reply button below this post ().
"
320,How am I supposed to check the value of answer?,"FAQ,Python FAQ",,25,"
Question
How am I supposed to check the value of answer?
Answer
answer is a variable that we’re able to use because it’s provided to the function when the function is used. You’ll learn about the syntax of functions in due time, but you already know how to use variables!
It’s totally fine that we don’t know the value of answer ahead of time - that’s what makes functions so useful and reusable!
If we wanted to check if answer was equal to 5, we could write if answer == 5:. All we need to do, then, is compare answer to 5 using the operators we’ve learned about so far for greater and less than.
If we had a separate but similar problem where we had a function that was given a variable called targets_hit and wanted to check for two different values to assign an accuracy rating, we might do that like this:
def accuracy_rating(targets_hit):
    if targets_hit > 90:
        return ""Super accurate!""
    elif targets_hit < 60:
        return ""Work on your aim!""
    else:
        return ""Aw, shux.""

Even though we have no idea what the value of targets_hit is beforehand, we can still write our conditions because we do know what we want the value to be for certain responses.
","
can anyone explain to me why does the answer is -1, 0, and 1?

Could you provide the link/url to exercise? Then i can write a better answer

Hi! this is the link
https://www.codecademy.com/courses/learn-python/lessons/conditionals--control-flow/exercises/i-got--problems-but-a-switch-aint-one?modal=pro-trial-welcome

I think this is the exercise:
https://www.codecademy.com/courses/learn-python/lessons/conditionals--control-flow/exercises/i-got--problems-but-a-switch-aint-one?action=resume_content_item&modal=pro-trial-welcome

the arguments at function call:
# function calls with different arguments (4, 5 and 6)
print greater_less_equal_5(4)
print greater_less_equal_5(5)
print greater_less_equal_5(6)

are passed to the parameter:
# defining a function with answer parameter
def greater_less_equal_5(answer):

so for the first function call, we have answer = 4, which will return -1 (elif), given 4 is lesser then 5.

I don’t think its a logical answer, as in a mathematical answer or one based in reason, its just what they used. It could have been A, B, and C if they wanted to…

Can you please explain me in detail how -1, 0 and 1 are being displayed in the console?

they are the values returned by the function.
if you think away the function:

answer = 4
if answer > 5:
  print 1
elif answer < 5:
  print -1
else:
  print 0

does the 1, -1 and 0 make sense then? The great thing about the function is that we don’t have to copy and paste the condition twice

What are some common uses of elif?

if you need to check for multiple conditions, elif is very useful

You need to pay attention to this lines of code:
print greater_less_equal_5(4)
print greater_less_equal_5(5)
print greater_less_equal_5(6)
Firstly, instead of the value of the variable answer, a numeric value is inserted. In this case we have 4, 5, 6.
Secondly, the condition is checked.
For example:
if 4 > 5:
return 1
elif 4 < 5:
return -1
The first condition is not true (4>5), so the program output true result  (-1).
The following steps are the same.

I am trying to take user input of a no. and then trying it to compare with set function. But it is not giving me desired result. Where am I going wrong?? If user Enters -6 then the result should be -1.But its showing 1.
I have used answer as variable.

Screenshot 2019-08-24 at 5.49.39 PM.png868×346 27 KB


what data type does raw_input() give back?

It’s because raw_input() returns the input as a string, I think.
Would using input() work?
(Just checked, it does:)
""One difference between input() and raw_input(). a = input() will take the user input and put it in the correct type. Eg: if user types 5 then the value in a is integer 5. a = raw_input() will take the user input and put it as a string. Eg: if user types 5 then the value in a is string ‘5’ and not an integer. ""
https://stackoverflow.com/questions/954834/how-do-i-use-raw-input-in-python-3
https://docs.python.org/3/whatsnew/3.0.html

using input() in python 2 is a horrible idea. You know now why input() put the “correct” type? Because it evaluates the entered data as code. Thus people can inject code into your program. That does not sound like a good idea
there are better and safer ways to do this.

I didn’t realize that the post I replied to specified python 2 which is why my links were in reference to python 3. Thanks for the input.
If they had specified python 2, my answer would have been different.
If it was stated earlier, I must have missed it.
EDIT raw_input() has been renamed input() in python 3(for anyone who’s reading along:P)




 jeremylessard4661188:

EDIT raw_input() has been renamed input() in python 3(for anyone who’s reading along:P)


But in python3, input() produces a string as well:

which is why i assumed your answer was for python2.

Makes sense. Thanks.
EDIT tbh I forgot there was a mismatch of versions between the tutorial editor and the version I’m using locally.
I was just killing time with the tutorial to get some python practice. Thanks for pointing it out.
Not that the title(Python 2) wasn’t a big enough hint.




 wiki-bot:

def accuracy_rating(targets_hit):
    if targets_hit > 90:
        return ""Super accurate!""
    elif targets_hit < 60:
        return ""Work on your aim!""
    else:
        return ""Aw, shux.""



print(accuracy_rating(59))      # 59 targets hit - Work on your aim!
print(accuracy_rating(89))      # 89 targets hit - Aw, shux.
What a rigged game you have there, LOL!
I believe this would give some better results? 
def accuracy_rating_2(targets_hit):
    if targets_hit >= 90:
        return ""Super accurate!""
    elif targets_hit < 90 and targets_hit >= 60:
        return ""Work on your aim!""
    else:
        return ""Aw, shux.""

print(accuracy_rating_2(59))      # 59 targets hit - Aw, shux.
print(accuracy_rating_2(89))      # 89 targets hit - Work on your aim!
"
321,Do I need to write another for loop to print and calculate the total?,"FAQ,Python FAQ",,10,"
Question
Do I need to write another for loop to print and calculate the total?
Answer
This step can actually be done either way! If you want to print and calculate the total inside of the loop you’ve already made, that works (assuming you do it correctly). If you want to make a new loop and keep it all separate, that works as well!
","
2 posts were split to a new topic: Calculating Total Within a Loop

2 posts were split to a new topic: Loop Prints 117 as “Total”, But Not Getting Passed

Why does it print the items in the dictionary out of order? I’m really confused about that. It becomes difficult to keep tracking.

Is it possible to browse the lists of 02 different dictionaries when they have different keys?
For example :
text1 = {
‘1’ : ['The banana is ','The tomatoes are ',‘Too much’],
‘2’ : [‘a’,‘b’,‘c’]
}
text2 = {
‘a’ : [“Yellow”,“red”,“Rice”],
‘b’ : [1,2,3]
}
I would like to display :
The banana is Yellow, The tomatoes are Red, Too much Rice
a1, b2, c3

There are lots of ways, but this one strikes me as simple and straight forward…
>>> text1 = {
'1' : ['The banana is','The tomatoes are','Too much'],
'2' : ['a','b','c']
}
>>> text2 = {
'a' : [""Yellow"",""Red"",""Rice""],
'b' : [1,2,3]
}
>>> paired_values = list(zip(text1['1'], text2['a']))
>>> for x in paired_values:
    print (""{object} {adjective}"".format(object = x[0], adjective = x[1]))

	
The banana is Yellow
The tomatoes are Red
Too much Rice
>>> 


I have the same question.
the order is : banana apple orange pear
and the print is  : orange pear banana apple
it’s not alphabetic order, price order or quantity order.
no sort in code.
what the matter ?

Python 2 dict objects are not ordered since they do not keep track of insertion order. There is nothing the matter. It’s how it is. Once you begin to work with Python 3 this is one thing you will see has changed (as of 3.6, if I’m not mistaken)

It would be wonderful if they didn’t talk in riddles in the instructions. They way they say things make you think one thing is needed to be done then it turns out something else is needed to be done. Another for loop is a good example. Also, they didn’t give you freedom at the start now it’s like you’re sitting here wondering will you get it wrong if you add something you thought of.

text1 = {
‘1’ : [‘The banana is’,‘The tomatoes are’,‘Too much’],
‘2’ : [‘a’,‘b’,‘c’]
}
text2 = {
‘a’ : [“Yellow”,“Red”,“Rice”],
‘b’ : [1,2,3]}
for i in range(len(text1[‘1’])):
print(text1[‘1’][i]+’ '+text2[‘a’][i])
The banana is Yellow
The tomatoes are Red
Too much Rice
"
322,How does the stride work in list slicing?,"FAQ,Python FAQ",,10,"
Question
How does the stride work in list slicing?
Answer
When we want a slice of a list, we can specify the start, end, and stride. The stride is 1 by default and will go through each number in the range. If you change the number, then that’s by how many it’ll change each time. Take a look at the example below for a better understanding:
my_name = “BobbyTarantino”

print my_name[::1]  #BobbyTarantino
print my_name[::-1 ]#onitnaraTybboB

print my_name[::2]  #Bbyaatn
print my_name[::-2] #oinrTbo

","
l = [i ** 2 for i in range(1, 11)]
# Should be [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

print l[2:9:2]

With the above code, the start point is 2 and ends at 9 with a stride of 2 ( thats if am right)
But when run this code the outcome is as shown below
[9, 25, 49, 81]
[9, 25, 49, 81]
[9, 25, 49, 81]
[9, 25, 49, 81]
[9, 25, 49, 81]

Can someone help explain the logic and  syntax flow for me Please!!!
Am a bit thrown off

@iamstyles The reason it’s printing the result 5 times is probably because each check the SCT (Submission Correctness Test) makes re-runs your code. If you run it in a Python console locally, it’ll only print the list once.

@iamstyles The default starting index is 0, that means it starts at index 2 inclusive which has a value of 9, it ends at index 9 exclusive (-> index 8 inclusive) which has a value of 81, with a stride of 2 which refer to index 4 and 6 having 25 and 49 as values. The result should normally be displayed in 1 line only.

Even i don’t understand it. why does it print "" [9, 25, 49, 81] "" and not "" [1, 9, 25, 49, 81] "" ? Please tell me if u find the ans.




 arc3635827632:

why does it print "" [9, 25, 49, 81]


print l[2:9:2]

That’s why. It computes correctly, but the print statement is a slice that excludes the 1.

The console prints [9, 25, 49, 81] because these are the values that correspond to the output for the slice chosen (l[2:9:2]).
As the start point is inclusive, l[2] would refer to position 2 in range(1, 11). Position 0 is 1, position 1 is 2, so position 2 should be 3. This is why the output starts at 9 (or 3**2).

I see why the peeps are getting confused. Look at the below and tell me where does it say it refers to an index? Actually there is no such a word there other than the last sentence and half that “explains” how it works.
Where  start  describes where the slice starts (inclusive),  end  is where it ends (exclusive), and  stride  describes the space between items in the sliced list. For example, a stride of  2  would select every other item from the original list to place in the sliced list.
I was confused with this too until I read paul_catarig comment that pointed out the fact that is referring to a position rather than “every other” or “space between items”.
These descriptions/ terminologies could be a bit more specific.

Too many learners are complaining that they do not know what an index is. How is it then that they understand range()? Why would anyone simply refuse to search for concepts only to complain in the forums of CC’s shortcomings? Who is the one responsible for our education?

I think you misunderstand what I was trying to say back there. Besides Im not complaining as you assumed it wrongly. I had my objection there which is completely valid since anyone on this page can add any sort of objection.
With all due respect, where did you get these assumptions from?
To answer your questions, (which was probably rhetorical) the “They” is unknown for me but Im trying to learn here the whole concept of coding etc… Me personally, I have chosen Codecademy  because I was told "" this is the best site"". I don’t refuse to learn elsewhere nor I refuse to “search other concepts”. Please read my comment again regarding the “index” stuff, Im not dissing the site, nor you nor anyone but making  suggestion, that is all.
Have a good day and take care of yourself.
"
323,When should I create a new method vs placing it in init?,"FAQ,Python FAQ",q-a,3,"
When do you create a new method and when do you put it in the __init__? I understand that if it’s a long method it’s better but when you can return it in a single function is there any reason why we would make more methods? I think this looks a lot cleaner:

 class Diameter():
    pi = 3.14159
    def __init__(self, diameter):
        self.radius = diameter/2
        self.area = Diameter.pi * self.radius ** 2
        self.circumference = Diameter.pi * self.radius * 2

        
pizza = Diameter(12)

print(f""Pizza radius: {pizza.radius}"")
print(f""Pizza area: {pizza.area}"")
print(f""Pizza circumference: {pizza.circumference}"")

","
__init__() is called when you instantiate a class:
Diameter() # create class instance which will trigger the init method

separation of concerns, easier to test.
also, what if you change the diameter:
class Diameter():
    pi = 3.14159
    def __init__(self, diameter):
        self.radius = diameter/2
        self.area = Diameter.pi * self.radius ** 2
        self.circumference = Diameter.pi * self.radius * 2

        
pizza = Diameter(12)

print(f""Pizza radius: {pizza.radius}"")
print(f""Pizza area: {pizza.area}"")
print(f""Pizza circumference: {pizza.circumference}"")

pizza.radius = 500

print(f""Pizza radius: {pizza.radius}"")
print(f""Pizza area: {pizza.area}"")
print(f""Pizza circumference: {pizza.circumference}"")

then you have a bug. instance properties can change, thus you can’t rely on the fact that you can instantiate a class once and that everything will stay the same, so you can’t push everything in the init method

Thank you, you made it very clear!
"
324,What do parenthesis do when calling classes and methods?,"FAQ,Python FAQ","classes,q-a",12,"
What is happening under the hood to lead to very different outputs when calling a method with the parentheses in different places?
In other words, why does a return the string and d a TypeError?
class Rules:
  def washing_brushes(self):
    return ""Point bristles towards the basin while washing your brushes.""

a = Rules().washing_brushes()
b = Rules.washing_brushes
c = Rules().washing_brushes 
d = Rules.washing_brushes()


Where a, b, c, and d return, respectively:
Point bristles towards the basin while washing your brushes.
<function Rules.washing_brushes at 0x7f0b76032d08>
<bound method Rules.washing_brushes of <__main__.Rules object at 0x7f0b76082f98>>
TypeError: washing_brushes() missing 1 required positional argument: 'self'

","
That’s not very under-the-hood though is it?
An expression describes a value
so for example the expression
1

evaluates to 1
similarly, a function
f

evaluates to … f
What would you do with a function? Call it, presumably. You now have a different expression, you did something with f
f()

The result is whatever f returns, and f probably returned something other than itself (though it could, nothing stopping it from doing so)
So when you’re deciding whether or not to call something … did you want the thing itself, or its return value?
The dots in your expressions aren’t any different from your parenthesis, you could omit those as well, they too, are operations on values
x.something

asks x for its something attribute
x

doesn’t, that’s x itself
so, if you have some value, then, what operations does that support, and which operations do you want to do to it? you wouldn’t pick operations at random would you? or if you do, don’t expect a particularly meaningful outcome
you’ve got a class.
what would you like to do with it?
usually what you’d do with a class is to create an instance of it. for example:
an_empty_list = list()

calling a class results in an instance of it.
lists_class = list

so now you’ve got two values, list() and list … those are really different things.
you could ask for attributes from them
list().something
list.something

what attribute does a list have? what attributes does the list class have?
what makes sense to do with the list class’s append attribute, and what about a list instance’s append attribute?
if you call a list’s append attribute what’ll happen is that the value you provide is added to that list
but if you do the same with the list class, then what list would this add to? it wouldn’t, there’s no list, only the idea of list, a type

If you have a function that returns a list:
def f():
    return []

then f.append doesn’t seem like a great idea, f is a function, it doesn not have an append attribute
but you could call f, you would then have a list: f() and if you have a list then you could ask that list for its append attribute: f().append and if you had something you wanted to append to that list then… you could call it f().append(f)
f().append
f.append


Okay, I think I understand:


a returns the string because I have called (created an instance of) Rules, then called washing_brushes on Rules, which returns whatever the washing_brushes method within the class returns.


b returns Rules.washing_brushes itself because I haven’t called anything.


c returns something which is basically telling me there is a method within the instance of Rules named washing_brushes.


d throws a TypeError because I have tried to call a method on Rules itself. Because there is no instance of Rules in the expression, nothing is passed into washing_brushes’ self parameter.






 cloud5479553460:

c returns something which is basically telling me there is a method within the instance of Rules named washing_brushes .


you and I already did this.
functools.partial
stuff = list()  # []
bound_append = partial(list.append, stuff)  # stuff.append
bound_append(1)
print(stuff)  # [1]


And since I made the comparison between partial and method binding, I may as well show that functions can be used in a similar manner to classes - to create instances with fields and methods
Classes do this a bit more efficiently and provide nice things like iteration, indexing, calling, string conversion, operators … and you get a type for the value
from collections import namedtuple


def Counter():
    begin = 0

    def increment():
        nonlocal begin
        begin += 1

    def read():
        return begin

    # namedtuple provides attributes so that seems like an appropriate
    # representation, could be any container, including a function
    return namedtuple(""Counter"", [""increment"", ""read""])(increment, read)


c = Counter()
print(c.read())  # 0
c.increment()
c.increment()
c.increment()
print(c.read())  # 3


def Counter():
    begin = 0

    def increment():
        nonlocal begin
        begin += 1

    def read():
        return begin

    def get(msg):
        if msg == ""read"":
            return read
        if msg == ""increment"":
            return increment

    # just to show that a function can serve as a container/interface
    return get


c = Counter()
print(c(""read"")())  # 0
c(""increment"")()
c(""increment"")()
c(""increment"")()
print(c(""read"")())  # 3

One could also create the methods outside the function and bind them using partial similarly to a class… but those methods would no longer see the function scope, so one might want to use a container to store all the fields and provide this when binding a method

Following your example:
rules = Rules()
washing = partial(Rules.washing_brushes, rules)
print(washing)  # functools.partial(<function Rules.washing_brushes at 0x100e72950>, <__main__.Rules object at 0x100f65190>)
print(b) # <function Rules.washing_brushes at 0x100e72950>
print(c) # <bound method Rules.washing_brushes of <__main__.Rules object at 0x100e322d0>>

I thought washing and c would evaluate to the same thing because washing can also be expressed as Rules().washing_brushes. Why is there a difference?

If you call washing and c they’ll behave the same
There’s no reason why method binding would need to use partial, it probably shouldn’t. partial is a python function, but the binding is something that can be done in C code in the interpreter, it can likely do it far more efficiently and it likely wants to do some things specific to bound methods as well that partial doesn’t do
…So method binding is a highly specialized partial
Method binding is a language feature, while partial is just some function in a library, a toy in comparison, especially toy-like in python since python code doesn’t use it much

I read through all your explanation and could you please explain more about these :
functools.partial

stuff = list()  # []
bound_append = partial(list.append, stuff)  # stuff.append  #specially this line
bound_append(1)
print(stuff)  # [1]

And this :
from collections import namedtuple

return namedtuple(""Counter"", [""increment"", ""read""])(increment, read) #specially this line




“explain more” really tells me nothing at all about what you want to know. you’d have to phrase a question, dig out what you are looking for.

what this 2 line do
bound_append = partial(list.append, stuff)  # stuff.append  #specially this line

return namedtuple(""Counter"", [""increment"", ""read""])(increment, read) #specially this line





Take a look at namedtuple’s documentation I guess.
"
325,What is the difference between calling a variable with `self` or the `ClassName`?,"FAQ,Python FAQ",q-a,16,"
Hello, @mtf ! Sorry, if my question is stupid or if I’m missing something, I just wanna make sure I got it correctly. For the next example/exercise, we have this example [ Medthods with Arguments > https://www.codecademy.com/paths/computer-science/tracks/cspath-python-objects/modules/cspath-python-classes/lessons/data-types/exercises/methods-with-arguments]:
class DistanceConverter:
  kms_in_a_mile = 1.609
  def how_many_kms(self, miles):
    return miles * self.kms_in_a_mile

converter = DistanceConverter()
kms_in_5_miles = converter.how_many_kms(5)
print(kms_in_5_miles)
# prints ""8.045""


1.) Should we not have return self.miles * self.kms_in_a_mile?
1.1 - self.miles and DistanceConverter.miles are the same thing (since kms_in_a_mile is actually an attribute/class variable of the class DistanceConverter)?
2.) self.example is needed whenever we call elements outside the function/method but inside the class?
3.) Also, why is class DistanceConverter not having ()? (is this a special case/scenario…?)
Thank you a lot!
","



 byte3012796714:

Should we not have return self.miles * self.kms_in_a_mile ?


The miles parameter is not an instance variable, so no, it will not be written as self.miles. It is direct input to the method and not instantiated with the class.



 byte3012796714:

self.miles and DistanceConverter.miles are the same thing


In truth, neither of them exist. What does exist is the class method and class variable so this class does not need to instantiated.
kms_in_5_miles = DistanceConverter.how_many_kms(5)



self identifies the context object whether it is an instance or a direct call, as above.


When there is no inheritence from a super class, the parens are not required in Python 3.



Thank you a lot! @mtf , very explicit, extremely helpful 

In the example given , the class variable is called using self.variablename. But in the exercise while doing the problems when i did the same way it didnot accept it and said it has to be classname.variablename   please explain.

It depends upon what you want to do with your class variable. If it is just to be a constant like pi, you can access it either way, although I prefer using the Class_name.var style, since it is defined in the class namespace.
If you want it to be mutable, but evenly treated by every instance of the class, then also use Class_name.var. A good example of this is augmenting the variable by 1 every time there is a new instance, to keep track of how many instances are out there.
But, once you call the variable using self.var, that variable becomes an instance variable. Its name becomes  locked into the particular  instance that called the method. It is no longer a class variable as far as that instance is concerned
class Test_var:
    class_var = 10
    def method_1(self):
        Test_var.class_var += 5
    def method_2(self):
        self.class_var += 5
# Now instantiate two instances        
test_1 = Test_var()    # This one will only use method_1
test_2 = Test_var()    # This one will only use method_2

test_1.method_1()    # augments  Test_var.class_var by 5
print(""Test_var.class_var = {}\ntest_1.class_var = {}  \ntest_2.class_var = {}  \n*****"". format(Test_var.class_var, test_1.class_var, test_2.class_var))
test_2.method_2()    # augments  self.class_var by 5
    
print(""Test_var.class_var = {}\ntest_1.class_var = {}  \ntest_2.class_var = {}  \n"". format(Test_var.class_var, test_1.class_var, test_2.class_var))

Output:
Test_var.class_var = 15
test_1.class_var = 15  
test_2.class_var = 15  
*****
Test_var.class_var = 15
test_1.class_var = 15  
test_2.class_var = 20  

So instance test_1 augmented the class variable to 15, and then test_2 hijacked the variable name class_var and incremented it an additional 5, without any effect on the actual class variable.
If you wanted the class variable, for example,  to be an initial value of something for every instance,  something that would change as time progressed (like strength or health in a game character), this technique of using self with a class variable would work, but it would (IMHO) be more Pythonic to do that with __init__().

self.pi vs class.pi
My code returned an error even though the output seemed to be correct. I suspect it has something to do with the fact that I used self.pi instead of Circle.pi.
Can someone confirm this? The error was that the output for pizza_area did not equal 113.04.
Here is my code:
class Circle:
  pi = 3.14
  def area(self, radius):
    area = self.pi * radius **2 
    return area

circle  = Circle()


pizza_area = 12

teaching_table_area = 36

round_room_area = 11.460 

print(circle.area(pizza_area /2))

print(circle.area(teaching_table_area / 2))

print(circle.area(round_room_area / 2))



It will accept self.pi or Circle.pi (which I prefer). Your problem is this part of the instruction:
.

You go to measure several circles you happen to find around.

A medium pizza that is 12 inches across.
Your teaching table which is 36 inches across.
The Round Room auditorium, which is 11,460 inches across.


Compare with the values you have assigned.

Thank you @patrickd314  for the explanation of this particular issue. As a beginner I did not know any of that and it took me about 3 attempts to understand it so loads of kudos to you! 

class Circle():
  pi=3.14
  
  def area(self,radius):
    return Circle.pi*radius**2

my logical say it soppuse to be like:
class Circle():
  pi=3.14
  
  def area(self,radius):
    return self.pi*radius**2

and the website say its mistake…can somone explain why?

Nope, copy/pasted your code into the exercise & it doesn’t say there’s any mistake.
As per my understanding you can use either self or the class name, no probs.

this explanation in very good i think it should be part of lessons
why this code raise NameError:
class Store:
  exmp = 5
  def example():
    print(exmp)
    
Store.exmp()

and in functions inner functions have access to outer functions variables . given exmp of your self :
from collections import namedtuple


def Counter():
    begin = 0

    def increment():
        nonlocal begin
        begin += 1

    def read():
        return begin

    # namedtuple provides attributes so that seems like an appropriate
    # representation, could be any container, including a function
    return namedtuple(""Counter"", [""increment"", ""read""])(increment, read)


c = Counter()
print(c.read())  # 0
c.increment()
c.increment()
c.increment()
print(c.read())  # 3





 css7713845194:

class Store: exmp = 5 def example(): print(exmp) Store.exmp()


You are attempting to make a call on an integer. Store.exmp in your code is equal to 5. This should be a TypeError, rather than a NameError. A shorter example of this would be as follows-
test_val = 3()
I’m not sure what issue you have with the second section of code. Could you provide more details about what problem you are having with it?

when I delete this line :
return namedtuple(""Counter"", [""increment"", ""read""])(increment, read)

I get and error :
Traceback (most recent call last):
  File ""script.py"", line 16, in <module>
    print(c.read())  # 0
AttributeError: 'NoneType' object has no attribute 'read'

why this won’t work :
def Counter():
    begin = 0

    def increment():
        nonlocal begin
        begin += 1

    def read():
        return begin


c = Counter()
print(c.read())  # 0



Did you check the error itself?
What type is c in the altered code?




 css7713845194:

def Counter(): begin = 0 def increment(): nonlocal begin begin += 1 def read(): return begin c = Counter() print(c.read()) # 0


Traceback (most recent call last):
  File ""script.py"", line 13, in <module>
    print(c.read())  # 0
AttributeError: 'NoneType' object has no attribute 'read'

It wont print type © Only print this error

I’m not certain what you’re trying to do at this point, I assume you were just testing bits of code to see what happened so I phrased it as a question in the hope that you’d play around with it a bit. Your error occurs as your function has no return and therefore calling it will return the default, None.
There are very few things you can do with a None object, with good reason.
Are you sure you want to be using nested functions in the first place?
Hopefully that explains why your Error appears. If you have a specific issue with further code it would be best to send it to the python get-help section of the forums-
https://discuss.codecademy.com/c/get-help/python/
"
326,Why does SortedList not have a constructor?,"FAQ,Python FAQ",classes,5,"
Question
In this exercise, the SortedList class has no constructor. Why does it not need one?
Answer
The SortedList class inherits from the Python list class. The list class provides the implementation to store data. The SortedList class doesn’t need to change the storage of data only the way that the data is added, so SortedList objects will use the constructor from the parent list class and only provide an implementation for the append() method.
","
Even though it does not need a constructor, I still added one, (shown below) because if I did not, then when I tried to instantiate an object like some_list = SortedList([1,6,3,7]), I got an error about SortedList not taking any other arguments other than self. Hence the first two lines below. I then added a line self.sort() But then when I printed (some_list.list) I got the list unsorted so I had to use the thrid line which solved that problem.  I added the fourth line just to check.
def init(self, a_list):
self.list = a_list
self.list.sort()
print(self.list)

I created a constructor calling the super list constructor and adding sorting after it
def init(self, values):
super().init(values)
self.sort()
s_list = SortedList([4, 1, 5])
print(s_list) # returns [1, 4, 5]

class SortedList(list):
  def append(self, value):
    super().append(value)
    self.sort()
    
lst=SortedList([1,10,3,6,2,88,2,44,3,12])
lst.append(777)
print(lst)
#returns: [1, 2, 2, 3, 3, 6, 10, 12, 44, 88, 777]


Answer to following question:
When a  SortedList  gets initialized with unsorted values (say if you call  SortedList([4, 1, 5]) ) those values don’t get sorted! How would you change  SortedList  so that the list is sorted right after the object gets created?
class SortedList(list):
def init(self, list):
super().init(list)
self.sort()
def append(self, value):
super().append(value)
super().sort()
ls = SortedList([9,8,4])
print (ls)
"
327,What is the difference between a `class` and `type`?,"FAQ,Python FAQ","classes,q-a",3,"
@ionatan i’m sorry for taking your time but  may you explain the difference between "" class "" and "" object "" in python ?
","
All values are objects. Value and object is for most purposes synonymous in python.
Objects are instances of types. 5 is an instance of int
A class defines a type.

@ionatan
Thank you, sir
"
328,What are the different modes a file can be opened with?,"FAQ,Python FAQ",q-a,2,"
Question
What are the different modes a file can be opened with?
Answer
Python’s open() function is capable of opening a file with several different mode options, which come in handy for different use cases! Below is a list of all the modes available, as seen on the documentation page:

image.png1538×610 54.3 KB

","
What does “truncating” mean? What’s the purpose and how is it used?
"
329,How is this different from import math?,"FAQ,Python FAQ",q-a,4,"
Question
How is this different from import math?
Answer
When we just use import math, we are only telling Python to import the math module, not necessarily all of the functions inside of it.
This is not the case when we use from math import *. Now we’re saying to go into the module and import all of the functions possible, allowing us to use them all without needing to type math.function_name().
This can feel like it’s saving you time and effort, but be careful! As you’ll see in the next exercises, it can cause headache as well. What if you import a module’s entire function set and one of them has the same name as  a function you’ve defined? This can cause tricky bugs because it won’t cause an error, it will simply behave in unexpected ways because you’ll have a hard time realizing which function with the same name is being used. Therefore it’s typically safer to import the functions you need, or just to stick with using the module prefix.
","



 wiki-bot:

When we just use import math , we are only telling Python to import the math module, not necessarily all of the functions inside of it.


So what will we be importing this way if functions are not imported?

The math module itself still contains definitions of functions etc.
So using “import math” if we wanted to use the sin() function of the math module it would be called in code using
math.sin()
If we used “from math import *” it could be called using
sin()
As described above, from {modulename} import * should generally be avoided. An example would be if you imported all the functions of the math module and then imported all the functions of the numpy module (a well known 3rd party library for mathmetical operations; particularly arrays, matrices and scientific mathematics). Some of the functions from math would then be overwritten, potentially introducing bugs.
You can avoid issues like this by importing the module and only using functions from the module name, e.g. the following prevents sin() being overwritten and generally makes it easier for anyone else reading your code to work out what function is being used-

import math
import numpy as np
math.sin()
np.sin()

For math and numpy it’s best to use one or other anyway. Stick with math unless you have a good reason not to.

Alright. As far as I understand, that way we are importing part of the module that we need, and avoiding bringing along the unnecessary stuff.
"
330,How can we tell if a value best represents the majority of the data?,"FAQ,Python FAQ",,3,"
Question
In the context of this exercise, how can we tell if a value best represents the majority of the data?
Answer
One possible way to do this is as follows:
First remove the outliers from the dataset.
After removing the outliers, the mean can then be calculated with the remaining values for a more accurate value representing the majority of the data.
Then, we can check whether either value is closer to this mean, and whichever is closer can be thought to better represent the majority of the data.
","
Out of the context of this exercise, would it be appropriate in some cases to just use the mean that’s been calculated after removing the outliers as the value to represent the majority of the data? Or would that not work because then I am technically working with a different dataset?

It really comes down to what you are asking the data to show you, in a real-life scenario. Generally speaking, both median and mean do not mean much without being accompanied by interquartile range or variance, respectively, to show how the data is distributed around these values. I am not a statistician but I am a researcher in STEM and use them a lot: you never see mean or median reported without the variance/standard deviation/SEM or IQR 
"
331,Why does counting start from 0?,"FAQ,Python FAQ",q-a,6,"
Question
Why does counting start from 0?
Answer
In short, just remember that almost all programming languages start counting from zero because it’s optimal.
A famous Dutch computer scientist, Edsger Dijkstra, gives a great mathematical explanation for this! It basically comes down to optimization, which is a common reason behind computer system design choices like this. Dijkstra says, “when starting with subscript 1, the subscript range 1 ≤ i < N+1; starting with 0, however, gives the nicer range 0 ≤  i < N,” in his paper called “Why numbering should start at zero.”
","
2 posts were split to a new topic: How to Print the Length of a String?

Dijkstra’s algorithm solves the single-source shortest path problem with non-negative edge weight.

AppleScript is one language I know that doesn’t start at “0” which messes with a lot of scripters. Then again, AppleScript is a scripting language not a code language.

For reference:

https://en.wikipedia.org/wiki/Zero-based_numbering.

The paper mentioned in the OP is discussed in that article along with exploration into other fields. A good read.

R isn’t zero-indexed either.
"
332,How can I add an item to the beginning of a list?,"FAQ,Python FAQ",,6,"
Question
How can I add an item to the beginning of a list?
Answer
We learned about a function called insert() that accepts 2 arguments: the position to insert at and the value to insert. If we had a list called my_list that contained the list [1, 2, 3, 4] and we used my_list.insert(0, 5), the resulting list would be [5, 1, 2, 3, 4]. This is because the 0th index is the beginning of the list!
","
What’s the different between inserting in to and appending a list?

With lists you can do certain things with great efficiency:  access an item by its index, change the value of an item at a certain index, and add or remove an item at the end of the list.
Even as a beginner, imagine a list as a series of consecutive memory locations.  You can suppose that, knowing the first address and calling it index zero,  it would be fairly easy to go straight to any index and read or change the value that is stored there, and to add a value to the end of the list.
But what if you wanted to insert an item into the middle of the list?  You’d need to write code to take every item to the “right” of the insertion point, move it over, and give it new address.  It’s the same with remove(), or pop() with any index but the last.
That’s why we say that lst.insert() requires more overhead than lst.append().

So you would insert to every index in a list apart from after the last used index, where you .append a new index?
…why didn’t they just make it all inserting? There must be a reason for this later? Or is it just a historic thing that will get amended in a new version of Python?




 cssace22059:

So you would insert to every index in a list apart from after the last used index, where you .append a new index?


Yes, and using insert would consume much more time than using append.  (Remember that lists can have millions of elements.)



 cssace22059:

…why didn’t they just make it all inserting? There must be a reason for this later? Or is it just a historic thing that will get amended in a new version of Python?


It seems to me to be perfectly logical to have a few methods - append(), default pop(), and identifying an element by its index: lst[idx] - that leverage the strengths of the list structure, while also having others, such as insert(), remove() and pop() from anywhere but the end that perform tasks you might need done, but at a greater cost.

Appending is like tossing a piece of paper on top of a pile. Inserting is like lifting up certain papers to set the paper between two other papers. If you insert, you need to know where the paper is going in the stack.
Imagine you have a stack of 100 papers, with the bottom paper being in position “0.” You have an extra paper, and you add it to the top. Then you tell your personal assistant to go get paper 52 out of the stack. If you had instead ‘inserted’ the new paper somewhere in the middle of the stack, your assistant might go get the paper in position 52 and it isn’t the paper you wanted anymore, because there was just an extra paper inserted at, say, position 20. Now the paper you thought was at position 52 is now at position 53. Chaos!
If you wanted to ‘insert’ the paper at the top of the stack (to avoid disturbing the order of the existing papers), you could either use append, and python places it on the top of the pile, OR you could use insert, but then you would also need to know how many papers are in your stack, because insert must have two pieces of information – what to insert and where to insert it.
"
333,How am I supposed to check the value of answer?,"FAQ,Python FAQ",,25,"
Question
How am I supposed to check the value of answer?
Answer
answer is a variable that we’re able to use because it’s provided to the function when the function is used. You’ll learn about the syntax of functions in due time, but you already know how to use variables!
It’s totally fine that we don’t know the value of answer ahead of time - that’s what makes functions so useful and reusable!
If we wanted to check if answer was equal to 5, we could write if answer == 5:. All we need to do, then, is compare answer to 5 using the operators we’ve learned about so far for greater and less than.
If we had a separate but similar problem where we had a function that was given a variable called targets_hit and wanted to check for two different values to assign an accuracy rating, we might do that like this:
def accuracy_rating(targets_hit):
    if targets_hit > 90:
        return ""Super accurate!""
    elif targets_hit < 60:
        return ""Work on your aim!""
    else:
        return ""Aw, shux.""

Even though we have no idea what the value of targets_hit is beforehand, we can still write our conditions because we do know what we want the value to be for certain responses.
","
can anyone explain to me why does the answer is -1, 0, and 1?

Could you provide the link/url to exercise? Then i can write a better answer

Hi! this is the link
https://www.codecademy.com/courses/learn-python/lessons/conditionals--control-flow/exercises/i-got--problems-but-a-switch-aint-one?modal=pro-trial-welcome

I think this is the exercise:
https://www.codecademy.com/courses/learn-python/lessons/conditionals--control-flow/exercises/i-got--problems-but-a-switch-aint-one?action=resume_content_item&modal=pro-trial-welcome

the arguments at function call:
# function calls with different arguments (4, 5 and 6)
print greater_less_equal_5(4)
print greater_less_equal_5(5)
print greater_less_equal_5(6)

are passed to the parameter:
# defining a function with answer parameter
def greater_less_equal_5(answer):

so for the first function call, we have answer = 4, which will return -1 (elif), given 4 is lesser then 5.

I don’t think its a logical answer, as in a mathematical answer or one based in reason, its just what they used. It could have been A, B, and C if they wanted to…

Can you please explain me in detail how -1, 0 and 1 are being displayed in the console?

they are the values returned by the function.
if you think away the function:

answer = 4
if answer > 5:
  print 1
elif answer < 5:
  print -1
else:
  print 0

does the 1, -1 and 0 make sense then? The great thing about the function is that we don’t have to copy and paste the condition twice

What are some common uses of elif?

if you need to check for multiple conditions, elif is very useful

You need to pay attention to this lines of code:
print greater_less_equal_5(4)
print greater_less_equal_5(5)
print greater_less_equal_5(6)
Firstly, instead of the value of the variable answer, a numeric value is inserted. In this case we have 4, 5, 6.
Secondly, the condition is checked.
For example:
if 4 > 5:
return 1
elif 4 < 5:
return -1
The first condition is not true (4>5), so the program output true result  (-1).
The following steps are the same.

I am trying to take user input of a no. and then trying it to compare with set function. But it is not giving me desired result. Where am I going wrong?? If user Enters -6 then the result should be -1.But its showing 1.
I have used answer as variable.

Screenshot 2019-08-24 at 5.49.39 PM.png868×346 27 KB


what data type does raw_input() give back?

It’s because raw_input() returns the input as a string, I think.
Would using input() work?
(Just checked, it does:)
""One difference between input() and raw_input(). a = input() will take the user input and put it in the correct type. Eg: if user types 5 then the value in a is integer 5. a = raw_input() will take the user input and put it as a string. Eg: if user types 5 then the value in a is string ‘5’ and not an integer. ""
https://stackoverflow.com/questions/954834/how-do-i-use-raw-input-in-python-3
https://docs.python.org/3/whatsnew/3.0.html

using input() in python 2 is a horrible idea. You know now why input() put the “correct” type? Because it evaluates the entered data as code. Thus people can inject code into your program. That does not sound like a good idea
there are better and safer ways to do this.

I didn’t realize that the post I replied to specified python 2 which is why my links were in reference to python 3. Thanks for the input.
If they had specified python 2, my answer would have been different.
If it was stated earlier, I must have missed it.
EDIT raw_input() has been renamed input() in python 3(for anyone who’s reading along:P)




 jeremylessard4661188:

EDIT raw_input() has been renamed input() in python 3(for anyone who’s reading along:P)


But in python3, input() produces a string as well:

which is why i assumed your answer was for python2.

Makes sense. Thanks.
EDIT tbh I forgot there was a mismatch of versions between the tutorial editor and the version I’m using locally.
I was just killing time with the tutorial to get some python practice. Thanks for pointing it out.
Not that the title(Python 2) wasn’t a big enough hint.




 wiki-bot:

def accuracy_rating(targets_hit):
    if targets_hit > 90:
        return ""Super accurate!""
    elif targets_hit < 60:
        return ""Work on your aim!""
    else:
        return ""Aw, shux.""



print(accuracy_rating(59))      # 59 targets hit - Work on your aim!
print(accuracy_rating(89))      # 89 targets hit - Aw, shux.
What a rigged game you have there, LOL!
I believe this would give some better results? 
def accuracy_rating_2(targets_hit):
    if targets_hit >= 90:
        return ""Super accurate!""
    elif targets_hit < 90 and targets_hit >= 60:
        return ""Work on your aim!""
    else:
        return ""Aw, shux.""

print(accuracy_rating_2(59))      # 59 targets hit - Aw, shux.
print(accuracy_rating_2(89))      # 89 targets hit - Work on your aim!
"
334,How to handle that a start and end in the wrong order?,"FAQ,Python FAQ","q-a,strings",15,"
How should our function handle other cases, like where the “start” character appears after the “end character”?
For example, should this code:
substring_between_letters(word = ""adogb"", start  = ""b"", end = ""a"")

return “dog”, or simply return the word “adogb”
Another case is if the two arguments appear in the proper order, but only after they appear in the wrong order, like
substring_between_letters(word = ""adogbruna"", start = ""b"", end = ""a""

Should this print “dog”, “run”, or the word?
","

 Substring Between




 erinlaura:

“adogbruna”, start = “b”, end = “a”


print (substring_between_letters(""adogbruna"", ""b"", ""a""))
# adogbruna
print (substring_between_letters(""dogbruna"", ""b"", ""a""))
# run

The first example returns the full word because a comes before b, and we cannot have the end at the beginning.
The second example we remove the starting a, and get the result we expect since a is at the end, and b does precede it.
Similarly, your first example should also return the full word. Switch the a and b around and it will return dog.

def substring_between_letters(word, start, end):
    start = word.find(start)
    end = word.find(end)
    if start and end != -1:
        #print(word[start + 1 : end])
        return word[start + 1: end]
    else:
        return word



One issue I see with that approach is when start and end are the same letters.
substring_between_letters('mountain','n','n')

The return is ''

Played around with the code to work past this issue…
def substring_between_letters(word, start, end):
   before = word.find(start) + 1
   if before == 0:
     return word
   after = word[before:].find(end)
   if after == -1:
     return word
   return word[before : after + before]

print (substring_between_letters('mountain','n','n'))    # tai


what is wrong with my code?
keep present this message, but the parameters are exactly the same

螢幕快照 2019-09-04 上午10.52.34.png1440×665 96.4 KB


I asked about this in support but they told me to go to forums, sooooo…Bump!

Presumably the function crashes (can’t see it all) and presumably the error message is testing for one thing, but reports something else. So both your code and codecademy’s code each has a bug.
specifically the test contains this code:
except TypeError:
  fail_tests(""Your function should accept a parameter `word` and parameters `start` and `end`"")

which is suggesting that a TypeError means that there are missing parameters … no it doesn’t, and function parameters can be inspected so there is no reason to do something this crude.

When starting this exercise i though but if there’s something like this:

substring_between_letters(“applee”, “p”, “e”)

It might end up printing “pl” instead of “ple” if i will use word.find(end) because it will return the first index of “end” in “word”
So I ended up doing like this:
def substring_between_letters(word, start, end):
  if start in word:
    start_index = word.find(start)
    if end in word:
      for i in range(len(word)):
        if end == word[i]:
          end_index = i
      new_word = word[start_index+1:end_index]
      return new_word
    else:
      return word
  else:
    return word

this part loops through letters in “word” and saves the last index of a letter that is equal to the letter of “end”.
      for i in range(len(word)):
        if end == word[i]:
          end_index = i

hope this will be useful as a different approach for others.

This should handle:


Start and End in a wrong order


Start and End are the same letters




gist.github.com


https://gist.github.com/Slyfoxnick/3c193ad7dacc6e4eb941e1face209e9c
substring_between.py
# Write your substring_between_letters function here:
def substring_between_letters(word, start, end):
  if start == end and word.find(start) != -1:
    start = word.find(start) + 1
    end = word.find(end, start)
    return word[start:end]
  
  start = word.find(start) + 1
  end = word.find(end)
  
This file has been truncated. show original








What about searching for start in word, then cutting out the word for what is left after the start, only then searching for ending in what is left
def substring_between_letters(word, start, end):
  startIndex = word.find(start)
  if startIndex == -1:
    return word
  endIndex = word[startIndex + 1:].find(end)
  if endIndex == -1:
    return word
  return word[startIndex + 1: startIndex + 1 + endIndex] 


when I try something like example one, it always returns nothing instead of the full word. Why is that so? I am a bit confused now. Help would be greatly appreciated! .)

Please share what code you are running for us to see. Thanks.

So, if I use this code:
def random_funtion(string, start, end):
index_start = string.find(start)
index_end = string.find(end)
if index_start or index_end == -1:
return string
return string[index_start + 1:index_end]
print(random_funtion(“adogbhjam”, “b”, “a”))
–> it returns the original string but I don’t get why because neither of the indexes is == -1 .
index_start is 4 and index_end is 0.
–> if I delete the if condition, then it just returns nothing




 king-elessar:

if index_start or index_end == -1:


We need to make the same comparison in the first operand as second one.

got it. thank you 
"
335,What does return do?,"FAQ,Python FAQ",q-a,31,"
Question
What does return do?
Answer
It sounds silly, but return does literally what it says – it returns something to wherever the function was called in the program. If we consider the square() function in this exercise, for example, it does some calculation with the number given to the function as n, and then returns the final result called squared.
This allows us to do lots of useful things! When we return a value it can be stored in a variable for later use, or used on the spot, or any number of things. It basically makes your function call a usable value!
Take a look at the code below for an example:
def square(n):
  """"""Returns the square of a number.""""""
  squared = n ** 2
  return squared


my_number_squared = square(10)
print my_number_squared  # Prints 100 
print square(10)  # Also prints 100!

We not only used the returned value to store a value in a variable, but we also used it with a built in method that takes a value and prints it, print! Pretty handy!

If you’re still confused, @benenicktus wrote an alternate explanation below:




What does return do? Python


    Hi, 
I’m all new to programming and didn’t understand the explanation/answer at the top either. 
But I do think I understand it now, after reading trough the comments. 
A function will always return a value.  As a programmer you have to define which value will be returned by the function. If you don’t define this, the function will automatically return ‘None’ 
def more_complicated(n):
  """"""Returns the square of a number and adds 2 to that number.""""""
  squared = n ** 2
  complication = squared + …
  

","
Hi,
I actually still dont understand why do we need Return really !
if you get rid of it you will see that nothing changes,  the output still the same! when I call the fuction defined wheather or not I inculde the Return the output still the same.
Can someone explain please !

Agree that the example above outputs 100 twice?
now lets remove return:
def square(n):
  """"""Returns the square of a number.""""""
  squared = n ** 2

my_number_squared = square(10)
print my_number_squared  # Prints None
print square(10)  # Also prints None

run the code or see the comments for output. so return does literally what is say, its returns/hands back the values. This is very useful, given squared is a local variable within the function, without return we wouldn’t be able to access it outside the function

True, however, when I try when the example below, taking out the Returndoesnt change anything !


because you do nothing with the returned value.
However, its more complicated that that. return is a control flow construct, to pass data around. And not specific for this example, but as programs grow larger, control flow is such important. You need separate functions for maintainability. (you do seriously not want a 10,000 line single file with no function or classes, its a nightmare).
so understanding return is very important, you are going to need it later, a lot.
That is always the problems with these concepts, its not just specific about this exercise, its about the bigger picture. Something which is difficult to explain.

If i use print square(10) at the bottom and does not use return it doesn’t give correct result.
Is it because function square is not getting any value in return ?




 amit7437952833:

Is it because function square is not getting any value in return ?


yea, then the default (None) is returned. Functions always return a value

Hi,
I’m all new to programming and didn’t understand the explanation/answer at the top either.
But I do think I understand it now, after reading trough the comments.
A function will always return a value.  As a programmer you have to define which value will be returned by the function. If you don’t define this, the function will automatically return ‘None’
def more_complicated(n):
  """"""Returns the square of a number and adds 2 to that number.""""""
  squared = n ** 2
  complication = squared + 2


print more_complicated(10)
  

In the above example the function will return ‘None’ , because it doesn’t know which step of the calculation to return. I didn’t tell him!
Does it have to return squared or does it have to return the calculation after that? The programmer decides, not the function.
def more_complicated(n):
  """"""Returns the square of a number and adds 2 to that number.""""""
  squared = n ** 2
  complication = squared + 2
  return complication

print more_complicated(10)
  

Adding return complication will make the function return 102. And for whatever reason I, as a programmer, could have decided to return squared and the function would have returned 100.
def more_complicated(n):
  """"""Returns the square of a number and adds 2 to that number.""""""
  squared = n ** 2
  complication = squared + 2
  print complication 


more_complicated(10)
  

This piece of code will print 102. How is that possible? Because the code doesn’t actaully call the answer of the function. The print statement is inside of the function.
Adding print more_complicated(10) further along in your code (outside of the function), will return ‘None’ because inside of the function, nothing was returned. (and it will also print 102 again, because the print statement is still inside of the function.)

Hello there,
I have a question. Here is my example of fuction definition:

def square(n):
“”“Returns the square of a number.”""""
squared = n ** 2
return squared

Question: why do we

print (square(10))

but not

print (squared)

?
square is variable created inside a function square(). Because of this, I cannot understand how to use return without looking for specific examples that fits my code.

squared has a local scope, it only exists within the function.
furthermore, for the function to execute you need to call the function.

Hmm… I will ask a little different. Let’s say my code looks like this.
squared = 1
def square(n):

    squared = n ** 2
    return squared

print (square(10))
print (squared)

As I know squared value would not change after calling function and code would print:

100
1

How could I change the value of squared using function?

you could update the squared variable by doing:
squared = square(10)

this will store the returned value in a variable, not print the returned value

Thanks. It seems I finally got it… 

Thank you for your explanation. They should take your explanation to replace theirs.

I was having such trouble at first, even after reading the posts, then i realized, return just passes whatever you want to pass back to the call. It doesn’t matter what is happening inside the function, it can be calculating world peace but it won’t matter unless you tell it to return that value.
n is just what is being passed to the function when you call it. You don’t even have to do something with it.
In this instance, n = 6 and is passed to the function but i never used it. What is returned has nothing to do with the function itself at all. The point is, this is very flexible, you don’t need to feel trapped into the exercise.
def square(n):
  """"""not (Returns the square of a number.) """"""
  squared = 10 ** 2
  squared_plus = squared + 2
  print  squared, squared_plus
  return ""hi, i have nothing to do with this function""
  

print square(6)


The simplest.
If you ask the function to return what it did, it will return.
If you do not ask, it will not return.
And honestly will write that all it agree to provide you now is just None. And if you want something else, ask it with return.
That’s all.

So I’m sure you, rwaimi, have long since learned this, but I’m chiming in because I read this whole thread, couldn’t make sense of the answers, and then still had to go on YouTube, find a good illustrative video, and watch it a couple of times very carefully before I understood what return does.
Now I think I found a way, using one of the free course’s  own exercises to show, very concisely, what return is for, and I hope it helps someone:
n = “Hello”
def string_function(s):
return s + “world”
def string_function_no_return(s):
s = s + “world”
print string_function(n)
#will print what is generated by the function because the function returns the value.  Calling a function that returns what it generates when given a particular argument produces the same result as simply writing the value that that you derive through the use of that function taking that argument.
print string_function_no_return(n)
#will print “None” because, although it performs the desired operation, it doesn’t connect that operation to any output.  Unless you use the generated value to do something  inside the function (e.g. include your print statement inside the function), the new string that the function generates is trapped inside the function, and the function returns “None”.




 bigac73:

and the function returns “None”.


This is a slight misconception. The function returns nothing since it has no return statement. What is seen by the caller at the other end is this nothing, which Python translates to None. We see this when we print a call to a function that has no return.
>>> def foo(bar):
    print (bar)

    
>>> print(foo('bar'))
bar
None
>>> foo('bar')
bar
>>> 

Notice when we print the return value, Python substitutes None so print() has an argument. When we do not print the return value, nothing gets sent to the console because there is nothing to send.

Oh.  Thanks.  That’s a little tricky.

Yes, it takes a little wrapping around our head a couple times. We don’t really get to the meat of it until we run the code in the shell.
None is Python’s alias for nothing or undefined, and we see this in the shell when nothing is echoed as a final response from the function.
"
336,What are the different modes a file can be opened with?,"FAQ,Python FAQ",q-a,2,"
Question
What are the different modes a file can be opened with?
Answer
Python’s open() function is capable of opening a file with several different mode options, which come in handy for different use cases! Below is a list of all the modes available, as seen on the documentation page:

image.png1538×610 54.3 KB

","
What does “truncating” mean? What’s the purpose and how is it used?
"
337,What do parenthesis do when calling classes and methods?,"FAQ,Python FAQ","classes,q-a",12,"
What is happening under the hood to lead to very different outputs when calling a method with the parentheses in different places?
In other words, why does a return the string and d a TypeError?
class Rules:
  def washing_brushes(self):
    return ""Point bristles towards the basin while washing your brushes.""

a = Rules().washing_brushes()
b = Rules.washing_brushes
c = Rules().washing_brushes 
d = Rules.washing_brushes()


Where a, b, c, and d return, respectively:
Point bristles towards the basin while washing your brushes.
<function Rules.washing_brushes at 0x7f0b76032d08>
<bound method Rules.washing_brushes of <__main__.Rules object at 0x7f0b76082f98>>
TypeError: washing_brushes() missing 1 required positional argument: 'self'

","
That’s not very under-the-hood though is it?
An expression describes a value
so for example the expression
1

evaluates to 1
similarly, a function
f

evaluates to … f
What would you do with a function? Call it, presumably. You now have a different expression, you did something with f
f()

The result is whatever f returns, and f probably returned something other than itself (though it could, nothing stopping it from doing so)
So when you’re deciding whether or not to call something … did you want the thing itself, or its return value?
The dots in your expressions aren’t any different from your parenthesis, you could omit those as well, they too, are operations on values
x.something

asks x for its something attribute
x

doesn’t, that’s x itself
so, if you have some value, then, what operations does that support, and which operations do you want to do to it? you wouldn’t pick operations at random would you? or if you do, don’t expect a particularly meaningful outcome
you’ve got a class.
what would you like to do with it?
usually what you’d do with a class is to create an instance of it. for example:
an_empty_list = list()

calling a class results in an instance of it.
lists_class = list

so now you’ve got two values, list() and list … those are really different things.
you could ask for attributes from them
list().something
list.something

what attribute does a list have? what attributes does the list class have?
what makes sense to do with the list class’s append attribute, and what about a list instance’s append attribute?
if you call a list’s append attribute what’ll happen is that the value you provide is added to that list
but if you do the same with the list class, then what list would this add to? it wouldn’t, there’s no list, only the idea of list, a type

If you have a function that returns a list:
def f():
    return []

then f.append doesn’t seem like a great idea, f is a function, it doesn not have an append attribute
but you could call f, you would then have a list: f() and if you have a list then you could ask that list for its append attribute: f().append and if you had something you wanted to append to that list then… you could call it f().append(f)
f().append
f.append


Okay, I think I understand:


a returns the string because I have called (created an instance of) Rules, then called washing_brushes on Rules, which returns whatever the washing_brushes method within the class returns.


b returns Rules.washing_brushes itself because I haven’t called anything.


c returns something which is basically telling me there is a method within the instance of Rules named washing_brushes.


d throws a TypeError because I have tried to call a method on Rules itself. Because there is no instance of Rules in the expression, nothing is passed into washing_brushes’ self parameter.






 cloud5479553460:

c returns something which is basically telling me there is a method within the instance of Rules named washing_brushes .


you and I already did this.
functools.partial
stuff = list()  # []
bound_append = partial(list.append, stuff)  # stuff.append
bound_append(1)
print(stuff)  # [1]


And since I made the comparison between partial and method binding, I may as well show that functions can be used in a similar manner to classes - to create instances with fields and methods
Classes do this a bit more efficiently and provide nice things like iteration, indexing, calling, string conversion, operators … and you get a type for the value
from collections import namedtuple


def Counter():
    begin = 0

    def increment():
        nonlocal begin
        begin += 1

    def read():
        return begin

    # namedtuple provides attributes so that seems like an appropriate
    # representation, could be any container, including a function
    return namedtuple(""Counter"", [""increment"", ""read""])(increment, read)


c = Counter()
print(c.read())  # 0
c.increment()
c.increment()
c.increment()
print(c.read())  # 3


def Counter():
    begin = 0

    def increment():
        nonlocal begin
        begin += 1

    def read():
        return begin

    def get(msg):
        if msg == ""read"":
            return read
        if msg == ""increment"":
            return increment

    # just to show that a function can serve as a container/interface
    return get


c = Counter()
print(c(""read"")())  # 0
c(""increment"")()
c(""increment"")()
c(""increment"")()
print(c(""read"")())  # 3

One could also create the methods outside the function and bind them using partial similarly to a class… but those methods would no longer see the function scope, so one might want to use a container to store all the fields and provide this when binding a method

Following your example:
rules = Rules()
washing = partial(Rules.washing_brushes, rules)
print(washing)  # functools.partial(<function Rules.washing_brushes at 0x100e72950>, <__main__.Rules object at 0x100f65190>)
print(b) # <function Rules.washing_brushes at 0x100e72950>
print(c) # <bound method Rules.washing_brushes of <__main__.Rules object at 0x100e322d0>>

I thought washing and c would evaluate to the same thing because washing can also be expressed as Rules().washing_brushes. Why is there a difference?

If you call washing and c they’ll behave the same
There’s no reason why method binding would need to use partial, it probably shouldn’t. partial is a python function, but the binding is something that can be done in C code in the interpreter, it can likely do it far more efficiently and it likely wants to do some things specific to bound methods as well that partial doesn’t do
…So method binding is a highly specialized partial
Method binding is a language feature, while partial is just some function in a library, a toy in comparison, especially toy-like in python since python code doesn’t use it much

I read through all your explanation and could you please explain more about these :
functools.partial

stuff = list()  # []
bound_append = partial(list.append, stuff)  # stuff.append  #specially this line
bound_append(1)
print(stuff)  # [1]

And this :
from collections import namedtuple

return namedtuple(""Counter"", [""increment"", ""read""])(increment, read) #specially this line




“explain more” really tells me nothing at all about what you want to know. you’d have to phrase a question, dig out what you are looking for.

what this 2 line do
bound_append = partial(list.append, stuff)  # stuff.append  #specially this line

return namedtuple(""Counter"", [""increment"", ""read""])(increment, read) #specially this line





Take a look at namedtuple’s documentation I guess.
"
338,Why does SortedList not have a constructor?,"FAQ,Python FAQ",classes,5,"
Question
In this exercise, the SortedList class has no constructor. Why does it not need one?
Answer
The SortedList class inherits from the Python list class. The list class provides the implementation to store data. The SortedList class doesn’t need to change the storage of data only the way that the data is added, so SortedList objects will use the constructor from the parent list class and only provide an implementation for the append() method.
","
Even though it does not need a constructor, I still added one, (shown below) because if I did not, then when I tried to instantiate an object like some_list = SortedList([1,6,3,7]), I got an error about SortedList not taking any other arguments other than self. Hence the first two lines below. I then added a line self.sort() But then when I printed (some_list.list) I got the list unsorted so I had to use the thrid line which solved that problem.  I added the fourth line just to check.
def init(self, a_list):
self.list = a_list
self.list.sort()
print(self.list)

I created a constructor calling the super list constructor and adding sorting after it
def init(self, values):
super().init(values)
self.sort()
s_list = SortedList([4, 1, 5])
print(s_list) # returns [1, 4, 5]

class SortedList(list):
  def append(self, value):
    super().append(value)
    self.sort()
    
lst=SortedList([1,10,3,6,2,88,2,44,3,12])
lst.append(777)
print(lst)
#returns: [1, 2, 2, 3, 3, 6, 10, 12, 44, 88, 777]


Answer to following question:
When a  SortedList  gets initialized with unsorted values (say if you call  SortedList([4, 1, 5]) ) those values don’t get sorted! How would you change  SortedList  so that the list is sorted right after the object gets created?
class SortedList(list):
def init(self, list):
super().init(list)
self.sort()
def append(self, value):
super().append(value)
super().sort()
ls = SortedList([9,8,4])
print (ls)
"
339,What is the difference between a `class` and `type`?,"FAQ,Python FAQ","classes,q-a",3,"
@ionatan i’m sorry for taking your time but  may you explain the difference between "" class "" and "" object "" in python ?
","
All values are objects. Value and object is for most purposes synonymous in python.
Objects are instances of types. 5 is an instance of int
A class defines a type.

@ionatan
Thank you, sir
"
340,What is the difference between calling a variable with `self` or the `ClassName`?,"FAQ,Python FAQ",q-a,16,"
Hello, @mtf ! Sorry, if my question is stupid or if I’m missing something, I just wanna make sure I got it correctly. For the next example/exercise, we have this example [ Medthods with Arguments > https://www.codecademy.com/paths/computer-science/tracks/cspath-python-objects/modules/cspath-python-classes/lessons/data-types/exercises/methods-with-arguments]:
class DistanceConverter:
  kms_in_a_mile = 1.609
  def how_many_kms(self, miles):
    return miles * self.kms_in_a_mile

converter = DistanceConverter()
kms_in_5_miles = converter.how_many_kms(5)
print(kms_in_5_miles)
# prints ""8.045""


1.) Should we not have return self.miles * self.kms_in_a_mile?
1.1 - self.miles and DistanceConverter.miles are the same thing (since kms_in_a_mile is actually an attribute/class variable of the class DistanceConverter)?
2.) self.example is needed whenever we call elements outside the function/method but inside the class?
3.) Also, why is class DistanceConverter not having ()? (is this a special case/scenario…?)
Thank you a lot!
","



 byte3012796714:

Should we not have return self.miles * self.kms_in_a_mile ?


The miles parameter is not an instance variable, so no, it will not be written as self.miles. It is direct input to the method and not instantiated with the class.



 byte3012796714:

self.miles and DistanceConverter.miles are the same thing


In truth, neither of them exist. What does exist is the class method and class variable so this class does not need to instantiated.
kms_in_5_miles = DistanceConverter.how_many_kms(5)



self identifies the context object whether it is an instance or a direct call, as above.


When there is no inheritence from a super class, the parens are not required in Python 3.



Thank you a lot! @mtf , very explicit, extremely helpful 

In the example given , the class variable is called using self.variablename. But in the exercise while doing the problems when i did the same way it didnot accept it and said it has to be classname.variablename   please explain.

It depends upon what you want to do with your class variable. If it is just to be a constant like pi, you can access it either way, although I prefer using the Class_name.var style, since it is defined in the class namespace.
If you want it to be mutable, but evenly treated by every instance of the class, then also use Class_name.var. A good example of this is augmenting the variable by 1 every time there is a new instance, to keep track of how many instances are out there.
But, once you call the variable using self.var, that variable becomes an instance variable. Its name becomes  locked into the particular  instance that called the method. It is no longer a class variable as far as that instance is concerned
class Test_var:
    class_var = 10
    def method_1(self):
        Test_var.class_var += 5
    def method_2(self):
        self.class_var += 5
# Now instantiate two instances        
test_1 = Test_var()    # This one will only use method_1
test_2 = Test_var()    # This one will only use method_2

test_1.method_1()    # augments  Test_var.class_var by 5
print(""Test_var.class_var = {}\ntest_1.class_var = {}  \ntest_2.class_var = {}  \n*****"". format(Test_var.class_var, test_1.class_var, test_2.class_var))
test_2.method_2()    # augments  self.class_var by 5
    
print(""Test_var.class_var = {}\ntest_1.class_var = {}  \ntest_2.class_var = {}  \n"". format(Test_var.class_var, test_1.class_var, test_2.class_var))

Output:
Test_var.class_var = 15
test_1.class_var = 15  
test_2.class_var = 15  
*****
Test_var.class_var = 15
test_1.class_var = 15  
test_2.class_var = 20  

So instance test_1 augmented the class variable to 15, and then test_2 hijacked the variable name class_var and incremented it an additional 5, without any effect on the actual class variable.
If you wanted the class variable, for example,  to be an initial value of something for every instance,  something that would change as time progressed (like strength or health in a game character), this technique of using self with a class variable would work, but it would (IMHO) be more Pythonic to do that with __init__().

self.pi vs class.pi
My code returned an error even though the output seemed to be correct. I suspect it has something to do with the fact that I used self.pi instead of Circle.pi.
Can someone confirm this? The error was that the output for pizza_area did not equal 113.04.
Here is my code:
class Circle:
  pi = 3.14
  def area(self, radius):
    area = self.pi * radius **2 
    return area

circle  = Circle()


pizza_area = 12

teaching_table_area = 36

round_room_area = 11.460 

print(circle.area(pizza_area /2))

print(circle.area(teaching_table_area / 2))

print(circle.area(round_room_area / 2))



It will accept self.pi or Circle.pi (which I prefer). Your problem is this part of the instruction:
.

You go to measure several circles you happen to find around.

A medium pizza that is 12 inches across.
Your teaching table which is 36 inches across.
The Round Room auditorium, which is 11,460 inches across.


Compare with the values you have assigned.

Thank you @patrickd314  for the explanation of this particular issue. As a beginner I did not know any of that and it took me about 3 attempts to understand it so loads of kudos to you! 

class Circle():
  pi=3.14
  
  def area(self,radius):
    return Circle.pi*radius**2

my logical say it soppuse to be like:
class Circle():
  pi=3.14
  
  def area(self,radius):
    return self.pi*radius**2

and the website say its mistake…can somone explain why?

Nope, copy/pasted your code into the exercise & it doesn’t say there’s any mistake.
As per my understanding you can use either self or the class name, no probs.

this explanation in very good i think it should be part of lessons
why this code raise NameError:
class Store:
  exmp = 5
  def example():
    print(exmp)
    
Store.exmp()

and in functions inner functions have access to outer functions variables . given exmp of your self :
from collections import namedtuple


def Counter():
    begin = 0

    def increment():
        nonlocal begin
        begin += 1

    def read():
        return begin

    # namedtuple provides attributes so that seems like an appropriate
    # representation, could be any container, including a function
    return namedtuple(""Counter"", [""increment"", ""read""])(increment, read)


c = Counter()
print(c.read())  # 0
c.increment()
c.increment()
c.increment()
print(c.read())  # 3





 css7713845194:

class Store: exmp = 5 def example(): print(exmp) Store.exmp()


You are attempting to make a call on an integer. Store.exmp in your code is equal to 5. This should be a TypeError, rather than a NameError. A shorter example of this would be as follows-
test_val = 3()
I’m not sure what issue you have with the second section of code. Could you provide more details about what problem you are having with it?

when I delete this line :
return namedtuple(""Counter"", [""increment"", ""read""])(increment, read)

I get and error :
Traceback (most recent call last):
  File ""script.py"", line 16, in <module>
    print(c.read())  # 0
AttributeError: 'NoneType' object has no attribute 'read'

why this won’t work :
def Counter():
    begin = 0

    def increment():
        nonlocal begin
        begin += 1

    def read():
        return begin


c = Counter()
print(c.read())  # 0



Did you check the error itself?
What type is c in the altered code?




 css7713845194:

def Counter(): begin = 0 def increment(): nonlocal begin begin += 1 def read(): return begin c = Counter() print(c.read()) # 0


Traceback (most recent call last):
  File ""script.py"", line 13, in <module>
    print(c.read())  # 0
AttributeError: 'NoneType' object has no attribute 'read'

It wont print type © Only print this error

I’m not certain what you’re trying to do at this point, I assume you were just testing bits of code to see what happened so I phrased it as a question in the hope that you’d play around with it a bit. Your error occurs as your function has no return and therefore calling it will return the default, None.
There are very few things you can do with a None object, with good reason.
Are you sure you want to be using nested functions in the first place?
Hopefully that explains why your Error appears. If you have a specific issue with further code it would be best to send it to the python get-help section of the forums-
https://discuss.codecademy.com/c/get-help/python/
"
341,How can I create an empty list?,"FAQ,Python FAQ",,6,"
Question
For this exercise, are there any other options for creating an empty list?
Answer
There are two ways to create an empty list in Python. The most direct way is to create a variable and assign it an empty list by using a set of square brackets ([]) containing no items.  The second way to create an empty list is to use the list class to create an empty list. Both methods achieve the same result and are showing in the following example code.
# Method 1

emptylist1 = []

# Method 2

emtpylist2 = list()

","
Is there a particular reason to choose one method over the other?

Someone correct me if I’m wrong, but I believe it’s just programmer preference. There appears to be no difference in the lists created:
# Method 1

emptylist1 = []

# Method 2

emptylist2 = list()

print (emptylist1)
print (emptylist2)

print (type(emptylist1))
print (type(emptylist2))

Output:

[  ]
[  ]
<class ‘list’>
<class ‘list’>





 midlindner:

There appears to be no difference in the lists created:


There isn’t, only the way they are created is different.
[]        # implicit

list()    # explicit

The implicit form forced Python to invoke an instance of the list class, while the latter is explicitly invoking a new instance.
Python is pretty good at recognizing type literals, but it still has to go through the motions so it gets assigned to memory correctly.
>>> a = []
>>> b = list()
>>> id(a)
45194632L
>>> id(b)
45237640L
>>> 

We can see that lists are independent.

The creation of lists in Python works same that languages like Java?
I mean that if I use the  2° of this methods can use more pre-built functions to work with the list?



 ajaxninja66418:

#Method 1
emptylist1 = [  ]
#Method 2
emtpylist2 = list()



In Python, [] is seen by the interpreter as a list object so permits it to inherit all the attributes of that class.
x = [] is the same as x = list()

It is a recognized instance, either way.
"
342,Does Codecademy check for punctuation?,"FAQ,Python FAQ",q-a,4,"
Question
Does Codecademy check for punctuation?
Answer
It sure does! If you ever feel you’ve entered what it asks for in the instructions, but it’s marking it wrong, take a second look and be sure you have the same capitalization, spacing, and punctuation if it’s a string. Once you get to the free form projects, though, you’ll have much more room for creativity! Take a look at the code below for a passing and failing example:
# The instructions say “Create a new variable brian and assign it the string ""Hello life!"".”

# Passing:
brian = “Hello life!”

# Failing
Brian = “Hello life!”
brian = “hello life”
brian = “Hello life.”

","
The only check would be for exact string patterns. When given a string in the instructions, be sure to use that exact string. Be wary of straying from the instructions and taking liberties or embellishing for effect. Experiments will most always come back as not accepted.

Hi, just an FYI, this isn’t true, at least for this example. I used an upper-case L in life and passed. Might be confusing to some folks.

Thx 
"
343,Why aren't dictionaries printed in the same order as they are created?,"FAQ,Python FAQ","lists-dictionaries,q-a",5,"
More out of curiosity than a real problem… Why does the terminal print the dictionary differently than it is written in the compiler?
Compiler:
…sensors =  {“living room”: 21, “kitchen”: 23, “bedroom”: 20, “pantry”: 22}…
printed:
{‘bedroom’: 20, ‘pantry’: 22, ‘living room’: 21, ‘kitchen’: 23}
At first I thought there had been some sorting applied before printing, but I can’t figure out any sorting logic behind the printed version.
","
Dictionaries, like Ruby hashes and JS objects have no set insertion order. They are said to be unordered. The Collections library has an OrderedDict class, but that won’t be necessary in this course to use.
If you want to set the order the dictionary prints, such as sorted, then iterate over a sorted list of keys, and poll their values in the dictionary.
>>> for key in sorted(sensors.keys()):
    print ('{}: {}'.format(key, sensors[key]))

    
bedroom: 20
kitchen: 23
living room: 21
pantry: 22

This will also work, but is less explicit…
>>> for key in sorted(sensors):
    print ('{}: {}'.format(key, sensors[key]))

    
bedroom: 20
kitchen: 23
living room: 21
pantry: 22
>>> 


I tried out your code, the output doesn’t get jumbled up. Fail to understand why it got jumbled up for you.

Because previous to Python 3.7 dictionary insertion order was not retained. The version you are testing with may be a newer one.

Ah ok… makes sense, thank you.
"
344,"FAQ: Taking a Vacation - Hey, You Never Know!","FAQ,Python FAQ",,6,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Hey, You Never Know!” exercise from the lesson “Taking a Vacation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Python
FAQs on the exercise Hey, You Never Know!


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
The code below is what I inputted for the solution to this module and it kept getting the error message: “trip_cost(‘Tampa’, 5, 0) returned 1100 instead of the correct value 960”
def hotel_cost(nights):
  return 140 * nights

def plane_ride_cost(city):
  if city == ""Charlotte"":
    return 183
  elif city == ""Tampa"":
    return 220
  elif city == ""Pittsburgh"":
    return 222
  elif city == ""Los Angeles"":
    return 475

def rental_car_cost(days):
  cost = days * 40
  if days >= 7:
    cost -= 50
  elif days >= 3:
    cost -= 20
  return cost

def trip_cost(city, days, spending_money):
  return rental_car_cost(days) + hotel_cost(days) + plane_ride_cost(city) + spending_money

However, when checking the solution, it displays this as the answer:
def hotel_cost(nights):
  return 140 * nights

def plane_ride_cost(city):
  if city == ""Charlotte"":
    return 183
  elif city == ""Tampa"":
    return 220
  elif city == ""Pittsburgh"":
    return 222
  elif city == ""Los Angeles"":
    return 475

def rental_car_cost(days):
  cost = days * 40
  if days >= 7:
    cost -= 50
  elif days >= 3:
    cost -= 20
  return cost

def trip_cost(city, days, spending_money):
  return rental_car_cost(days) + hotel_cost(days) + plane_ride_cost(city) + spending_money

Can someone clear this up for me?




 garrettwhitaker74807:

def hotel_cost(nights): return 140 * nights def plane_ride_cost(city): if city == “Charlotte”: return 183 elif city == “Tampa”: return 220 elif city == “Pittsburgh”: return 222 elif city == “Los Angeles”: return 475 def rental_car_cost(days): cost = days * 40 if days >= 7: cost -= 50 elif days >= 3: cost -= 20 return cost def trip_cost(city, days, spending_money): return rental_car_cost(days) + hotel_cost(days) + plane_ride_cost(city) + spending_money


Same problem. I copied the solution you posted and paste it in the editor. It still thinks the code is wrong and i’m only able to progress when viewing the solution…




 keesgirardin55572167:

It still thinks the code is wrong and i’m only able to progress when viewing the solution…


then please post your code here, then we can analyze if something is wrong with your code, or determine if there might be a bug in the exercise validation (small change, but not impossible)

5*140 = 700
Tampa = 220
(5*40) -20 = 180
700 + 200 + 180 = 1100
So neither of the answers are correct.
960 is 140 less than 1100, which makes sense because you are only charged for the nights you stay at a hotel. (Mornings are full of sad, tired, hungover people trying not to look each other in the eye).
I’m pretty sure, the argument for hotels should be (days-1).
Less a coding error more of human error.
Hope that helps!
Cheers!

When writing the code I put an additional conditional on the night stays and rental costs. The conditional was such that if days are 0 you do not get charged for the hotel or rental. The code errors out on the function of 0 days such that you would be given -$140 for staying -1 days at the hotel. I believe the codeacademy evaluating function has a bug.
“trip_cost(‘Tampa’, 0) returned 220 instead of the correct value 80”
In reality this should be either $0 for the cost or $220 depending on how you see it. If days are 0 then you either didnt fly or you flew there and didnt stay or drive around. You would not get a negative value from the hotel.
"
345,What is an axis in Numpy?,"FAQ,Python FAQ",,4,"
Question
In the context of this exercise, what is an axis in Numpy?
Answer
An axis is similar to a dimension. For a 2-dimensional array, there are 2 axes: vertical and horizontal.
When applying certain Numpy functions like np.mean(), we can specify what axis we want to calculate the values across.
For axis=0, this means that we apply a function along each “column”, or all values that occur vertically.
For axis=1, this means that we apply a function along each “row”, or all values horizontally.
Example
# Given the following 2-dimensional array
values = np.array([
[10, 20, 30, 40],
[50, 60, 70, 80],
])

# Axis=0
# along each ""column""
print np.mean(values, axis=0) 
# [30, 40, 50, 60]

# Axis=1
# along each ""row""
print np.mean(values, axis=1)
# [25, 65]

","
If you are having trouble grasping what axis means just remember that you are removing that dimension when you run mean or sum on that axis.
axis=0 removes the row dimension
axis=1 removes the column dimension
It’s a bit confusing because of how (x, y) coordinates are thought to run horizontally and vertically.

I believe that this quiz question and answer are poorly worded.

If this is an array  [1,2,3,4]
… and this is another [6,7,8,9]
then, as a two-dimensional array, we have
[[1,2,3,4],
[6,7,8,9]]
To my way of thinking, the “values that share an array” are  [1,2,3,4] and [6,7,8,9], which lie along axis 0 and “values that share an index” are for instance, [4, 9], for index = 2 along axis 1.
How is my thinking wrong?

@patrickd314: I totally agree… had me confused for a while. But somewhat clearer now.
"
346,FAQ: Heaps: Conceptual - Heap Representations,"FAQ,Python FAQ",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Heap Representations” exercise from the lesson “Heaps: Conceptual”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Computer Science
Complex Data Structures
FAQs on the exercise Heap Representations


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
347,Can we select columns of a dataframe in any order?,"FAQ,Python FAQ",q-a,2,"
Question
Can we select columns of a Pandas dataframe in any order?
Answer
You certainly can! When selecting multiple columns from a DataFrame, you can order the columns however you would like them to appear. This is particularly useful because if we wanted to see the data in a certain way different from the original column order, we can reorder them in the output however we need.
Example
df = pd.DataFrame([
  ['Doe', 'Jane'],
  ['Law', 'Bob']],
  columns = ['last_name', 'first_name'])

# We can select the first_name column first, 
# then the last_name.
full_names = df[['first_name', 'last_name']]

","
How these library executing the month just by calling the string in column.I mean just by calling string of column in data frame?
"
348,How is this different from import math?,"FAQ,Python FAQ",q-a,4,"
Question
How is this different from import math?
Answer
When we just use import math, we are only telling Python to import the math module, not necessarily all of the functions inside of it.
This is not the case when we use from math import *. Now we’re saying to go into the module and import all of the functions possible, allowing us to use them all without needing to type math.function_name().
This can feel like it’s saving you time and effort, but be careful! As you’ll see in the next exercises, it can cause headache as well. What if you import a module’s entire function set and one of them has the same name as  a function you’ve defined? This can cause tricky bugs because it won’t cause an error, it will simply behave in unexpected ways because you’ll have a hard time realizing which function with the same name is being used. Therefore it’s typically safer to import the functions you need, or just to stick with using the module prefix.
","



 wiki-bot:

When we just use import math , we are only telling Python to import the math module, not necessarily all of the functions inside of it.


So what will we be importing this way if functions are not imported?

The math module itself still contains definitions of functions etc.
So using “import math” if we wanted to use the sin() function of the math module it would be called in code using
math.sin()
If we used “from math import *” it could be called using
sin()
As described above, from {modulename} import * should generally be avoided. An example would be if you imported all the functions of the math module and then imported all the functions of the numpy module (a well known 3rd party library for mathmetical operations; particularly arrays, matrices and scientific mathematics). Some of the functions from math would then be overwritten, potentially introducing bugs.
You can avoid issues like this by importing the module and only using functions from the module name, e.g. the following prevents sin() being overwritten and generally makes it easier for anyone else reading your code to work out what function is being used-

import math
import numpy as np
math.sin()
np.sin()

For math and numpy it’s best to use one or other anyway. Stick with math unless you have a good reason not to.

Alright. As far as I understand, that way we are importing part of the module that we need, and avoiding bringing along the unnecessary stuff.
"
349,When should I create a new method vs placing it in init?,"FAQ,Python FAQ",q-a,3,"
When do you create a new method and when do you put it in the __init__? I understand that if it’s a long method it’s better but when you can return it in a single function is there any reason why we would make more methods? I think this looks a lot cleaner:

 class Diameter():
    pi = 3.14159
    def __init__(self, diameter):
        self.radius = diameter/2
        self.area = Diameter.pi * self.radius ** 2
        self.circumference = Diameter.pi * self.radius * 2

        
pizza = Diameter(12)

print(f""Pizza radius: {pizza.radius}"")
print(f""Pizza area: {pizza.area}"")
print(f""Pizza circumference: {pizza.circumference}"")

","
__init__() is called when you instantiate a class:
Diameter() # create class instance which will trigger the init method

separation of concerns, easier to test.
also, what if you change the diameter:
class Diameter():
    pi = 3.14159
    def __init__(self, diameter):
        self.radius = diameter/2
        self.area = Diameter.pi * self.radius ** 2
        self.circumference = Diameter.pi * self.radius * 2

        
pizza = Diameter(12)

print(f""Pizza radius: {pizza.radius}"")
print(f""Pizza area: {pizza.area}"")
print(f""Pizza circumference: {pizza.circumference}"")

pizza.radius = 500

print(f""Pizza radius: {pizza.radius}"")
print(f""Pizza area: {pizza.area}"")
print(f""Pizza circumference: {pizza.circumference}"")

then you have a bug. instance properties can change, thus you can’t rely on the fact that you can instantiate a class once and that everything will stay the same, so you can’t push everything in the init method

Thank you, you made it very clear!
"
350,How can I look up the index of an item in my list?,"FAQ,Python FAQ","lists-functions,q-a",5,"
In below mentioned code I can get the number by using index value
heights = [61, 70, 67, 64, 65]
print(heights[2])
I am wondering what if i want to use number in order to find index. For example i want to find at what index is number 64 is?
Can we do this in python?
","
Hi @prateekjain2508,
Try this:
i = heights.index(64)
print(i)
print(heights[i])


… or write your own function:
def find_all(my_lst,  n):
    for i in range(len(my_lst)):
        if my_lst[i] == n:
            # do something with i

(Obviously, you could make a list of i’s, print them, or do anything you like with them.)
This also shows the cool tie-in between the range() function, the final list index, and list length.
:

The use of index is very helpful here. However, if there was another 64 in the list, this method would not capture the index of that second 64. Actually, I tried to do so but the printed result showed only the index of the 64 which was firstly in the list. Is this a drawback of “index”?  Maybe the solution here is one like that described by @patrickd314 in the same forum.

Yes, .index() has that drawback, but it also permits a start argument that would let us store the first index, then set the start to 1 past that, and search again, store that index, and repeat. See what you can come up with using this approach.
There is another object that can make it easier for us to find all the indices of matching items…enumerate. We find this in the module on iterators, so I won’t try to jump the queue here.
"
351,Why do I have to re-define all of my instance variables in ElectricCar’s __init__?,"FAQ,Python FAQ",,5,"
Question
Why do I have to re-define all of my instance variables in ElectricCar’s init?
Answer
If we override a method, then the new method must be defined in such a way that it does everything you want it to do, which may include everything from the original method! If that’s the case, we’ve learned about calling the parent method by using the super keyword, so that’ll save us some time.
We can just call the parent Car __init__() method by using the super keyword that we learned about earlier, and then add whatever we like afterwards, like this:
def __init__(self, model, color, mpg, battery_type):
    super(ElectricCar, self).__init__(model, color, mpg)
    # Add code to define battery_type instance variable here!

That saves us the trouble of rewriting those lines of code we already wrote, while allowing us to add more to the end for our battery_type!
","
Why do we need to call the ‘drive_car’ method to change the condition of the car? Shouldn’t it change just by printing out the ‘condition’ once as the whole class will be ran by Python?

Why must we provide the ‘model’, ‘color’, and ‘mpg’ arguments into the init function of the ElectricCar class? Aren’t these already added in from the super call? At the moment, this method just seems like a waste of time as oppose to just redefining the init function. Although, I’m probably wrong.




 jjhiggins97:

Aren’t these already added in from the super call?


No, since the instance is an ElectricCar, the values are not passed in to the Car class. We pass all the values into the ElectricCar as parameters, but hand the values up to the Car class to be instantiated.
 super().__init__(params)

invokes the __init__ method of the super class and initializes the parameters so the derived class will have those attributes set.

Hi, this could be myopic to the extent of the exercise and/or dated to Py2  but still thought it worth sharing: (considered posting on How can I define and use a __repr__ method? but I think this is better off here)
I follow the logic of  a super call to the Parent class at initialization of a Child class with both inherited and additional variables and methods. Had a mega aha moment when I realized our display_car method was really a  __repr__()
So I defined a representation for Parent that’s  super called at Child ‘re’-representation.
It makes sense to me in this delimited context, and certainly pieced and cleaned everything together from the lesson (for me). But I’m curious if this is an ideal/honest use of __repr__() for an instance of a derived class…
class Car(object):
  condition = ""new""
  def __init__(self, model, color, mpg):
    self.model = model
    self.color = color
    self.mpg   = mpg

  def drive_car(self):
    self.condition = ""used""
  
  def __repr__(self):
    return ""This is a %s %s %s with %s MPG"" % (self.condition, self.color, self.model, str(self.mpg))

class ElectricCar(Car):
  def __init__(self, model, color, mpg, battery_type):
    super(ElectricCar, self).__init__(model, color, mpg)
    self.battery_type = battery_type

  def drive_car(self):
    self.condition = ""pretty good""

  def __repr__(self):
    return super(ElectricCar, self).__repr__() + "" on a %s battery"" % (self.battery_type)


my_car = ElectricCar(""DeLorean"", ""silver"", 88, ""molten salt"")

my_car.drive_car()
print my_car 

#This is a pretty good silver DeLorean with 88 MPG on a molten salt battery#



"
352,Can keyword arguments be used positionally?,"FAQ,Python FAQ","functions-py,q-a",3,"
I have a similar question. In the quiz, a function is defined as follows:
def update(new_value = 10):
old_value = new_value
It asks how to call the function with  new_value of 20.
The correct answer is
update(20)
So does this work because there is only one parameter for the function, so that the keyword new_value doesn’t need to be explicitly spelled out when calling the function? If there were more parameters, each with a default value, or some has default values and others don’t, how would it work? Would the keyword arguments need to be spelled out in those cases?
thanks
","
new_value is only a local variable, not accessible outside of the function. It is preset to 10, but takes on any value we pass in. If no value is passed in, then new_value becomes 10.
Multiple keywords are possible, but the position is critical.
>>> def foo(a = 1, b = 2, c = 3):
    return a * 4, b * 3, c * 2

>>> foo()
(4, 6, 6)
>>> foo(4)
(16, 6, 6)
>>> foo(4, 5)
(16, 15, 6)
>>> foo(4, 5, 6)
(16, 15, 12)
>>> 


Such a clear explanation! Thank you!
"
353,Why should we use concatenation instead of just the print() function?,"FAQ,Python FAQ","python-syntax,q-a",7,"
Question
The print() function can concatenate for us if strings are given as arguments, why not just use this instead of concatenating with +?
Answer
To answer this let’s start by looking at the print function (for more details about + concatenation check the other FAQs). Here you can see the full documentation for the print function (at time of writing python 3.8 is the latest). So looking at the print function:
print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
You can see that there are a few arguments here, we are going to only look at *objects, and sep=' ' for the purposes of this lesson. To quote the documentation "" Print objects to the text stream file , separated by sep.""
The argument *objects, is any number of different objects that will all be printed together, for example our list of string1, string2, string3, etc.. Usefully, any non string objects will be converted by default using str(), unlike if we used concatenation.  And the seperator is an argument that for a string that is placed between each object. By default it is a single space ' ', but you could change it if you wished for example by setting sep=', ', now there is a comma then a space.
So far this seems more useful and easier than concatenation, but there is a catch. The separator is placed between all objects. This means we cannot mix and match. For example:
string1 = 'My favorite number'
num = 14
string2='is the best number'
print(string1+': '+str(num)+' '+string2)
>My favorite number: 14 is the best number

So concatenation is going to be more useful overall for putting together custom sentences with variables while the print function is going to be more useful for “stringing” together similar types of objects (words in a sentence, numbers in a list, etc.)
I hope this helps!
","
Hi all 
So there’s two ways to print a concatenated string with a number in it:

Make the number a string first with the str() function, then print(it + with + other + stuff)
Don’t do 1, just print(it, inside, this, function)

What’s the reason behind these two methods? Why use 1) and not 2) ?

should be more simple?

Screen Shot 2019-06-18 at 7.14.58 PM.png1880×1420 315 KB


I guess you could put all of the strings into a variable to put inside the print() function…
Not really more simple, just easier to understand though.

@py1184336943
Look at the difference between the spacing of your solution and the “print(message)” solution.  I just started and had the same thought, but I noticed right away that it prints the spaces between each string differently.  I wonder if a later lesson covers that wider space.

I think this is because when you use print in this way it adds a space after each argument. There are already spaces included in the test string, like here: ""The Wind, ""  - the result of this is a double space after each test string. You could test this by removing the spaces from the text string, like so: “The Wind,” instead of ""The Wind, "" and so on

Yes, because as @catower explained in his answer to another question above, the default separator for the print() function is a space.
print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
That’s what sep=’ ’ means above.
Just like one of the benefits of using concatenation is customizing the outputted string, one of the benefits of passing arguments to print() with commas is it will automatically add the space for you. (Or a ‘,’ or a ', ’ or a ‘;’ depending on however you want the arguments to be separated.)
"
354,What if I want to compare bit strings of uneven length?,"FAQ,Python FAQ",q-a,2,"
Question
What if I want to compare bit strings of uneven length?
Answer
That’s totally fine! It will line them up accordingly (from the right) and fill in 0s for the leftmost unfilled bits. At least this is what you can do visually to help.
If we want to & together the bit strings 1001 and 1001 1010, for example, we would write it out like this:
  0000 1001
& 1001 1010
-------------
  0000 1000

","
are you sure about that robot wiki.
"
355,How can I make the same_name function ignore the case of the strings?,"FAQ,Python FAQ",,7,"
Question
In this exercise, the same_name() function will compare the two names to see if they are equal. How can this be done so that it will ignore any differences in capitalization?
Answer
This can be done by converting the strings to all lower-case using lower() OR all upper-case using upper() before performing the equality test. The upper() and lower() methods are called on the string variables. For example, to compare the strings as lower-case, the check can be written as:
if your_name.lower() == my_name.lower():

The same would apply for using upper().
","
Could this also be done by putting the variable inside the upper/lower brackets? For example:
If lower(your_name) == lower(my_name):

sure, if you have a function named lower.

str.lower() is a function built into python.  You can use the below code in place of the code provided by ajaxninja66418 and get the same results.
Now I’m not sure if there are any benefits to using one over the other.
if str.lower(your_name) == str.lower(my_name):

Write your same_name function here:
def same_name(your_name, my_name):
if your_name == my_name:
return “His name is my name too.”
else:
return False
Uncomment these function calls to test your same_name function:
#print(same_name(“Colby”, “Colby”))
should print True
#print(same_name(“Tina”, “Amber”))
should print False
print(same_name(“John Jacob Jingleheimerschmidt”, “John Jacob Jingleheimerschmidt”))

You can do this with either the .upper() or .lower() method. Essentially you want to “standardize” the characters so that they are all either lowercase or uppercase. This ensures the function compares the character regardless of case. I used .upper for my code.
def same_name(your_name, my_name):
  #standardize both strings to uppercase so that function compares strings without regard to case deviations.  
  if (your_name.upper() == my_name.upper()):
    return True
  else:
    return False


So if,
if your_name.lower() == my_name.lower()

Is used to convert strings to lower (or upper) case letters.
Are there other ways of converting strings using the “string.xxxx()” method?
Also what are theses called when you use the "" . "" to change a string?
Thanks
"
356,Can the dog_years function utilize string formatting to produce the output?,"FAQ,Python FAQ",,14,"
Question
In this exercise, the instructions to create the string returned by the dog_years() function makes it appear like string formatting can be used. How would that be done?
Answer
Instead of using string concatenation and the str() function to produce the output, Python’s string formatting can be used. The following code example shows how to produce the desired output.
def dog_years(name, age):
    return ""{name}, you are {dog_age} years old in dog years"".format(name=name, dog_age=(age * 7))

","
def dog_years(name,age):
return f""{name}, you are {age*7} years old in dog years""
works as well

What about this code?
Write your dog_years function here:
def dog_years(name,age):
dog_years = age * 7
print(name+"", you are “+ str(dog_years)+
"" years old in dog years”)
return age*7
#print(dog_years(“Lola”, 16))
should print “Lola, you are 112 years old in dog years”
dog_years(“Lola”, 16)
The code returns the expected value, so… it´s ok or not?

The idea of this lesson is to replace concatenation with string formatting…
>>> def dog_years(name,age):
    dog_years = age * 7
    print(""{}, you are {} years old in dog years."".format(name, dog_years))
    return age * 7

>>> dog_years(""Lola"", 16)
Lola, you are 112 years old in dog years.
112
>>>

Can someone tell me where the .format concept was taught prior to this challenge? I do not remember that being covered up to that point.

The old course (Python 2) had a unit on string formatting, perhaps they omitted to include that unit in the Python 3 course? Can’t say, for sure.
Briefly, there are three ways of formatting strings:

% (modulo) placeholder
str.format() method

f-strings

The latter may not yet be supported in the LE but the other two are.
a = 'fox'
b = 'dog'

s = ""The quick brown %s jumped over the lazy %s"" % (a, b)

t = ""The quick brown {} jumped over the lazy {}"".format(a, b)

Note that with string formatting we do away with concatenation when interpolating variables; and, all those pesky quote marks.
You’ll find everything you need in this article…

https://pyformat.info/

To learn about f-string formatting, check here…

https://www.python.org/dev/peps/pep-0498/


If we are talking about this exercise, it does not require, nor does the “solution” offer old- or new-style string formatting, just concatenation.
I don’t think that any of the Python courses discuss string formatting  EDIT: My mistake - Thank you, @fox3773 , except for a bit on the %-style in Python 2.  Someone please correct me if I’m wrong.
It’s well worth your while (and quite easy, the basic stuff, at least) to pick it up.  Look here, for instance.

The Python 3 course does have 2 exercises covering the .format() string method in lesson 6: strings. I don’t think any other ways to format strings are mentioned, or at least they are never included in any of the exercises.
As @jjpeters1986 mentioned though it is definitely not something that has been covered yet at this point in the coarse.
Even so, I liked how these questions at the end of exercises sometimes touched on concepts or methods / functions, that the coarse had not yet directly covered. This one in particular I happened to find very useful as I absolutely hated concatenating strings together, and I also just think it looks ugly personally. So after seeing this post I was happily using the .format() method far before it is officially covered much later on in the coarse.

Thank you @patrickd314 @mtf @fox3773 for your responses. I’m just happy to know that I have a community of other people to help me out!




 kingkoalakingdom:

return f""{name}, you are {age*7} years old in dog years""


Hi kingkoalakingdom,
What does the “f” stand for?
I have simply written:
return name+"", you are ""+str(age*7)+"" years old in dog years""
Thank you for the clarification!




 janosh:

What does the “f” stand for?


Do a quick search for f-string, the newest form of string formatting in Python (since 3.6 or 3.7).




 mtf:

f-string


Thank you very much!

This is another way to write the same function
def dog_years(name, age):
return “{}, you are {} years old in dog years”.format(name, age*7 )

I tried many formats, all giving the “Lola, you are 112 years old in dog years” format.
Some examples:
def dog_years(name, age):
dog_years = age * 7
return “{}, you are {} years old in dog years”.format(name, dog_years)
OR
def dog_years(name, age):
return name + “, your are "" + str(age*7) + "" years old in dog years”
But here is the only one that the exercise took as valid:
def dog_years(name, age):
dog_years = age * 7
return name + “, you are "" + str(dog_years) + "" years old in dog years”
Hope it helps
"
357,"How is the ""five-number-summary"" helpful to understand a dataset?","FAQ,Python FAQ",q-a,3,"
Question
In the context of this exercise, how is the “five-number-summary” helpful to understand a dataset?
Answer
The five-number summary consists of these values for a dataset:
minimum
1st quartile
median
3rd quartile
maximum
With these values, we are able to get a stronger understanding of the dataset as a whole.
With this summary, we can compute the Interquartile Range, or IQR, which is computed as the difference of the 3rd quartile and the 1st quartile. This value tells us how spread the data is. If this value is low, then the data has little variance, and conversely, if the value is large, the data has a large variance.
The five-number-summary can also be helpful to determine outliers, by understanding the range of data by knowing the maximum and minimum values.
The summary is sometimes more reliable than depending on just the mean, especially when the data is skewed, because the mean is affected by outliers, while the quartiles and the median are not as affected by outliers.
We can also compare the five-number-summaries of different datasets to see how similar or different they are.
","



 jephos249:

If this value is low, then the data has little variance, and conversely, if the value is large, the data has a large variance.


Low, large, in relation to what? To the median?
If this is the case, would it be right if we alternatively said sth like "" the closer IQR is to the median, the less the variance is …""  ?

I believe it is low, large  or (minimun or maximun) relative to the orderly dataset .
The dataset is sorted before any evaluation
"
358,Is there another method to combine strings other than the concatenation operation?,"FAQ,Python FAQ",,15,"
Question
In this exercise, the strings for the first and last names are joined using the + operator. Can this be done in another way?
Answer
Yes, string formatting would be another option which could be used to construct a string. The following code example shows a method to produce the same result as the + operator using Python’s string formatting. A new string is constructed using string formatting and is then returned from the function.
def introduction2(first_name, last_name):
  return ""{last}, {first} {last}"".format(first=first_name,last=last_name)

","
Which one of the two methods is considered “better practice in coding”?
The string formatting seems a little bit complicated to me. (I´m a newbie to Python 3).

Concatenation is not nearly as elegant as string formatting, imho. This way there is only one set of quotes and everything inside can be spaced and punctuated to suit. The example above uses keywords, but we could easily use just placeholders…
""{} {}"".format(first_name, last_name)

The old method is modulo formatting,
""%s %s"" % (first_name, last_name)

and the newest method is f-string which was introduced in Python 3.6 which uses direct interpolation similar to Ruby and ES6+.
Read up on the various approaches and pick one to use consistently in your work.

Thank you very much for your fast reply 

This works:
def introduction(first_name, last_name):
  return f""{last_name}, {first_name} {last_name}""


No, it doesn’t. Your code throws an error. Mind the “f” directly after your “return” statement. Plus, even if you remove the f, regardless of the input, the output will always be:
{last_name}, {first_name} {last_name}
Apparently you have to add the .format() after the string in order for the code to work the way it should.

It does though you have to assign the value returned by the function call to a variable, then print that variable. I find it interesting because the message variable can be reused later.
For what I understand, the f function converts the 2 parameters to formatted strings. So in the function call you need 2 strings (“John”, “Doe”) as arguments. But if you simply call the function, nothing happens. If you print(introduction), Python prints the location of value returned (i.e: <function introduction at 0x7f3ee41d0e18>).
def introduction(first_name, last_name):
  return f""{last_name}, {first_name} {last_name}""

message = introduction(""John"", ""Doe"")
print(message) 

Alternatively, you can print the string in the terminal by using print inside the function using a similar syntax.
def introduction(first_name, last_name):
  print(f""{last_name}, {first_name} {last_name}"")

introduction(""John"", ""Doe"")

I hope my explanation makes sense. I’m pretty new to this and trying different approaches to get a better understanding.

It does work in Python 3.6 and above. CC’s LE uses 3.5.

As of now string formatting like that does work, the learning environment has been updated.

def introduction(first_name, last_name):
return print(last_name +"", ""+ first_name, last_name+ “.”)
The code I’m using above is coming back as an error. Could someone explain why?




 rik07:

return print(last_name +"", ""+ first_name, last_name+ “.”)


Is that needed in your expression?

The instructions said to return the last_name followed by a comma, a space, first_name another space, and finally last_name.

Okay, I see. So it follows that since you are concatenating two variables, that comma does not belong.
var_b + "", "" + var_a + "" "" + var_b

Note the space character with no comma.

Ohh I see now! Thanks for your help.

You’re welcome. Concatenation is a bit of a pill to swallow but once it is understood, should not give you any more problems.
Note also that we can assign and store formatted strings, not just print them.
c = ""%s, %s %s"" % (var_b, var_a, var_b)

That’s the legacy formatting inherited from C.
c = ""{}, {} {}"".format(var_b, var_a, var_b)

or,
c = ""{2}, {1} {2}"".format(var_a, var_b)

or,
c = ""{b}, {a} {b}"".format(a=var_a, b=var_b)

and the latest version, f-string, which is demonstrated a couple posts above. All of these can be assigned, and will retain the formatting.
Formatting does go one step further in that we can write a format and assign it, then apply it to data later to create the finished string. This is a topic that is worth following up when you have some time to read up and practice with the various methods.
"
359,"When we append the list's length to itself, what value would be appended?","FAQ,Python FAQ",,5,"
Question
In this code challenge, we are appending the list’s length to itself. If we append the list’s length to itself, what value would be appended, the previous length or the length after the value was appended?
Answer
Following the order of operations, this will calculate the list’s length first, then append that value to it.
To explain what this means, say we had a list of elements
list = [10, 20, 30].
If we call this method on the list,
.append(len(list))
because of operator precedence, the expression inside parentheses () will be evaluated first. This will evaluate to the current length of the list, 3, before it is appended, and essentially become the same as running this,
.append(3)
which would update the list to
[10, 20, 30, 3]
If, instead, the .append() happened first, then the value of len(list) might have been 4 instead, but because of operator precedence, this issue will not occur.
","
3 posts were merged into an existing topic: Why does my code return None?

6 posts were split to a new topic: Ways we could extend the list

This is how I coded this lesson

#Write your function here
def append_size(lst):
  total_elements = len(lst)
  lst.append(total_elements)
  return lst





Here’s how I did it

def append_size(lst):

  size = len(lst)
  
  lst.append(size)
  
  return lst


"
360,"FAQ: Taking a Vacation - Hey, You Never Know!","FAQ,Python FAQ",,6,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Hey, You Never Know!” exercise from the lesson “Taking a Vacation”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Python
FAQs on the exercise Hey, You Never Know!


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
The code below is what I inputted for the solution to this module and it kept getting the error message: “trip_cost(‘Tampa’, 5, 0) returned 1100 instead of the correct value 960”
def hotel_cost(nights):
  return 140 * nights

def plane_ride_cost(city):
  if city == ""Charlotte"":
    return 183
  elif city == ""Tampa"":
    return 220
  elif city == ""Pittsburgh"":
    return 222
  elif city == ""Los Angeles"":
    return 475

def rental_car_cost(days):
  cost = days * 40
  if days >= 7:
    cost -= 50
  elif days >= 3:
    cost -= 20
  return cost

def trip_cost(city, days, spending_money):
  return rental_car_cost(days) + hotel_cost(days) + plane_ride_cost(city) + spending_money

However, when checking the solution, it displays this as the answer:
def hotel_cost(nights):
  return 140 * nights

def plane_ride_cost(city):
  if city == ""Charlotte"":
    return 183
  elif city == ""Tampa"":
    return 220
  elif city == ""Pittsburgh"":
    return 222
  elif city == ""Los Angeles"":
    return 475

def rental_car_cost(days):
  cost = days * 40
  if days >= 7:
    cost -= 50
  elif days >= 3:
    cost -= 20
  return cost

def trip_cost(city, days, spending_money):
  return rental_car_cost(days) + hotel_cost(days) + plane_ride_cost(city) + spending_money

Can someone clear this up for me?




 garrettwhitaker74807:

def hotel_cost(nights): return 140 * nights def plane_ride_cost(city): if city == “Charlotte”: return 183 elif city == “Tampa”: return 220 elif city == “Pittsburgh”: return 222 elif city == “Los Angeles”: return 475 def rental_car_cost(days): cost = days * 40 if days >= 7: cost -= 50 elif days >= 3: cost -= 20 return cost def trip_cost(city, days, spending_money): return rental_car_cost(days) + hotel_cost(days) + plane_ride_cost(city) + spending_money


Same problem. I copied the solution you posted and paste it in the editor. It still thinks the code is wrong and i’m only able to progress when viewing the solution…




 keesgirardin55572167:

It still thinks the code is wrong and i’m only able to progress when viewing the solution…


then please post your code here, then we can analyze if something is wrong with your code, or determine if there might be a bug in the exercise validation (small change, but not impossible)

5*140 = 700
Tampa = 220
(5*40) -20 = 180
700 + 200 + 180 = 1100
So neither of the answers are correct.
960 is 140 less than 1100, which makes sense because you are only charged for the nights you stay at a hotel. (Mornings are full of sad, tired, hungover people trying not to look each other in the eye).
I’m pretty sure, the argument for hotels should be (days-1).
Less a coding error more of human error.
Hope that helps!
Cheers!

When writing the code I put an additional conditional on the night stays and rental costs. The conditional was such that if days are 0 you do not get charged for the hotel or rental. The code errors out on the function of 0 days such that you would be given -$140 for staying -1 days at the hotel. I believe the codeacademy evaluating function has a bug.
“trip_cost(‘Tampa’, 0) returned 220 instead of the correct value 80”
In reality this should be either $0 for the cost or $220 depending on how you see it. If days are 0 then you either didnt fly or you flew there and didnt stay or drive around. You would not get a negative value from the hotel.
"
361,How should I add x and y together?,"FAQ,Python FAQ",q-a,3,"
Question
How should I add x and y together?
Answer
In this exercise we need to return the addition of our two parameters, x and y. We can do math in a return statement like this:
def my_function(value_1, value_2):
  return value_1 + value_2

","
How come my code does not get accepted when I use the sum() function to add them?

Depends how you use sum(), sum() is for iterable like a list. Which means you first have to convert to list, which sounds like taking extra (unnecessary) steps
"
362,What does the pass keyword do?,"FAQ,Python FAQ","classes,q-a",6,"
Question
What does the pass keyword do?
Answer
The pass keyword performs no function in Python other than being a legal keyword. The most common use of pass is as a placeholder for code that is not yet present in a program but where something is required to prevent an IndentationError from being reported such as after the definition of a class or function. It can also be used after for, while and if to act as a placeholder for missing code.
","
Eg.
>>> class Foo(object):
	pass

>>> foo = Foo()
>>> isinstance(foo, Foo)
True
>>> 

Were it not for that indented line of pseudo code, an instance would not be possible. Actually, since this is in the interactive console, we could keep hitting Enter and would never see the, >>>. The definition could not be escaped from without some code, indented per norm.
>>> class Bar(object):
	""""""
Bar complements Foo
""""""

	
>>> bar = Bar()
>>> isinstance(bar, Bar)
True
>>> print (bar.__doc__)

Bar complements Foo

>>> Bar.__doc__
'\nBar complements Foo\n'
>>> 

Clearly, pass is the cheapest, but we can still use this opportunity to document what we wish to accomplish with this class. No time like the starting point to document ideas and objectives. Let the code that results answer to that as it evolves.

3 posts were split to a new topic: What is a namespace in python?

3 posts were split to a new topic: What is the difference between a class and type?

Does pass keyword add any execution overhead - something similar to NOP instruction in assembly?




 erjiteshpatel:

Does pass keyword add any execution overhead


In Big O terms, it would be O(1).
"
363,Why should we use concatenation instead of just the print() function?,"FAQ,Python FAQ","python-syntax,q-a",7,"
Question
The print() function can concatenate for us if strings are given as arguments, why not just use this instead of concatenating with +?
Answer
To answer this let’s start by looking at the print function (for more details about + concatenation check the other FAQs). Here you can see the full documentation for the print function (at time of writing python 3.8 is the latest). So looking at the print function:
print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
You can see that there are a few arguments here, we are going to only look at *objects, and sep=' ' for the purposes of this lesson. To quote the documentation "" Print objects to the text stream file , separated by sep.""
The argument *objects, is any number of different objects that will all be printed together, for example our list of string1, string2, string3, etc.. Usefully, any non string objects will be converted by default using str(), unlike if we used concatenation.  And the seperator is an argument that for a string that is placed between each object. By default it is a single space ' ', but you could change it if you wished for example by setting sep=', ', now there is a comma then a space.
So far this seems more useful and easier than concatenation, but there is a catch. The separator is placed between all objects. This means we cannot mix and match. For example:
string1 = 'My favorite number'
num = 14
string2='is the best number'
print(string1+': '+str(num)+' '+string2)
>My favorite number: 14 is the best number

So concatenation is going to be more useful overall for putting together custom sentences with variables while the print function is going to be more useful for “stringing” together similar types of objects (words in a sentence, numbers in a list, etc.)
I hope this helps!
","
Hi all 
So there’s two ways to print a concatenated string with a number in it:

Make the number a string first with the str() function, then print(it + with + other + stuff)
Don’t do 1, just print(it, inside, this, function)

What’s the reason behind these two methods? Why use 1) and not 2) ?

should be more simple?

Screen Shot 2019-06-18 at 7.14.58 PM.png1880×1420 315 KB


I guess you could put all of the strings into a variable to put inside the print() function…
Not really more simple, just easier to understand though.

@py1184336943
Look at the difference between the spacing of your solution and the “print(message)” solution.  I just started and had the same thought, but I noticed right away that it prints the spaces between each string differently.  I wonder if a later lesson covers that wider space.

I think this is because when you use print in this way it adds a space after each argument. There are already spaces included in the test string, like here: ""The Wind, ""  - the result of this is a double space after each test string. You could test this by removing the spaces from the text string, like so: “The Wind,” instead of ""The Wind, "" and so on

Yes, because as @catower explained in his answer to another question above, the default separator for the print() function is a space.
print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
That’s what sep=’ ’ means above.
Just like one of the benefits of using concatenation is customizing the outputted string, one of the benefits of passing arguments to print() with commas is it will automatically add the space for you. (Or a ‘,’ or a ', ’ or a ‘;’ depending on however you want the arguments to be separated.)
"
364,Can keyword arguments be used positionally?,"FAQ,Python FAQ","functions-py,q-a",3,"
I have a similar question. In the quiz, a function is defined as follows:
def update(new_value = 10):
old_value = new_value
It asks how to call the function with  new_value of 20.
The correct answer is
update(20)
So does this work because there is only one parameter for the function, so that the keyword new_value doesn’t need to be explicitly spelled out when calling the function? If there were more parameters, each with a default value, or some has default values and others don’t, how would it work? Would the keyword arguments need to be spelled out in those cases?
thanks
","
new_value is only a local variable, not accessible outside of the function. It is preset to 10, but takes on any value we pass in. If no value is passed in, then new_value becomes 10.
Multiple keywords are possible, but the position is critical.
>>> def foo(a = 1, b = 2, c = 3):
    return a * 4, b * 3, c * 2

>>> foo()
(4, 6, 6)
>>> foo(4)
(16, 6, 6)
>>> foo(4, 5)
(16, 15, 6)
>>> foo(4, 5, 6)
(16, 15, 12)
>>> 


Such a clear explanation! Thank you!
"
365,How can I look up the index of an item in my list?,"FAQ,Python FAQ","lists-functions,q-a",5,"
In below mentioned code I can get the number by using index value
heights = [61, 70, 67, 64, 65]
print(heights[2])
I am wondering what if i want to use number in order to find index. For example i want to find at what index is number 64 is?
Can we do this in python?
","
Hi @prateekjain2508,
Try this:
i = heights.index(64)
print(i)
print(heights[i])


… or write your own function:
def find_all(my_lst,  n):
    for i in range(len(my_lst)):
        if my_lst[i] == n:
            # do something with i

(Obviously, you could make a list of i’s, print them, or do anything you like with them.)
This also shows the cool tie-in between the range() function, the final list index, and list length.
:

The use of index is very helpful here. However, if there was another 64 in the list, this method would not capture the index of that second 64. Actually, I tried to do so but the printed result showed only the index of the 64 which was firstly in the list. Is this a drawback of “index”?  Maybe the solution here is one like that described by @patrickd314 in the same forum.

Yes, .index() has that drawback, but it also permits a start argument that would let us store the first index, then set the start to 1 past that, and search again, store that index, and repeat. See what you can come up with using this approach.
There is another object that can make it easier for us to find all the indices of matching items…enumerate. We find this in the module on iterators, so I won’t try to jump the queue here.
"
366,What is an axis in Numpy?,"FAQ,Python FAQ",,4,"
Question
In the context of this exercise, what is an axis in Numpy?
Answer
An axis is similar to a dimension. For a 2-dimensional array, there are 2 axes: vertical and horizontal.
When applying certain Numpy functions like np.mean(), we can specify what axis we want to calculate the values across.
For axis=0, this means that we apply a function along each “column”, or all values that occur vertically.
For axis=1, this means that we apply a function along each “row”, or all values horizontally.
Example
# Given the following 2-dimensional array
values = np.array([
[10, 20, 30, 40],
[50, 60, 70, 80],
])

# Axis=0
# along each ""column""
print np.mean(values, axis=0) 
# [30, 40, 50, 60]

# Axis=1
# along each ""row""
print np.mean(values, axis=1)
# [25, 65]

","
If you are having trouble grasping what axis means just remember that you are removing that dimension when you run mean or sum on that axis.
axis=0 removes the row dimension
axis=1 removes the column dimension
It’s a bit confusing because of how (x, y) coordinates are thought to run horizontally and vertically.

I believe that this quiz question and answer are poorly worded.

If this is an array  [1,2,3,4]
… and this is another [6,7,8,9]
then, as a two-dimensional array, we have
[[1,2,3,4],
[6,7,8,9]]
To my way of thinking, the “values that share an array” are  [1,2,3,4] and [6,7,8,9], which lie along axis 0 and “values that share an index” are for instance, [4, 9], for index = 2 along axis 1.
How is my thinking wrong?

@patrickd314: I totally agree… had me confused for a while. But somewhat clearer now.
"
367,How can I make the same_name function ignore the case of the strings?,"FAQ,Python FAQ",,7,"
Question
In this exercise, the same_name() function will compare the two names to see if they are equal. How can this be done so that it will ignore any differences in capitalization?
Answer
This can be done by converting the strings to all lower-case using lower() OR all upper-case using upper() before performing the equality test. The upper() and lower() methods are called on the string variables. For example, to compare the strings as lower-case, the check can be written as:
if your_name.lower() == my_name.lower():

The same would apply for using upper().
","
Could this also be done by putting the variable inside the upper/lower brackets? For example:
If lower(your_name) == lower(my_name):

sure, if you have a function named lower.

str.lower() is a function built into python.  You can use the below code in place of the code provided by ajaxninja66418 and get the same results.
Now I’m not sure if there are any benefits to using one over the other.
if str.lower(your_name) == str.lower(my_name):

Write your same_name function here:
def same_name(your_name, my_name):
if your_name == my_name:
return “His name is my name too.”
else:
return False
Uncomment these function calls to test your same_name function:
#print(same_name(“Colby”, “Colby”))
should print True
#print(same_name(“Tina”, “Amber”))
should print False
print(same_name(“John Jacob Jingleheimerschmidt”, “John Jacob Jingleheimerschmidt”))

You can do this with either the .upper() or .lower() method. Essentially you want to “standardize” the characters so that they are all either lowercase or uppercase. This ensures the function compares the character regardless of case. I used .upper for my code.
def same_name(your_name, my_name):
  #standardize both strings to uppercase so that function compares strings without regard to case deviations.  
  if (your_name.upper() == my_name.upper()):
    return True
  else:
    return False


So if,
if your_name.lower() == my_name.lower()

Is used to convert strings to lower (or upper) case letters.
Are there other ways of converting strings using the “string.xxxx()” method?
Also what are theses called when you use the "" . "" to change a string?
Thanks
"
368,What if I want to compare bit strings of uneven length?,"FAQ,Python FAQ",q-a,2,"
Question
What if I want to compare bit strings of uneven length?
Answer
That’s totally fine! It will line them up accordingly (from the right) and fill in 0s for the leftmost unfilled bits. At least this is what you can do visually to help.
If we want to & together the bit strings 1001 and 1001 1010, for example, we would write it out like this:
  0000 1001
& 1001 1010
-------------
  0000 1000

","
are you sure about that robot wiki.
"
369,Can the dog_years function utilize string formatting to produce the output?,"FAQ,Python FAQ",,14,"
Question
In this exercise, the instructions to create the string returned by the dog_years() function makes it appear like string formatting can be used. How would that be done?
Answer
Instead of using string concatenation and the str() function to produce the output, Python’s string formatting can be used. The following code example shows how to produce the desired output.
def dog_years(name, age):
    return ""{name}, you are {dog_age} years old in dog years"".format(name=name, dog_age=(age * 7))

","
def dog_years(name,age):
return f""{name}, you are {age*7} years old in dog years""
works as well

What about this code?
Write your dog_years function here:
def dog_years(name,age):
dog_years = age * 7
print(name+"", you are “+ str(dog_years)+
"" years old in dog years”)
return age*7
#print(dog_years(“Lola”, 16))
should print “Lola, you are 112 years old in dog years”
dog_years(“Lola”, 16)
The code returns the expected value, so… it´s ok or not?

The idea of this lesson is to replace concatenation with string formatting…
>>> def dog_years(name,age):
    dog_years = age * 7
    print(""{}, you are {} years old in dog years."".format(name, dog_years))
    return age * 7

>>> dog_years(""Lola"", 16)
Lola, you are 112 years old in dog years.
112
>>>

Can someone tell me where the .format concept was taught prior to this challenge? I do not remember that being covered up to that point.

The old course (Python 2) had a unit on string formatting, perhaps they omitted to include that unit in the Python 3 course? Can’t say, for sure.
Briefly, there are three ways of formatting strings:

% (modulo) placeholder
str.format() method

f-strings

The latter may not yet be supported in the LE but the other two are.
a = 'fox'
b = 'dog'

s = ""The quick brown %s jumped over the lazy %s"" % (a, b)

t = ""The quick brown {} jumped over the lazy {}"".format(a, b)

Note that with string formatting we do away with concatenation when interpolating variables; and, all those pesky quote marks.
You’ll find everything you need in this article…

https://pyformat.info/

To learn about f-string formatting, check here…

https://www.python.org/dev/peps/pep-0498/


If we are talking about this exercise, it does not require, nor does the “solution” offer old- or new-style string formatting, just concatenation.
I don’t think that any of the Python courses discuss string formatting  EDIT: My mistake - Thank you, @fox3773 , except for a bit on the %-style in Python 2.  Someone please correct me if I’m wrong.
It’s well worth your while (and quite easy, the basic stuff, at least) to pick it up.  Look here, for instance.

The Python 3 course does have 2 exercises covering the .format() string method in lesson 6: strings. I don’t think any other ways to format strings are mentioned, or at least they are never included in any of the exercises.
As @jjpeters1986 mentioned though it is definitely not something that has been covered yet at this point in the coarse.
Even so, I liked how these questions at the end of exercises sometimes touched on concepts or methods / functions, that the coarse had not yet directly covered. This one in particular I happened to find very useful as I absolutely hated concatenating strings together, and I also just think it looks ugly personally. So after seeing this post I was happily using the .format() method far before it is officially covered much later on in the coarse.

Thank you @patrickd314 @mtf @fox3773 for your responses. I’m just happy to know that I have a community of other people to help me out!




 kingkoalakingdom:

return f""{name}, you are {age*7} years old in dog years""


Hi kingkoalakingdom,
What does the “f” stand for?
I have simply written:
return name+"", you are ""+str(age*7)+"" years old in dog years""
Thank you for the clarification!




 janosh:

What does the “f” stand for?


Do a quick search for f-string, the newest form of string formatting in Python (since 3.6 or 3.7).




 mtf:

f-string


Thank you very much!

This is another way to write the same function
def dog_years(name, age):
return “{}, you are {} years old in dog years”.format(name, age*7 )

I tried many formats, all giving the “Lola, you are 112 years old in dog years” format.
Some examples:
def dog_years(name, age):
dog_years = age * 7
return “{}, you are {} years old in dog years”.format(name, dog_years)
OR
def dog_years(name, age):
return name + “, your are "" + str(age*7) + "" years old in dog years”
But here is the only one that the exercise took as valid:
def dog_years(name, age):
dog_years = age * 7
return name + “, you are "" + str(dog_years) + "" years old in dog years”
Hope it helps
"
370,Why do I have to re-define all of my instance variables in ElectricCar’s __init__?,"FAQ,Python FAQ",,5,"
Question
Why do I have to re-define all of my instance variables in ElectricCar’s init?
Answer
If we override a method, then the new method must be defined in such a way that it does everything you want it to do, which may include everything from the original method! If that’s the case, we’ve learned about calling the parent method by using the super keyword, so that’ll save us some time.
We can just call the parent Car __init__() method by using the super keyword that we learned about earlier, and then add whatever we like afterwards, like this:
def __init__(self, model, color, mpg, battery_type):
    super(ElectricCar, self).__init__(model, color, mpg)
    # Add code to define battery_type instance variable here!

That saves us the trouble of rewriting those lines of code we already wrote, while allowing us to add more to the end for our battery_type!
","
Why do we need to call the ‘drive_car’ method to change the condition of the car? Shouldn’t it change just by printing out the ‘condition’ once as the whole class will be ran by Python?

Why must we provide the ‘model’, ‘color’, and ‘mpg’ arguments into the init function of the ElectricCar class? Aren’t these already added in from the super call? At the moment, this method just seems like a waste of time as oppose to just redefining the init function. Although, I’m probably wrong.




 jjhiggins97:

Aren’t these already added in from the super call?


No, since the instance is an ElectricCar, the values are not passed in to the Car class. We pass all the values into the ElectricCar as parameters, but hand the values up to the Car class to be instantiated.
 super().__init__(params)

invokes the __init__ method of the super class and initializes the parameters so the derived class will have those attributes set.

Hi, this could be myopic to the extent of the exercise and/or dated to Py2  but still thought it worth sharing: (considered posting on How can I define and use a __repr__ method? but I think this is better off here)
I follow the logic of  a super call to the Parent class at initialization of a Child class with both inherited and additional variables and methods. Had a mega aha moment when I realized our display_car method was really a  __repr__()
So I defined a representation for Parent that’s  super called at Child ‘re’-representation.
It makes sense to me in this delimited context, and certainly pieced and cleaned everything together from the lesson (for me). But I’m curious if this is an ideal/honest use of __repr__() for an instance of a derived class…
class Car(object):
  condition = ""new""
  def __init__(self, model, color, mpg):
    self.model = model
    self.color = color
    self.mpg   = mpg

  def drive_car(self):
    self.condition = ""used""
  
  def __repr__(self):
    return ""This is a %s %s %s with %s MPG"" % (self.condition, self.color, self.model, str(self.mpg))

class ElectricCar(Car):
  def __init__(self, model, color, mpg, battery_type):
    super(ElectricCar, self).__init__(model, color, mpg)
    self.battery_type = battery_type

  def drive_car(self):
    self.condition = ""pretty good""

  def __repr__(self):
    return super(ElectricCar, self).__repr__() + "" on a %s battery"" % (self.battery_type)


my_car = ElectricCar(""DeLorean"", ""silver"", 88, ""molten salt"")

my_car.drive_car()
print my_car 

#This is a pretty good silver DeLorean with 88 MPG on a molten salt battery#



"
371,"How is the ""five-number-summary"" helpful to understand a dataset?","FAQ,Python FAQ",q-a,3,"
Question
In the context of this exercise, how is the “five-number-summary” helpful to understand a dataset?
Answer
The five-number summary consists of these values for a dataset:
minimum
1st quartile
median
3rd quartile
maximum
With these values, we are able to get a stronger understanding of the dataset as a whole.
With this summary, we can compute the Interquartile Range, or IQR, which is computed as the difference of the 3rd quartile and the 1st quartile. This value tells us how spread the data is. If this value is low, then the data has little variance, and conversely, if the value is large, the data has a large variance.
The five-number-summary can also be helpful to determine outliers, by understanding the range of data by knowing the maximum and minimum values.
The summary is sometimes more reliable than depending on just the mean, especially when the data is skewed, because the mean is affected by outliers, while the quartiles and the median are not as affected by outliers.
We can also compare the five-number-summaries of different datasets to see how similar or different they are.
","



 jephos249:

If this value is low, then the data has little variance, and conversely, if the value is large, the data has a large variance.


Low, large, in relation to what? To the median?
If this is the case, would it be right if we alternatively said sth like "" the closer IQR is to the median, the less the variance is …""  ?

I believe it is low, large  or (minimun or maximun) relative to the orderly dataset .
The dataset is sorted before any evaluation
"
372,Is there another method to combine strings other than the concatenation operation?,"FAQ,Python FAQ",,15,"
Question
In this exercise, the strings for the first and last names are joined using the + operator. Can this be done in another way?
Answer
Yes, string formatting would be another option which could be used to construct a string. The following code example shows a method to produce the same result as the + operator using Python’s string formatting. A new string is constructed using string formatting and is then returned from the function.
def introduction2(first_name, last_name):
  return ""{last}, {first} {last}"".format(first=first_name,last=last_name)

","
Which one of the two methods is considered “better practice in coding”?
The string formatting seems a little bit complicated to me. (I´m a newbie to Python 3).

Concatenation is not nearly as elegant as string formatting, imho. This way there is only one set of quotes and everything inside can be spaced and punctuated to suit. The example above uses keywords, but we could easily use just placeholders…
""{} {}"".format(first_name, last_name)

The old method is modulo formatting,
""%s %s"" % (first_name, last_name)

and the newest method is f-string which was introduced in Python 3.6 which uses direct interpolation similar to Ruby and ES6+.
Read up on the various approaches and pick one to use consistently in your work.

Thank you very much for your fast reply 

This works:
def introduction(first_name, last_name):
  return f""{last_name}, {first_name} {last_name}""


No, it doesn’t. Your code throws an error. Mind the “f” directly after your “return” statement. Plus, even if you remove the f, regardless of the input, the output will always be:
{last_name}, {first_name} {last_name}
Apparently you have to add the .format() after the string in order for the code to work the way it should.

It does though you have to assign the value returned by the function call to a variable, then print that variable. I find it interesting because the message variable can be reused later.
For what I understand, the f function converts the 2 parameters to formatted strings. So in the function call you need 2 strings (“John”, “Doe”) as arguments. But if you simply call the function, nothing happens. If you print(introduction), Python prints the location of value returned (i.e: <function introduction at 0x7f3ee41d0e18>).
def introduction(first_name, last_name):
  return f""{last_name}, {first_name} {last_name}""

message = introduction(""John"", ""Doe"")
print(message) 

Alternatively, you can print the string in the terminal by using print inside the function using a similar syntax.
def introduction(first_name, last_name):
  print(f""{last_name}, {first_name} {last_name}"")

introduction(""John"", ""Doe"")

I hope my explanation makes sense. I’m pretty new to this and trying different approaches to get a better understanding.

It does work in Python 3.6 and above. CC’s LE uses 3.5.

As of now string formatting like that does work, the learning environment has been updated.

def introduction(first_name, last_name):
return print(last_name +"", ""+ first_name, last_name+ “.”)
The code I’m using above is coming back as an error. Could someone explain why?




 rik07:

return print(last_name +"", ""+ first_name, last_name+ “.”)


Is that needed in your expression?

The instructions said to return the last_name followed by a comma, a space, first_name another space, and finally last_name.

Okay, I see. So it follows that since you are concatenating two variables, that comma does not belong.
var_b + "", "" + var_a + "" "" + var_b

Note the space character with no comma.

Ohh I see now! Thanks for your help.

You’re welcome. Concatenation is a bit of a pill to swallow but once it is understood, should not give you any more problems.
Note also that we can assign and store formatted strings, not just print them.
c = ""%s, %s %s"" % (var_b, var_a, var_b)

That’s the legacy formatting inherited from C.
c = ""{}, {} {}"".format(var_b, var_a, var_b)

or,
c = ""{2}, {1} {2}"".format(var_a, var_b)

or,
c = ""{b}, {a} {b}"".format(a=var_a, b=var_b)

and the latest version, f-string, which is demonstrated a couple posts above. All of these can be assigned, and will retain the formatting.
Formatting does go one step further in that we can write a format and assign it, then apply it to data later to create the finished string. This is a topic that is worth following up when you have some time to read up and practice with the various methods.
"
373,"When we append the list's length to itself, what value would be appended?","FAQ,Python FAQ",,5,"
Question
In this code challenge, we are appending the list’s length to itself. If we append the list’s length to itself, what value would be appended, the previous length or the length after the value was appended?
Answer
Following the order of operations, this will calculate the list’s length first, then append that value to it.
To explain what this means, say we had a list of elements
list = [10, 20, 30].
If we call this method on the list,
.append(len(list))
because of operator precedence, the expression inside parentheses () will be evaluated first. This will evaluate to the current length of the list, 3, before it is appended, and essentially become the same as running this,
.append(3)
which would update the list to
[10, 20, 30, 3]
If, instead, the .append() happened first, then the value of len(list) might have been 4 instead, but because of operator precedence, this issue will not occur.
","
3 posts were merged into an existing topic: Why does my code return None?

6 posts were split to a new topic: Ways we could extend the list

This is how I coded this lesson

#Write your function here
def append_size(lst):
  total_elements = len(lst)
  lst.append(total_elements)
  return lst





Here’s how I did it

def append_size(lst):

  size = len(lst)
  
  lst.append(size)
  
  return lst


"
374,What are ways we can combine different list slices?,"FAQ,Python FAQ",,12,"
Question
In this code challenge, one possible way to remove an element might be by combining list slices. What are ways that we can combine list slices?
Answer
Since list slices are themselves lists, we can simply combine them as we would lists. The following are some ways you can use to combine different lists.
Say, for example, we have the following list and two list slices.
list = [1, 2, 3, 4, 5, 6]

list1 = list[:3] # [1, 2, 3]
list2 = list[4:] # [5, 6]

One way to combine them is using the + operator, which will create a new list with the first list’s elements followed by the second list’s elements. For example,
list2 + list1 # [5, 6, 1, 2, 3]

Another way to combine lists is using the .extend() method in Python. This method is applied to a list, and adds the elements from the list passed as an argument to the end of that list. This updates the list in-place.
list1.extend(list2)
print(list1) # [1, 2, 3, 5, 6]

One other way of combining lists is to utilize a loop. You can iterate over the elements of the list you are adding to the other list, and use .append() to add them one at a time. Like .extend(), .append() updates the list in-place.
for element in list2:
  list1.append(element)

print(list1) # [1, 2, 3, 5, 6]

","
Wondering if this code is correct and if so is there a reason we shouldn’t use del to solve this challenge? It seems like it would be a simpler solution than splitting and combining.
def remove_middle(lst,start,end):
  end+=1
  del lst[start:end]
  return lst

print(remove_middle([4, 8, 15, 16, 23, 42], 1, 3))


Much of programming pedagogy seems to consist of asking students to “re-invent the wheel” by coding functionality that is already represented in the list of built-in functions.  max() and min() are classic examples. You have certainly hit upon another.
Is it wrong?  Should someone be penalized for taking the trouble to research the problem?  I suppose that’s up to the instructor.  In my opinion, if you understand the “long way,” you are to be commended for discovering something easier, or at least more direct.

Hello friends,
I’m very much a beginner at python and this was my logic flow on how I came about solving the exercise with what has been taught purely through this course. Hope it provides help to others who are starting out just like me 
e.g.
lst =  [4, 8, 15, 16, 23, 42]
print(lst[1])        <<< prints 8
print(lst[3])       <<< prints 16
print(lst[:1])       <<< prints [4]
print(lst[3+1:])   <<< prints [23, 42]

^since we have to remove the ending index too, +1 lets us begin on the next index
^ so, we must remove 8, 15, 16

new_lst=[]

new_lst = new_lst + lst[:1] + lst[3+1:]
print(new_lst)

def remove_middle(lst, start, end):
  new_lst = []
  new_lst = new_lst + lst[:start] + lst[end+1:]
  return new_lst

# streamlined version (you don't need a new list)

def remove_middle(lst, start, end):
  return lst[:start] + lst[end+1:]

print(remove_middle([4, 8, 15, 16, 23, 42], 1, 3))

#prints [4, 23, 42]


Thank you, @dtsyi! As another beginner whose only frame of reference is what Codecademy has taught me, this logic flow really made it click for me. 
On to the next lesson!

Thank you so much @dtsyi your explanation helped a lot.

Beautiful in its simplicity.

So much clearer with this example.
Thank you

Thank you, this is very helpful

3 posts were split to a new topic: About list slicing

thank you for much for posting this, crystal clear!

Here is my solution. It took me a while but I think its pretty simple and covers only stuff taught in the course (I think)
def remove_middle(lst,start,end):
  end = end+1
  lst1 = lst[:start]
  lst2 = lst[end:]
  lst = lst1[0:] + lst2[0:]
  return lst

#Uncomment the line below when your function is done
print(remove_middle([4, 8, 15, 16, 23, 42], 1, 3))

"
375,What are some common errors when creating loops?,"FAQ,Python FAQ",q-a,3,"
Question
What are some common errors when creating loops?
Answer
Loops can be tricky if you aren’t careful, and can end up crashing your program if they aren’t given conditions that can become False eventually. Some common issues are:

Conditions that never possibly become False, causing infinite loops and crashing.
Forgetting to put the colon : after the loop’s declaration.
Not indenting code you want to run inside of a loop

","
what is the point(logic) of else in the below code:
fruits = [‘banana’, ‘apple’, ‘orange’, ‘tomato’, ‘pear’, ‘grape’]
print ‘You have…’
for f in fruits:
if f == ‘tomato’:
print ‘A tomato is not a fruit!’
print ‘A’, f
else:
print ‘A fine selection of fruits!’

Well, in the code you’ve given there it is unnecessary, but that is being used for practice. If your ‘f’ does not ever equal ‘tomato’ it will print out something different. This is just showing you how the for/if/else works.
"
376,Is it possible to count the occurrences of multiple items in a list using a single loop?,"FAQ,Python FAQ",,4,"
Question
In this code challenge, we need to count the occurrences of two items in the same list. Is it possible to count the occurrences of multiple items in a list using a single loop?
Answer
Yes, this is absolutely possible. What you can do is, as you iterate over each element of the list, you can utilize if and elif statements to check if each element matches any of the values being counted.
We can do this for any number of values, as long as we have an if or elif statement for each one. For example, if we wanted to get the occurrences of three different values in a list in a single loop, it would look as follows.
# Values to find occurrences of
value1 = 1
value2 = 2 
value3 = 3

# Variables to keep track of each count
count1 = 0
count2 = 0
count3 = 0

# Iterate over the list one time,
# and for each element check if
# it matches any of our values.
# If so, increment its count.
for element in list:
  if element == value1:
    count1 += 1
  elif element == value2:
    count2 += 1
  elif element == value3:
    count3 += 1

","
def more_frequent_item(lst, item1, item2):
  if lst.count(item1) >= lst.count(item2):
    return item1
  return item2
#Uncomment the line below when your function is done
print(more_frequent_item([2, 3, 3, 2, 3, 2, 3, 2, 3], 2, 3))


This is the code I wrote hope it helps everyone out

def more_frequent_item(lst,item1,item2):
 if(lst.count(item1 > lst.count(item2))):
    return item1
  else:
    return item2




Here’s a definitely  longer way about it , but it works!
def more_frequent_item(lst,item1,item2):
  check1 = lst.count(item1)
  check2 = lst.count(item2)
  
  if check1 < check2:
    return item2
  elif check2 < check1:
    return item1
  elif check2 == check1:
    return item1
  
print(more_frequent_item([2, 3, 3, 2, 3, 2, 3, 2, 3], 2, 3))
"
377,Why do I get a SyntaxError when defining my class?,"FAQ,Python FAQ","classes,q-a",6,"
I am having a problem with the compiler with this exercise. The very first step gives me the error: “SyntaxError: unexpected EOF while parsing” with the code:
class Rules:
I checked and its the exact same as the solution given by codecademy (not much difficulty in this very first step…)
Any ideas on why?
THanks!
","
i had the same problem.
i think the reason why is because just wrighting the class is not the right proper syntaxt.
an class alawys needs to be defined. if you want to define an empty class you should use.
class Rules:
pass
and then later when you continue the code you can get rid of pass that is how i did it

i dont understand why in the example is:
class Dog():
dog_time_dilation = 7
and in the excersise is:
class Rules:
with out (), whats the difference?, i was using parentesis, as class Rules(): and i ve got the error metioned : “SyntaxError: unexpected EOF while parsing”

All the Python 3 documentation I’ve read does not include parens on class definitions, although Python 2 used to include class Foo(object) and both require parens on derived classes for obvious reasons.
class Rules:
    pass

We must include at least pass for the syntax to be complete at this stage. Just a signature line is not enough and will raise a syntax error. The Shell will not let us return to the command prompt if we haven’t added the pass line.
Bottom line, until someone pipes in with better information, it doesn’t seem to make any difference. The convention is to not use them, so that would be the preferable option, as I see it.

thanks for the answer, i was confused on when to use them, 
i think the parentesis are the error, maybe the example of codeacademy is incorrect??

screen.jpg1284×948 426 KB


I cannot produce any errors with or without the parens on the definition line.Going forward it might be best to not use them.
"
378,Does Codecademy check for punctuation?,"FAQ,Python FAQ",q-a,4,"
Question
Does Codecademy check for punctuation?
Answer
It sure does! If you ever feel you’ve entered what it asks for in the instructions, but it’s marking it wrong, take a second look and be sure you have the same capitalization, spacing, and punctuation if it’s a string. Once you get to the free form projects, though, you’ll have much more room for creativity! Take a look at the code below for a passing and failing example:
# The instructions say “Create a new variable brian and assign it the string ""Hello life!"".”

# Passing:
brian = “Hello life!”

# Failing
Brian = “Hello life!”
brian = “hello life”
brian = “Hello life.”

","
The only check would be for exact string patterns. When given a string in the instructions, be sure to use that exact string. Be wary of straying from the instructions and taking liberties or embellishing for effect. Experiments will most always come back as not accepted.

Hi, just an FYI, this isn’t true, at least for this example. I used an upper-case L in life and passed. Might be confusing to some folks.

Thx 
"
379,What is an interpreted language?,"FAQ,Python FAQ",q-a,8,"
Question
The lesson description calls Python an “interpreted” language. What does that mean?
Answer
An interpreter takes the code you write an executes (runs) whatever actions you specified, creates the variables you created, and does a lot of behind-the-scenes work to ensure it runs smoothly or tells you about errors.
Python is called an interpreted language because it goes through an interpreter, which turns code you write into the language understood by your computer’s processor. Later on when you work on a project on your own computer, you will download and use the Python interpreter to be able to write Python code and execute it on your own!
","
An interpreter is basically very different from a compiler.
The interpreter is used mostly for scripting languages like python etc, which directly executes the code (no separate stages for compiling the code and then executing it) by converting it into an intermediate code usually called the byte code. This definitely increases the speed of execution.
This byte code is platform independent which can later be run on different platforms so the code is portable.

Except platform independent like Java, the compiled code is more efficient
with optimization even recently Java made a lot of improvement for performance.
Besides, in real-time operations, the interpreted language is normally not fast enough
to handle interrupts or real-time response in the sub-micron seconds.
In terms of sizing, the compiled language can take advantage of machine/hardware
architecture to use directly assembly codes for specific operations like copy, move
just as under x86 or ARM.

Python is an “interpreted” language.
This means it uses an interpreter. An interpreter is very different from the compiler.
An interpreter executes the statements of code “one-by-one” whereas the compiler executes the code entirely and lists all possible errors at a time.
That’s why python shows only one error message even though your code has multiple errors. This will help you to clear errors easily and it definitely will increase the execution speed.

thanks …

noice …

u like carly…uhhhnjjhdhnfnd

soz that was dan!!!
"
380,Can I call a function inside of a print function?,"FAQ,Python FAQ","functions-py,q-a",10,"
current_year = 2048

def calculate_age(birth_year):
  age = current_year - birth_year
  return age

print(current_year)

print(calculate_age(1970))

Does print(calculate_age(1970)) call the function? Or is the function not called in this example? I’m confused.
","



 ghulseman:

print(calculate_age(1970)) call the function?


Yes, it does. The return value is what will print.

yes print(calculate_age(1970)) will call the function and since in the function calculate_age(1970) we asked it to return age hence the statement print(calculate_age(1970)) will print the age of the person (ie78)

Yes but as a “call” they aren’t asking for a call in the context of a print function, they want you to “call” the defined parent function “calculate_age()”…

As noted above, print(calculate_age(1970)) absolutely does involve a function call.
I don’t see where calling the function is asked for in this exercise,  but if you were to call the function without reference to any print() expression or assignment to a variable, the function would certainly run; its returned value would be  “orphaned” (assigned to no variable or function call, thus eligible for garbage collection), and the function and its variables would disappear from the call stack.
In other words, from our standpoint as outside observers, nothing would happen (except that you might see “Run calculate_age.py” on your shell.)

Got the correction thank you and the call is simply in the function print as to display the function on screen. Understood.
Or better… in the console.

thx , I was searching for an answer , so thr return is what did the trick?

As the above example shows, you can call a function in Python using Print.
Python allows different ways to accomplish the same task, and beginners may be confused by using print to call a function.
We might be inclined to call and then print the calculated result from the function like this:
current_year = 2048

def calculate_age(birth_year):
  age = current_year - birth_year
  return age

print(current_year)
current_age=(calculate_age(1970))
print(current_age)

The results are the same. But either way, you would still need the Return to get the calculated result out of the function and assign to the variable: “current_age”
Yet another option is to Print the calculated result from inside the function. In that case Print would replace Return. Hope that helps.

Yeah thx, actually that is the way I imagined it first. I know now how both work and that print can actually call a function




 mohammadrefaat603086:

print can actually call a function


Print does not call the function, it prints the return value. The call is made in the argument to the print function.
Any function may take a function as its argument.
"
381,What is a `namespace` in python?,"FAQ,Python FAQ","classes,q-a",3,"
may anyone explain the meaning of "" namespace "" in python ?
","
Other languages might use that word for something specific, python doesn’t.
It’s spaces for names, similar to how two directories in your file system are spaces where filenames may be, and two different spaces can have something with the same name in it, but they’re still different things because they’re in different spaces.
A module (a .py file usually) is a namespace, you can define names (variables) there.

@ionatan THANKS FOR MAKING THAT CLEAR !!
"
382,Do I need to count `n`?,"FAQ,Python FAQ","lists-functions,q-a",3,"
Why don’t I have to use .count() on the —n---- value?
","
Because it is a value, not an iterable, so has nothing to count. The purpose here is to determine if the item count is greater than N.
m = lst.count(item)
return m > n

Thank you mtf! That helps a lot it’s those little things I’m trying to understand. I did a bunch of research online too just couldn’t find exactly what I needed.
"
383,What are the different modes a file can be opened with?,"FAQ,Python FAQ",q-a,2,"
Question
What are the different modes a file can be opened with?
Answer
Python’s open() function is capable of opening a file with several different mode options, which come in handy for different use cases! Below is a list of all the modes available, as seen on the documentation page:

image.png1538×610 54.3 KB

","
What does “truncating” mean? What’s the purpose and how is it used?
"
384,How can I empty the contents of a list?,"FAQ,Python FAQ",,8,"
Question
If I have a list containing items, how can I empty or delete all the contents of the list?
Answer
There are two ways to empty an existing list. The first way is to just assign the list variable to an empty list. In this case, the old list and its contents are automatically deleted by Python. This is shown in the following code example.
list1 = [ 1, 2, 3, 4, 5, 6, 7 ]
list1 = []

The second method is to use the del() function to delete all the elements of the list. This forces the removal of all the items immediately instead of letting Python delete the contents at some time of its choosing. Both methods produce the same end result which is that the list will be empty of contents.
list2 = [ 10, 20, 30, 40, 50, 60, 70 ]
del list2[:]

","
In the second example above it is important to include the slice subscript, else the variable itself will be deleted.
>>> list2 = [ 10, 20, 30, 40, 50, 60, 70 ]
>>> del list2[:]
>>> list2
[]
>>> isinstance(list2, list)
True
>>> list2 = [ 10, 20, 30, 40, 50, 60, 70 ]
>>> del list2
>>> isinstance(list2, list)
Traceback (most recent call last):
  File ""<pyshell#58>"", line 1, in <module>
    isinstance(list2, list)
NameError: name 'list2' is not defined
>>> 

Clearly, the first example is the preferred approach, assign an empty list, since it is not likely to ever throw a wrench into the proceedings (a bug that could be tricky to find).

what if we want to delete a single or some specific elements from the list? how can we do that?

We have two choices,

delete by value
delete by index

Which is it you wish to do?

Could you please explain both? I want to learn.

Have you explored the docs.python.org material, yet, just from a familiarization perspective. It is a good first step. Take the time to look things over then come back and start learning how to put the pieces together. It’s not a novel; just focus on the parts your are most concerned with at the time.

How to delete item or items from a list python


Does this mean, that when we use :
list1 = [1,2,3,4]
list1  = 
delete’s the list1 i.e. python does not anymore remember us creating one?

The first entry has list1 referencing a list. That reference remains intact until the variable is given a new reference, the empty list. It no longer references the populated list, which if no other references exist will be garbage collected and the memory re-allocated.
It appears as though the second assignment has just emptied the list, but that is not so. If we check the ID of each reference we will see they are not the same object.
Consider,
>>> list1 = [1, 2, 3, 4]
>>> id(list1)
48786408
>>> del list1[:]
>>> list1
[]
>>> id(list1)
48786408
>>> list1[:] = [1, 2, 3, 4]
>>> list1
[1, 2, 3, 4]
>>> id(list1)
48786408
>>> 

Notice that as long we operate on the contents of the list, the ID remains the same, even when the list is emptied (but not replaced).
Now lets see what happens when we replace the list.
>>> list1 = []
>>> id(list1)
48829504
>>> 

It now references a completely new object. As mentioned, if no other references exist within the program to the original object, the earlier ID will no longer exist.
"
385,What are good reasons to use string formatting?,"FAQ,Python FAQ","q-a,strings",10,"
According to this lesson, the .format() method is used instead of string concatenations for better code legibility, however, I find the format method to be less legible than string concatenations personally.
I’m wondering, which method does everyone else find more legible? And for the more experienced Python coders out there - what is the de facto standard that is more regularly used by professionals?
","
Concatenation does not provide any means for formatting, which is the purpose of all three methods in Python:

% formatting
str.format
f-strings

With formatting we can restrict output length. pad the output, round numbers, and so on with little manual manipulation.
See the pyformat link posted above for more details.

Ok now those are good reasons to use .format(), thanks for the clarification!

@zackary.pugh - Hello!
I definitely find the str.format() method to be more legible! While I am still a beginner, I can think of a few times where I found that concatenating looked less seemly than str.format() and felt a bit arduous.
For example, I can remember times in which I wanted to concatenate strings with integers, and I had to use str() in order to change the integer into a string during the concatenation process and it just felt a little uncomfortable.
#using concatenation
amount = 30
random_string = ""I want to receive $"" + str(amount) + "" for my birthday.""
print(random_string)
#prints:
#I want to receive $30 for my birthday.

#using str.format()
amount = 30
random_string = ""I want to receive ${} for my birthday."".format(amount)
print(random_string)
#prints:
#I want to receive $30 for my birthday.

I also feel like it can be more difficult to remember to add necessary spaces when concatenating strings. In the example above, I initially forgot to put a space before the “for” in “for my birthday” in the concatenation example, but it felt smooth and easy to add spaces in the str.format() example because the {} felt like a pleasant placeholder.
However, I also believe that whether concatenation is more legible than the str.format() method depends on the context. I suppose I can just think of quite a few contexts in which the str.format() method feels much nicer than concatenation!

Hello Okaraman, it’s wonderful to get someone else’s detailed thoughts, thank you!
I tend to agree, a lot of it seems to be context and personal preference - for that reason I plan on probably using the Python community-standard to make it easier for others to read my code!

If you like str.format(), you may also like f-string. You can also use additional formatting with either method.
#using str.format() with additional float formatting
amount = 30
random_string = ""I want to receive ${:.2f} for my birthday."".format(amount)
print(random_string)
#prints:
#I want to receive $30.00 for my birthday.

#using f-string with additional float formatting
amount = 30
random_string = f""I want to receive ${amount:.2f} for my birthday.""
print(random_string)
#prints:
#I want to receive $30.00 for my birthday.

Happy coding!

Hi @midlindner!
Thank you for sharing this with me! I’m actually very glad you mentioned this float formatting in particular because I’m currently working on a project that is adding up a number of dollar amounts in a list, saving this number to a variable, and printing that variable. The number that is printed has 13 decimal places, so I tried looking up how to have the number rounded to 2 decimal places and then I saw this response from you! How convenient! 
I recently heard the term f-string, so I am glad you showed me an example of this as well! It appears to be a step up from str.format() as you can include the variable in the string and all you need outside of the string is a singular f - that seems quite legible and pleasant-looking!
Out of curiosity, do you know if there are any downsides/drawbacks of using f-strings as opposed to str.format()? Or is this another instance of the best method to use depends on the context of the situation in which it is being used?

I don’t know of any drawbacks/advantages regarding f-string vs. str.format(). I believe it’s simply a matter of preference. When including the float or other formatting, some may consider one version easier to read than the other.




 okaraman7:

2 decimal places


What you probably mean is that you’re counting cents, not dollars. Use int.
Floats are for when you wish to approximate something, what you’re doing should probably be exact.



 midlindner:

drawbacks/advantages regarding f-string vs. str.format()


the format method can be called at a later time, f-strings are immediately interpolated




 ionatan:

the format method can be called at a later time, f-strings are immediately interpolated


Hadn’t considered that, but makes sense. Thanks!
"
386,Do dictionaries preserve order now?,"FAQ,Python FAQ","lists-dictionaries,q-a",4,"
user_ids = {“teraCoder”: 9018293, “proProgrammer”: 119238}
user_ids.update({“theLooper”: 138475, “stringQueen”: 85739})
print(user_ids)
When I run the above in Codeacademy the result is:
{‘stringQueen’: 85739, ‘theLooper’: 138475, ‘teraCoder’: 9018293, ‘proProgrammer’: 119238}
When I run the same code in my text editor, the result is:
{‘teraCoder’: 9018293, ‘proProgrammer’: 119238, ‘theLooper’: 138475, ‘stringQueen’: 85739}
Why the difference in the ordering?
The output of my text editor seems more rational to me since the additions are placed after the original content of the dictionary.
","



 austinknowscodes:

Why the difference in the ordering?


because only since python 3.6 dictionaries preserve order

whenever printing the dictionaries the sequence of key:value pair outputted are different.
user_ids = {""teraCoder"": 9018293, ""proProgrammer"": 119238}
user_ids.update({""theLooper"": 138475, ""stringQueen"": 85739})
print(user_ids)

Run 1 output:
#{'teraCoder': 9018293, 'proProgrammer': 119238, 'theLooper': 138475, 'stringQueen': 85739}

Run 2 output:
#{'proProgrammer': 119238, 'teraCoder': 9018293, 'theLooper': 138475, 'stringQueen': 85739}

why does this happen?

That is the nature of dictionaries.  The price paid for lightning-fast (i.e., nearly constant-time) search of keys is that we cannot depend on their order within the dictionary. (This is the classic viewpoint, and may be slowly changing, i.e., in Python 3.6 and above, insertion order of dictionaries is preserved.)  In general, you should avoid any code that depends upon the order of key:value pairs in a dictionary.
If you must make use of order, the OrderedDict subclass of the collections module is available.
"
387,What other escape sequences are there?,"FAQ,Python FAQ",,4,"
Question
In the context of this exercise, what other escape sequences are there?
Answer
There are several other escape sequences available in addition to \n and \t. A few useful ones to know about are the following.
The quotation escape sequences \' and \"" are useful when adding these quotes within a string wrapped in the same type of quotations.
# Single quotations
string = 'I\'m coding!'
print(string) # I'm coding!

# Double quotations
string2 = ""\""Hello World!\""""
print(string2) # ""Hello World!""

Another useful escape sequence to know about is the backslash \\, which allows you to show backslashes without it converting to some escape sequence in the string.
string3 = ""The \\n escape sequence adds a newline""
print(string3) # The \n escape sequence adds a newline

For the rest of the available escape sequences, feel free to check out the documentation.
","



 jephos249:

the documentation.


Hi! I’ve been using Code Academy for a short time. I’ve seen a few people refer to some type of “documentation”. Where can it be found? Thanks! 

Here: https://docs.python.org/3/index.html

2 posts were merged into an existing topic: What does the backslash in the variable declaration mean? (=\)
"
388,Why is len(lst) > 0 necessary for solving the list challenge?,"FAQ,Python FAQ",loops-py,18,"
Hi, I have some question on this one.
1)Does lst[0] means that every number in the list are processed by the loop?
2) Why is the code “len(lst) > 0” crucial in the loop?
","
This could be wrong im a noob but I think this is why:

lst[0] is basically selecting the 0 ‘index’ in the list = [1, 2, 3] int 1 is index 0, int 2 is index 1 etc … so when it loops after slicing the first even number

lst = lst(1:)
the lst index 0 will also change! Our lst here will become lst = [2, 3] with 0 index now being int 2. The loop will then iterate again and again until…
This … 2) len(lst) > 0 is crucial because if we don’t we enter in to an infinite loop? or something imagine if the list was all even integers once the loop has checked all the integers it has none to check which I think would create an infinite loop.
Sorry I could be a million percent wrong! But thought i’d try for my own benefit as well as yours!
Happy coding 

@ajikhan7086997408 your solution is correct, thank you!

Not quite. There will be no infinite loop, but instead an IndexError will be raised.
The purpose of checking that the length is greater than zero is to prevent attempting to access an index of an empty list–There are no indices to access.

@mtf but here in the last exercise, in which scenario we will attempt to access an index of an empty list .
This worked for me
#Write your function here
def delete_starting_evens(lst) :
for number in lst :
print (number)
if number % 2 == 0 :
lst = lst[1:]
else :
break
return lst
#Uncomment the lines below when your function is done
#print(delete_starting_evens([4, 8, 10, 11, 12, 15]))
print(delete_starting_evens([4, 8, 10]))




 arindamsen8858065950:

for number in lst :


Consider the possibility we are not accessing an empty list, but simply not running a loop on one.

@mtf Please elaborate with example

>>> for x in []:
	print (x)
else:
	print (""Empty list"")

	
Empty list
>>> 

What this demonstrates is that the loop does not execute on the empty list.

Aside
Until we see how your code is indented, we cannot provide an example based upon it. I’m pointing at mere details, for the moment.

… to continue,
>>> [][1:]
[]
>>> 

This demonstrates that slice is a method of the list object. It must have its own fail check in determining the returned list, since a list is what gets returned.
>>> for x in []:
	print (x)
else:
	print ([][1:])

	
[]
>>> 


>>> print ([][0])

Traceback (most recent call last):
  File ""<pyshell#10>"", line 1, in <module>
    print ([][0])
IndexError: list index out of range
>>> print ([][0:])
[]
>>> 


def delete_starting_evens(lst):
while (len(lst)>0):
if lst[0] % 2 == 0:
lst = lst[1:]
return lst
will this create a infinite loop?




 harishramesh6788:

will this create a infinite loop?


Welcome, @harishramesh6788,
If the first value in the list is odd, then yes. Further, if the list contains any odd numbers, it will loop forever since the list length never changes.

Please can you expatiate?
def delete_starting_evens(lst):
  while (len(lst) > 0 and lst[0] % 2 == 0):
    lst = lst[1:]
  return lst


I cant just understand why we need to check the length of the elements .
2… lst[0] % 2 == 0):,     lst = lst[1:]… the original element on indext [1] is even ie 8, so why did the function take it off. Plus, i cant find where the function says the original element on index [0] should be deleted which will then make the initial element on index [1] to be positioned at index [0] until odd number is encountered. So how come does the return value become[11, 12, 15]?
Please help by breaking this down





 sodiqolabodeafolayan:

why we need to check the length of the elements


It is important that we check that a list has some length greater than zero if we wish to access it by index. A list of length zero (the empty list) has no accessible elements so lst[0] will raise an exception.

excuse me could somebody explain this?
when this block is executed
def delete_starting_evens(lst):
  while len(lst) > 0 and lst[0]%2==0:
    lst = lst[1:]
  return lst


#Uncomment the lines below when your function is done
print(delete_starting_evens([4, 8, 10, 11, 12, 15]))
print(delete_starting_evens([4, 8, 10]))

the result is [11, 12, 15] for the first list and [] for the second list.
but when i execute this:
def delete_starting_evens(lst):
  while lst[0]%2== 0 and len(lst) > 0:
    lst = lst[1:]
  return lst


#Uncomment the lines below when your function is done
print(delete_starting_evens([4, 8, 10, 11, 12, 15]))
print(delete_starting_evens([4, 8, 10]))

the result is still [11, 12, 15] for the first list, but i get an error on the second. Its an index error saying the list index is out of range.
The only difference between the two blocks is that on the 1st block i wrote while len(lst) > 0 and lst[0]%2==0: first, and on the 2nd i wrote while lst[0]%2== 0 and len(lst) > 0:
Thank you.




 code5132969222:

while len(lst) > 0 and lst[0]%2==0:


The first operand is evaluated first, which will short-circuit if False, and thus not attempt to access an index.
The second example accesses the index first, which raises the error when the list is empty.

I’m not sure why my answer does not work if the order of the conditions are changed from the provided solution, I get an out of index error:
def delete_starting_evens(lst):
  while (lst[0] % 2 == 0 and len(lst) > 0):
    lst = lst[1:]
  return lst

Any thoughts?

what if the list is empty:
def delete_starting_evens(lst):
  while (lst[0] % 2 == 0 and len(lst) > 0):
    lst = lst[1:]
  return lst

delete_starting_evens([])


Oh, okay. So since the first condition it doesn’t have an index of zero it will complain, so it has to fail on the len(lst)>0 first so it doesn’t get to that point?




 arrayrunner84233:

so it has to fail on the len(lst)>0 first so it doesn’t get to that point?


Correct. If the first condition is False, it will short-circuit the expression and therefore not attempt the second condition which will be the one to raise an exception.
"
389,If I use `in` do I need to set something to return `True`?,"FAQ,Python FAQ","q-a,strings",8,"
Hello!
I know that I’ve tried to solve it differently by going at it differently and not using “in” for both parameters and I’ve understood how to answer the question.
However, I’m having trouble understanding why the code I’ve written always seems to be returning an empty list.
def common_letters(string_one, string_two):
  common_lst = []
  for char1 in string_one:
    for char2 in string_two:
      if char1 == char2 and char1 not in common_lst == True:
        common_lst.append(char1)
  return common_lst

**Edit:
I’ve also tried changing the indentation of the return common_lst with no avail. So far I understand the concepts taught in this course pretty well, but for some reason I always struggle with indentation!
","



 byteslayer80073:

not in common_lst == True:


Unnecessary to write == True.
Is it really necessary to iterate both strings? Consider that in is a sort of iterator as it seeks membership. Iterating over one string (either one) and searching in the other will certainly detect any matches.

Hi mtf,
Could you please clarify what you mean regarding in?

in returns True or False all by itself. You don’t need to add   == True.
my_str = 'abcde'
print('abc' in my_str)
print('xyz' in my_str)

Output:
True
False

Incidentally, due to operator precedence, and the way chaining works, your expression won’t work as you expect:
print('xyz' not in my_str ==  True)

Output:
False

The chained expression is evaluated as follows:
('xyz' not in my_str) and (my_str ==  True)

… which returns False, since the second term returns False.




 patrickd314:

chaining


Woah. Took me a good minute to see that there was comparison chaining there even after you said it. That’s pretty surprising. I’d never write that, but I’d also never spot it by only reading it.




 patrickd314:

print(‘xyz’ not in my_str == True)


Owing that in (membership) and == (identity) have equal precedence, operations occur from left to right
'xyz' not in my_str  => True
True == True         => True

…no
but that’s how I would first read it, too.

>>> my_str = 'abcdef'
>>> 'xyz' not in my_str
True
>>> 'xyz' not in my_str == True
False
>>> 

I stand corrected, thank you.
"
390,How to handle that a start and end in the wrong order?,"FAQ,Python FAQ","q-a,strings",15,"
How should our function handle other cases, like where the “start” character appears after the “end character”?
For example, should this code:
substring_between_letters(word = ""adogb"", start  = ""b"", end = ""a"")

return “dog”, or simply return the word “adogb”
Another case is if the two arguments appear in the proper order, but only after they appear in the wrong order, like
substring_between_letters(word = ""adogbruna"", start = ""b"", end = ""a""

Should this print “dog”, “run”, or the word?
","

 Substring Between




 erinlaura:

“adogbruna”, start = “b”, end = “a”


print (substring_between_letters(""adogbruna"", ""b"", ""a""))
# adogbruna
print (substring_between_letters(""dogbruna"", ""b"", ""a""))
# run

The first example returns the full word because a comes before b, and we cannot have the end at the beginning.
The second example we remove the starting a, and get the result we expect since a is at the end, and b does precede it.
Similarly, your first example should also return the full word. Switch the a and b around and it will return dog.

def substring_between_letters(word, start, end):
    start = word.find(start)
    end = word.find(end)
    if start and end != -1:
        #print(word[start + 1 : end])
        return word[start + 1: end]
    else:
        return word



One issue I see with that approach is when start and end are the same letters.
substring_between_letters('mountain','n','n')

The return is ''

Played around with the code to work past this issue…
def substring_between_letters(word, start, end):
   before = word.find(start) + 1
   if before == 0:
     return word
   after = word[before:].find(end)
   if after == -1:
     return word
   return word[before : after + before]

print (substring_between_letters('mountain','n','n'))    # tai


what is wrong with my code?
keep present this message, but the parameters are exactly the same

螢幕快照 2019-09-04 上午10.52.34.png1440×665 96.4 KB


I asked about this in support but they told me to go to forums, sooooo…Bump!

Presumably the function crashes (can’t see it all) and presumably the error message is testing for one thing, but reports something else. So both your code and codecademy’s code each has a bug.
specifically the test contains this code:
except TypeError:
  fail_tests(""Your function should accept a parameter `word` and parameters `start` and `end`"")

which is suggesting that a TypeError means that there are missing parameters … no it doesn’t, and function parameters can be inspected so there is no reason to do something this crude.

When starting this exercise i though but if there’s something like this:

substring_between_letters(“applee”, “p”, “e”)

It might end up printing “pl” instead of “ple” if i will use word.find(end) because it will return the first index of “end” in “word”
So I ended up doing like this:
def substring_between_letters(word, start, end):
  if start in word:
    start_index = word.find(start)
    if end in word:
      for i in range(len(word)):
        if end == word[i]:
          end_index = i
      new_word = word[start_index+1:end_index]
      return new_word
    else:
      return word
  else:
    return word

this part loops through letters in “word” and saves the last index of a letter that is equal to the letter of “end”.
      for i in range(len(word)):
        if end == word[i]:
          end_index = i

hope this will be useful as a different approach for others.

This should handle:


Start and End in a wrong order


Start and End are the same letters




gist.github.com


https://gist.github.com/Slyfoxnick/3c193ad7dacc6e4eb941e1face209e9c
substring_between.py
# Write your substring_between_letters function here:
def substring_between_letters(word, start, end):
  if start == end and word.find(start) != -1:
    start = word.find(start) + 1
    end = word.find(end, start)
    return word[start:end]
  
  start = word.find(start) + 1
  end = word.find(end)
  
This file has been truncated. show original








What about searching for start in word, then cutting out the word for what is left after the start, only then searching for ending in what is left
def substring_between_letters(word, start, end):
  startIndex = word.find(start)
  if startIndex == -1:
    return word
  endIndex = word[startIndex + 1:].find(end)
  if endIndex == -1:
    return word
  return word[startIndex + 1: startIndex + 1 + endIndex] 


when I try something like example one, it always returns nothing instead of the full word. Why is that so? I am a bit confused now. Help would be greatly appreciated! .)

Please share what code you are running for us to see. Thanks.

So, if I use this code:
def random_funtion(string, start, end):
index_start = string.find(start)
index_end = string.find(end)
if index_start or index_end == -1:
return string
return string[index_start + 1:index_end]
print(random_funtion(“adogbhjam”, “b”, “a”))
–> it returns the original string but I don’t get why because neither of the indexes is == -1 .
index_start is 4 and index_end is 0.
–> if I delete the if condition, then it just returns nothing




 king-elessar:

if index_start or index_end == -1:


We need to make the same comparison in the first operand as second one.

got it. thank you 
"
391,What is a `namespace` in python?,"FAQ,Python FAQ","classes,q-a",3,"
may anyone explain the meaning of "" namespace "" in python ?
","
Other languages might use that word for something specific, python doesn’t.
It’s spaces for names, similar to how two directories in your file system are spaces where filenames may be, and two different spaces can have something with the same name in it, but they’re still different things because they’re in different spaces.
A module (a .py file usually) is a namespace, you can define names (variables) there.

@ionatan THANKS FOR MAKING THAT CLEAR !!
"
392,FAQ: Learn Python: Files - Reading a File,"FAQ,Python FAQ",,3,"

Community%20FAQs%20on%20Codecademy%20Exercises1000×208 141 KB

This community-built FAQ covers the “Reading a File” exercise from the lesson “Learn Python: Files”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Learn Python 3
FAQs on the exercise Reading a File


Is it necessary to use with to open a file?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
A post was split to a new topic: What is the text1 file for?

2 posts were split to a new topic: Is it necessary to use with to open a file?
"
393,Can I call a function inside of a print function?,"FAQ,Python FAQ","functions-py,q-a",10,"
current_year = 2048

def calculate_age(birth_year):
  age = current_year - birth_year
  return age

print(current_year)

print(calculate_age(1970))

Does print(calculate_age(1970)) call the function? Or is the function not called in this example? I’m confused.
","



 ghulseman:

print(calculate_age(1970)) call the function?


Yes, it does. The return value is what will print.

yes print(calculate_age(1970)) will call the function and since in the function calculate_age(1970) we asked it to return age hence the statement print(calculate_age(1970)) will print the age of the person (ie78)

Yes but as a “call” they aren’t asking for a call in the context of a print function, they want you to “call” the defined parent function “calculate_age()”…

As noted above, print(calculate_age(1970)) absolutely does involve a function call.
I don’t see where calling the function is asked for in this exercise,  but if you were to call the function without reference to any print() expression or assignment to a variable, the function would certainly run; its returned value would be  “orphaned” (assigned to no variable or function call, thus eligible for garbage collection), and the function and its variables would disappear from the call stack.
In other words, from our standpoint as outside observers, nothing would happen (except that you might see “Run calculate_age.py” on your shell.)

Got the correction thank you and the call is simply in the function print as to display the function on screen. Understood.
Or better… in the console.

thx , I was searching for an answer , so thr return is what did the trick?

As the above example shows, you can call a function in Python using Print.
Python allows different ways to accomplish the same task, and beginners may be confused by using print to call a function.
We might be inclined to call and then print the calculated result from the function like this:
current_year = 2048

def calculate_age(birth_year):
  age = current_year - birth_year
  return age

print(current_year)
current_age=(calculate_age(1970))
print(current_age)

The results are the same. But either way, you would still need the Return to get the calculated result out of the function and assign to the variable: “current_age”
Yet another option is to Print the calculated result from inside the function. In that case Print would replace Return. Hope that helps.

Yeah thx, actually that is the way I imagined it first. I know now how both work and that print can actually call a function




 mohammadrefaat603086:

print can actually call a function


Print does not call the function, it prints the return value. The call is made in the argument to the print function.
Any function may take a function as its argument.
"
394,Why does counting start from 0?,"FAQ,Python FAQ",q-a,6,"
Question
Why does counting start from 0?
Answer
In short, just remember that almost all programming languages start counting from zero because it’s optimal.
A famous Dutch computer scientist, Edsger Dijkstra, gives a great mathematical explanation for this! It basically comes down to optimization, which is a common reason behind computer system design choices like this. Dijkstra says, “when starting with subscript 1, the subscript range 1 ≤ i < N+1; starting with 0, however, gives the nicer range 0 ≤  i < N,” in his paper called “Why numbering should start at zero.”
","
2 posts were split to a new topic: How to Print the Length of a String?

Dijkstra’s algorithm solves the single-source shortest path problem with non-negative edge weight.

AppleScript is one language I know that doesn’t start at “0” which messes with a lot of scripters. Then again, AppleScript is a scripting language not a code language.

For reference:

https://en.wikipedia.org/wiki/Zero-based_numbering.

The paper mentioned in the OP is discussed in that article along with exploration into other fields. A good read.

R isn’t zero-indexed either.
"
395,Do I need to count `n`?,"FAQ,Python FAQ","lists-functions,q-a",3,"
Why don’t I have to use .count() on the —n---- value?
","
Because it is a value, not an iterable, so has nothing to count. The purpose here is to determine if the item count is greater than N.
m = lst.count(item)
return m > n

Thank you mtf! That helps a lot it’s those little things I’m trying to understand. I did a bunch of research online too just couldn’t find exactly what I needed.
"
396,Can keyword arguments be used positionally?,"FAQ,Python FAQ","functions-py,q-a",3,"
I have a similar question. In the quiz, a function is defined as follows:
def update(new_value = 10):
old_value = new_value
It asks how to call the function with  new_value of 20.
The correct answer is
update(20)
So does this work because there is only one parameter for the function, so that the keyword new_value doesn’t need to be explicitly spelled out when calling the function? If there were more parameters, each with a default value, or some has default values and others don’t, how would it work? Would the keyword arguments need to be spelled out in those cases?
thanks
","
new_value is only a local variable, not accessible outside of the function. It is preset to 10, but takes on any value we pass in. If no value is passed in, then new_value becomes 10.
Multiple keywords are possible, but the position is critical.
>>> def foo(a = 1, b = 2, c = 3):
    return a * 4, b * 3, c * 2

>>> foo()
(4, 6, 6)
>>> foo(4)
(16, 6, 6)
>>> foo(4, 5)
(16, 15, 6)
>>> foo(4, 5, 6)
(16, 15, 12)
>>> 


Such a clear explanation! Thank you!
"
397,How can I empty the contents of a list?,"FAQ,Python FAQ",,8,"
Question
If I have a list containing items, how can I empty or delete all the contents of the list?
Answer
There are two ways to empty an existing list. The first way is to just assign the list variable to an empty list. In this case, the old list and its contents are automatically deleted by Python. This is shown in the following code example.
list1 = [ 1, 2, 3, 4, 5, 6, 7 ]
list1 = []

The second method is to use the del() function to delete all the elements of the list. This forces the removal of all the items immediately instead of letting Python delete the contents at some time of its choosing. Both methods produce the same end result which is that the list will be empty of contents.
list2 = [ 10, 20, 30, 40, 50, 60, 70 ]
del list2[:]

","
In the second example above it is important to include the slice subscript, else the variable itself will be deleted.
>>> list2 = [ 10, 20, 30, 40, 50, 60, 70 ]
>>> del list2[:]
>>> list2
[]
>>> isinstance(list2, list)
True
>>> list2 = [ 10, 20, 30, 40, 50, 60, 70 ]
>>> del list2
>>> isinstance(list2, list)
Traceback (most recent call last):
  File ""<pyshell#58>"", line 1, in <module>
    isinstance(list2, list)
NameError: name 'list2' is not defined
>>> 

Clearly, the first example is the preferred approach, assign an empty list, since it is not likely to ever throw a wrench into the proceedings (a bug that could be tricky to find).

what if we want to delete a single or some specific elements from the list? how can we do that?

We have two choices,

delete by value
delete by index

Which is it you wish to do?

Could you please explain both? I want to learn.

Have you explored the docs.python.org material, yet, just from a familiarization perspective. It is a good first step. Take the time to look things over then come back and start learning how to put the pieces together. It’s not a novel; just focus on the parts your are most concerned with at the time.

How to delete item or items from a list python


Does this mean, that when we use :
list1 = [1,2,3,4]
list1  = 
delete’s the list1 i.e. python does not anymore remember us creating one?

The first entry has list1 referencing a list. That reference remains intact until the variable is given a new reference, the empty list. It no longer references the populated list, which if no other references exist will be garbage collected and the memory re-allocated.
It appears as though the second assignment has just emptied the list, but that is not so. If we check the ID of each reference we will see they are not the same object.
Consider,
>>> list1 = [1, 2, 3, 4]
>>> id(list1)
48786408
>>> del list1[:]
>>> list1
[]
>>> id(list1)
48786408
>>> list1[:] = [1, 2, 3, 4]
>>> list1
[1, 2, 3, 4]
>>> id(list1)
48786408
>>> 

Notice that as long we operate on the contents of the list, the ID remains the same, even when the list is emptied (but not replaced).
Now lets see what happens when we replace the list.
>>> list1 = []
>>> id(list1)
48829504
>>> 

It now references a completely new object. As mentioned, if no other references exist within the program to the original object, the earlier ID will no longer exist.
"
398,Do dictionaries preserve order now?,"FAQ,Python FAQ","lists-dictionaries,q-a",4,"
user_ids = {“teraCoder”: 9018293, “proProgrammer”: 119238}
user_ids.update({“theLooper”: 138475, “stringQueen”: 85739})
print(user_ids)
When I run the above in Codeacademy the result is:
{‘stringQueen’: 85739, ‘theLooper’: 138475, ‘teraCoder’: 9018293, ‘proProgrammer’: 119238}
When I run the same code in my text editor, the result is:
{‘teraCoder’: 9018293, ‘proProgrammer’: 119238, ‘theLooper’: 138475, ‘stringQueen’: 85739}
Why the difference in the ordering?
The output of my text editor seems more rational to me since the additions are placed after the original content of the dictionary.
","



 austinknowscodes:

Why the difference in the ordering?


because only since python 3.6 dictionaries preserve order

whenever printing the dictionaries the sequence of key:value pair outputted are different.
user_ids = {""teraCoder"": 9018293, ""proProgrammer"": 119238}
user_ids.update({""theLooper"": 138475, ""stringQueen"": 85739})
print(user_ids)

Run 1 output:
#{'teraCoder': 9018293, 'proProgrammer': 119238, 'theLooper': 138475, 'stringQueen': 85739}

Run 2 output:
#{'proProgrammer': 119238, 'teraCoder': 9018293, 'theLooper': 138475, 'stringQueen': 85739}

why does this happen?

That is the nature of dictionaries.  The price paid for lightning-fast (i.e., nearly constant-time) search of keys is that we cannot depend on their order within the dictionary. (This is the classic viewpoint, and may be slowly changing, i.e., in Python 3.6 and above, insertion order of dictionaries is preserved.)  In general, you should avoid any code that depends upon the order of key:value pairs in a dictionary.
If you must make use of order, the OrderedDict subclass of the collections module is available.
"
399,What are good reasons to use string formatting?,"FAQ,Python FAQ","q-a,strings",10,"
According to this lesson, the .format() method is used instead of string concatenations for better code legibility, however, I find the format method to be less legible than string concatenations personally.
I’m wondering, which method does everyone else find more legible? And for the more experienced Python coders out there - what is the de facto standard that is more regularly used by professionals?
","
Concatenation does not provide any means for formatting, which is the purpose of all three methods in Python:

% formatting
str.format
f-strings

With formatting we can restrict output length. pad the output, round numbers, and so on with little manual manipulation.
See the pyformat link posted above for more details.

Ok now those are good reasons to use .format(), thanks for the clarification!

@zackary.pugh - Hello!
I definitely find the str.format() method to be more legible! While I am still a beginner, I can think of a few times where I found that concatenating looked less seemly than str.format() and felt a bit arduous.
For example, I can remember times in which I wanted to concatenate strings with integers, and I had to use str() in order to change the integer into a string during the concatenation process and it just felt a little uncomfortable.
#using concatenation
amount = 30
random_string = ""I want to receive $"" + str(amount) + "" for my birthday.""
print(random_string)
#prints:
#I want to receive $30 for my birthday.

#using str.format()
amount = 30
random_string = ""I want to receive ${} for my birthday."".format(amount)
print(random_string)
#prints:
#I want to receive $30 for my birthday.

I also feel like it can be more difficult to remember to add necessary spaces when concatenating strings. In the example above, I initially forgot to put a space before the “for” in “for my birthday” in the concatenation example, but it felt smooth and easy to add spaces in the str.format() example because the {} felt like a pleasant placeholder.
However, I also believe that whether concatenation is more legible than the str.format() method depends on the context. I suppose I can just think of quite a few contexts in which the str.format() method feels much nicer than concatenation!

Hello Okaraman, it’s wonderful to get someone else’s detailed thoughts, thank you!
I tend to agree, a lot of it seems to be context and personal preference - for that reason I plan on probably using the Python community-standard to make it easier for others to read my code!

If you like str.format(), you may also like f-string. You can also use additional formatting with either method.
#using str.format() with additional float formatting
amount = 30
random_string = ""I want to receive ${:.2f} for my birthday."".format(amount)
print(random_string)
#prints:
#I want to receive $30.00 for my birthday.

#using f-string with additional float formatting
amount = 30
random_string = f""I want to receive ${amount:.2f} for my birthday.""
print(random_string)
#prints:
#I want to receive $30.00 for my birthday.

Happy coding!

Hi @midlindner!
Thank you for sharing this with me! I’m actually very glad you mentioned this float formatting in particular because I’m currently working on a project that is adding up a number of dollar amounts in a list, saving this number to a variable, and printing that variable. The number that is printed has 13 decimal places, so I tried looking up how to have the number rounded to 2 decimal places and then I saw this response from you! How convenient! 
I recently heard the term f-string, so I am glad you showed me an example of this as well! It appears to be a step up from str.format() as you can include the variable in the string and all you need outside of the string is a singular f - that seems quite legible and pleasant-looking!
Out of curiosity, do you know if there are any downsides/drawbacks of using f-strings as opposed to str.format()? Or is this another instance of the best method to use depends on the context of the situation in which it is being used?

I don’t know of any drawbacks/advantages regarding f-string vs. str.format(). I believe it’s simply a matter of preference. When including the float or other formatting, some may consider one version easier to read than the other.




 okaraman7:

2 decimal places


What you probably mean is that you’re counting cents, not dollars. Use int.
Floats are for when you wish to approximate something, what you’re doing should probably be exact.



 midlindner:

drawbacks/advantages regarding f-string vs. str.format()


the format method can be called at a later time, f-strings are immediately interpolated




 ionatan:

the format method can be called at a later time, f-strings are immediately interpolated


Hadn’t considered that, but makes sense. Thanks!
"
400,If I use `in` do I need to set something to return `True`?,"FAQ,Python FAQ","q-a,strings",8,"
Hello!
I know that I’ve tried to solve it differently by going at it differently and not using “in” for both parameters and I’ve understood how to answer the question.
However, I’m having trouble understanding why the code I’ve written always seems to be returning an empty list.
def common_letters(string_one, string_two):
  common_lst = []
  for char1 in string_one:
    for char2 in string_two:
      if char1 == char2 and char1 not in common_lst == True:
        common_lst.append(char1)
  return common_lst

**Edit:
I’ve also tried changing the indentation of the return common_lst with no avail. So far I understand the concepts taught in this course pretty well, but for some reason I always struggle with indentation!
","



 byteslayer80073:

not in common_lst == True:


Unnecessary to write == True.
Is it really necessary to iterate both strings? Consider that in is a sort of iterator as it seeks membership. Iterating over one string (either one) and searching in the other will certainly detect any matches.

Hi mtf,
Could you please clarify what you mean regarding in?

in returns True or False all by itself. You don’t need to add   == True.
my_str = 'abcde'
print('abc' in my_str)
print('xyz' in my_str)

Output:
True
False

Incidentally, due to operator precedence, and the way chaining works, your expression won’t work as you expect:
print('xyz' not in my_str ==  True)

Output:
False

The chained expression is evaluated as follows:
('xyz' not in my_str) and (my_str ==  True)

… which returns False, since the second term returns False.




 patrickd314:

chaining


Woah. Took me a good minute to see that there was comparison chaining there even after you said it. That’s pretty surprising. I’d never write that, but I’d also never spot it by only reading it.




 patrickd314:

print(‘xyz’ not in my_str == True)


Owing that in (membership) and == (identity) have equal precedence, operations occur from left to right
'xyz' not in my_str  => True
True == True         => True

…no
but that’s how I would first read it, too.

>>> my_str = 'abcdef'
>>> 'xyz' not in my_str
True
>>> 'xyz' not in my_str == True
False
>>> 

I stand corrected, thank you.
"
401,What other escape sequences are there?,"FAQ,Python FAQ",,4,"
Question
In the context of this exercise, what other escape sequences are there?
Answer
There are several other escape sequences available in addition to \n and \t. A few useful ones to know about are the following.
The quotation escape sequences \' and \"" are useful when adding these quotes within a string wrapped in the same type of quotations.
# Single quotations
string = 'I\'m coding!'
print(string) # I'm coding!

# Double quotations
string2 = ""\""Hello World!\""""
print(string2) # ""Hello World!""

Another useful escape sequence to know about is the backslash \\, which allows you to show backslashes without it converting to some escape sequence in the string.
string3 = ""The \\n escape sequence adds a newline""
print(string3) # The \n escape sequence adds a newline

For the rest of the available escape sequences, feel free to check out the documentation.
","



 jephos249:

the documentation.


Hi! I’ve been using Code Academy for a short time. I’ve seen a few people refer to some type of “documentation”. Where can it be found? Thanks! 

Here: https://docs.python.org/3/index.html

2 posts were merged into an existing topic: What does the backslash in the variable declaration mean? (=\)
"
402,Does the modulo operator work with floating point numbers?,"FAQ,Python FAQ",,9,"
Question
In this exercise, the modulo operator is used with only integer numbers. Will it work with floating point numbers too?
Answer
Yes, the Python modulo operator will work with floating point numbers.
","
>>> from math import pi
>>> def is_float(n):
    return n % 1 and True or False

>>> is_float(1)
False
>>> is_float(pi)
True
>>> 


What this mean “return n % 1 and True or False”




 arindamsen8858065950:

n % 1


This will take precedence, so will be either zero or a float.
Zero and True is False.
A float and True is True.
OR False will only happen when n % 1 is zero.

Hi, can you please elaborate on that? What does it mean “Zero and True is False” “A float and True is True” Thnx a lot!

Zero is the integer equivalent of False.
False and True == False

False short-circuits AND, and True short-circuits OR.

Modulo for floating point numbers does work, but there are some anomilies as shown by running the following program…
Write your remainder function here:
def remainder(num1,num2):
return 2 * num1 % (0.5 * num2)
Uncomment these function calls to test your remainder function:
print(remainder(15.4, 14.3))
should print 2.2 but gives 2.1999999999999993 instead!
print(remainder(9, 6))
should print 0

The above behavior is expected as Python 3 float operations yield a float.
Floating point arithmetic is not as exact as one might expect. The math is fairly complex and can often result in a very tiny error.
Notice,
>>> 15.4 % 1
0.40000000000000036
>>> 


Sir,
I would like to point out a correction. The following line is true only for non-zero floating-point numbers.

A float and True is True.

The function “is_float(n)” would fail to classify some floating-point numbers that produce 0.0 upon ‘n%1’ operation.
>>> 5.0%1
0.0
>>> 5.0%1 and True or False
False

"
403,Why is my Triangle class not accepted?,"FAQ,Python FAQ",,4,"
Question
Why is my Triangle class not accepted?
Answer
Here are a few common mistakes when creating the Triangle class and how to fix them:

Forgetting to indent your code to be inside of the class Triangle code block – be sure to indent using 2 spaces per indentation level
Not initializing the self.variable values with the arguments passed to the __init__() method
Typos! Python has no way of knowing what you’re referring to unless you spell things exactly as they were spelled elsewhere, so keep a close eye on spelling, capitalization, and punctuation.

","
2 posts were split to a new topic: Do you at CodeAcademy analyse the kind of mistakes we do?

def Triangle(object):
  def __init__(self, angle1, angle2, angle3):
    self.angle1 = angle1
    self.angle2 = angle2
    self.angle3 = angle3
    
my_tri = Triangle(2,3,4)

Here is my code for this exercise. The compiler throws an errror. It says Triangle() takes only one argument even though I’ve made it with three other arguments. I’ve checked previous code in the lesson, and formatted mine the same way. What is wrong?

In your first line you wrote “def” instead of “class”, the rest looks good to me
"
404,What are some common uses of type()?,"FAQ,Python FAQ",q-a,6,"
Question
What are some common uses of type()?
Answer
Often when you write programs you’ll want to get input from the user, whether it be their name, age, or something random like their favorite type of cheese.
Regardless of what the input is, you’ll likely want to check that the user did in fact input the type of data you’re looking for. Otherwise, you may end up doing some invalid operation, like dividing a word by a number!
We can use type() to ensure that the user’s input is the type of data we’re expecting, and can fail to accept their input until it’s valid. This can be a difficult part of programming because it’s hard to know what all a user can input into your program, so you have to be careful about what you accept as input.
","
Please, can we get some code examples explaining how check whether the user input is this or that type? That would be helpful while going through these exercises, thanks!

found examples simply using google:
https://stackoverflow.com/questions/3501382/checking-whether-a-variable-is-an-integer-or-not
which besides example:
type(x) == int

also yielded explanation why or why not to use type. Quite useful, google is your friend to find information (or whatever search engine you prefer)

Thank you for this piece of code, honestly I was trying google, but the results I checked only explained what this function does, but it didn’t explain how to work with it besides printing its output. Maybe I was not using the right query. Google is your friend, but very secretive one if you don’t know exactly how to ask the question lol

Being good at using a search is underrated/useful skill, i googled:
python check type is int
i had an advantage in this case, i already knew the answer and could use that to construct the search query.

Good for you! When I googled “python check type is int”, the first link I clicked showed me this message: “Our system thinks you might be a robot!”
I guess I’m super lucky lol
"
405,How can I skip or jump to a new line while printing?,"FAQ,Python FAQ","python-syntax,q-a",5,"
Hello, I was wondering, how can I tell python program to go to next line after printing something using print()? Like, in Java, we use System.out.println() to tell it to go to next line.
","
You can use \n in your string to jump to a new line, but print() will also work depending on what you’re trying to do. A couple examples that both print to lines 1 and 3:
print('line1 \n\nline3')
>line1
>
>line3
print('line1')
print()
print('line3')
>line1
>
>line3





 catower:

print(‘line1 \n\nline3’) >line1 > >line3 print(‘line1’) print() print(‘line3’) >line1 > >line3


Hello there!
I am new here! 
How come when I copy paste the following and run it an error appears?
print(‘line1 \n\nline3’)

line1
line3
print(‘line1’)
print()
print(‘line3’)
line1
line3

Thanks!

var=“India”
print(“Value of var=”,var)
It works fine. Can anyone please tell when do we insert %s after =

The text following an > arrow is to indicate what the output would be. If you try to enter line1 into your code editor it will give an error because it doesn’t know what to do with that text. Python would think its an undefined variable.
"
406,FAQ: List Comprehension - Greater Than With Zip,"FAQ,Python FAQ",,3,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Greater Than With Zip” exercise from the lesson “List Comprehension”.
Paths and Courses
This exercise can be found in the following Codecademy content:
FAQs on the exercise Greater Than With Zip


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
","
So my solution to this exercise was:
a = [30, 42, 10]
b = [15, 16, 17]
values = zip(a,b)
greater_than = [a > b for (a,b) in values]
print(greater_than)
Which seems to work.
But I am getting a message from the course: ’ Zip argument #1 must support iteration’
Anyone know what’s wrong with the code? I’m stuck

I believe the issue you are having is that variables a and b are already defined, and you use them again in your list comprehension. You can take what you have and modify a>b for (a,b) to a1>b1 for (a1,b1) and your solution will work.
Also, consider using zip in the list comprehension, instead of creating values.
greater_than = a1>b1 for (a1,b1) in zip(a,b)
Cheers,
-N
"
407,Does a function always need to return something?,"FAQ,Python FAQ",,10,"
Question
In this exercise, the sample function syntax shows a return. Does a function always have to return a value?
Answer
NO, a function does not always have to have an explicit return statement. If the function doesn’t need to provide any results to the calling point, then the return is not needed. However, there will be a value of None which is implicitly returned by Python.
","
How do we know if the function needs to provide results to the calling point or not?

That is up to you as a programmer. You have to decide. There isn’t a fixed rule for this.
I am afraid you will just have to practice this by building software/programs.

I am not sure I have understood the sentence  If the function doesn’t need to provide any results to the calling point, then the  return  is not needed.
In the previous lesson, “Introduction to Python Functions”, we learned the keyword “return” and the way it is used in exercise No.8, 9 and so on. Howerever, before these exercises, we were taught simple functions with examples of calling them without the use of “return”, and the results were always provided although we did not use “return”.  E.g.
def mult_two_add_three(number)
print (number*2 +3)
mult_two_add_three (5)       #the result is 13
So, what do you actually mean with the above sentence?

There is a big difference between print and result. The effect of these two keywords is quite different.
Take a look at this code:
def square(x):
    print(x ** 2)

square(3)

Evaluation of this code will result in 9 being printed out to the console. But 9 is not the result of square(3)… Let’s say that we want to implement new function, double_square. But we already have a function that calculates the square so let’s use it:
def square(x):
    print(x ** 2)

def double_square(x):
    print(square(x) * 2)

double_square(3)

This code will result in TypeError: unsupported operand type(s) for *: 'NoneType' and 'int', why? Because the value of square(3) is None. To show this let’s run this code:
def square(x):
    print(x ** 2)

a = square(3)
print(a)

This will result in this output:
9
None

9 is being printed out because of the print statement in the square function, None is the value of a.

To summarize a bit. print is just a function that prints out something to the console, but it does not change value of anything. return is a statement that is used to assign value to the function call. This code:
def square(x):
    return x ** 2

def double_square(x):
    return square(x) * 2

print(double_square(3))

will result in 18 printed out to the console. Because value of square(3) is 9.

Thank you.  This clarified a lot of things for me.

You’re very welcome  Glad you found this helpful.

I’ve just began my journey into python so forgive me if my reply isn’t satisfactory. But from what I understand. You use the print() function inside
a self- defined function to immediately print out the code as it’s called but
the return function can be used to pass the result the self defined function into
another self defined function or piece of code further down the line.
def function(“greeting”):
print(“greeting”)
function(“Hello”)
def function2(“greeting”):
return greeting
foo = function2(“Hello”)
print(foo)

print() prints something to console, return hands back data to the caller.
what is more worrying, is that your parameters are strings, why?
i think it should be:
def function(greeting):
   print(greeting)

function(""Hello"")

now Hello is printed as greeting.

Oh yeah your right I did. Sorry about that. I’ll fix it. Like I said i’m new to
programming. I’ll take my time to proof read what I type the next time so
I don’t throw people off. Thanks for pointing that out to me.
"
408,Do I need to use an if statement to solve this?,"FAQ,Python FAQ","conditionals-control-flow-py,q-a",2,"
Can’t we just type:
def large_power(base, exponent):
  return base**exponent > 5000

Instead of using if/else statements to tell it to return true false?
","
Yes, that will work as expected since the expression is evaluated first, and the outcome is returned.
A lot of exercises expect to see the if statement in the code so read the instructions carefully before reverting to shortcuts.
"
409,Could the parameters to the win_percentage function be changed to not include losses?,"FAQ,Python FAQ",q-a,2,"
Question
In this exercise, the win_percentage() function is passed wins and losses. What other parameters could be passed instead of losses?
Answer
The function is intended to calculate the ratio of wins to games played. The losses parameter is only used to compute the total number of games played for the ratio calculation. If the function were re-written to take wins and games_played as the parameters, the calculation in the function would only need to perform the division for the ration (and multiple by 100) and not calculate the total number of games played first.
","
8 posts were split to a new topic: Where do I need parenthesis to make the win percentage work?
"
410,Why is len(lst) > 0 necessary for solving the list challenge?,"FAQ,Python FAQ",loops-py,18,"
Hi, I have some question on this one.
1)Does lst[0] means that every number in the list are processed by the loop?
2) Why is the code “len(lst) > 0” crucial in the loop?
","
This could be wrong im a noob but I think this is why:

lst[0] is basically selecting the 0 ‘index’ in the list = [1, 2, 3] int 1 is index 0, int 2 is index 1 etc … so when it loops after slicing the first even number

lst = lst(1:)
the lst index 0 will also change! Our lst here will become lst = [2, 3] with 0 index now being int 2. The loop will then iterate again and again until…
This … 2) len(lst) > 0 is crucial because if we don’t we enter in to an infinite loop? or something imagine if the list was all even integers once the loop has checked all the integers it has none to check which I think would create an infinite loop.
Sorry I could be a million percent wrong! But thought i’d try for my own benefit as well as yours!
Happy coding 

@ajikhan7086997408 your solution is correct, thank you!

Not quite. There will be no infinite loop, but instead an IndexError will be raised.
The purpose of checking that the length is greater than zero is to prevent attempting to access an index of an empty list–There are no indices to access.

@mtf but here in the last exercise, in which scenario we will attempt to access an index of an empty list .
This worked for me
#Write your function here
def delete_starting_evens(lst) :
for number in lst :
print (number)
if number % 2 == 0 :
lst = lst[1:]
else :
break
return lst
#Uncomment the lines below when your function is done
#print(delete_starting_evens([4, 8, 10, 11, 12, 15]))
print(delete_starting_evens([4, 8, 10]))




 arindamsen8858065950:

for number in lst :


Consider the possibility we are not accessing an empty list, but simply not running a loop on one.

@mtf Please elaborate with example

>>> for x in []:
	print (x)
else:
	print (""Empty list"")

	
Empty list
>>> 

What this demonstrates is that the loop does not execute on the empty list.

Aside
Until we see how your code is indented, we cannot provide an example based upon it. I’m pointing at mere details, for the moment.

… to continue,
>>> [][1:]
[]
>>> 

This demonstrates that slice is a method of the list object. It must have its own fail check in determining the returned list, since a list is what gets returned.
>>> for x in []:
	print (x)
else:
	print ([][1:])

	
[]
>>> 


>>> print ([][0])

Traceback (most recent call last):
  File ""<pyshell#10>"", line 1, in <module>
    print ([][0])
IndexError: list index out of range
>>> print ([][0:])
[]
>>> 


def delete_starting_evens(lst):
while (len(lst)>0):
if lst[0] % 2 == 0:
lst = lst[1:]
return lst
will this create a infinite loop?




 harishramesh6788:

will this create a infinite loop?


Welcome, @harishramesh6788,
If the first value in the list is odd, then yes. Further, if the list contains any odd numbers, it will loop forever since the list length never changes.

Please can you expatiate?
def delete_starting_evens(lst):
  while (len(lst) > 0 and lst[0] % 2 == 0):
    lst = lst[1:]
  return lst


I cant just understand why we need to check the length of the elements .
2… lst[0] % 2 == 0):,     lst = lst[1:]… the original element on indext [1] is even ie 8, so why did the function take it off. Plus, i cant find where the function says the original element on index [0] should be deleted which will then make the initial element on index [1] to be positioned at index [0] until odd number is encountered. So how come does the return value become[11, 12, 15]?
Please help by breaking this down





 sodiqolabodeafolayan:

why we need to check the length of the elements


It is important that we check that a list has some length greater than zero if we wish to access it by index. A list of length zero (the empty list) has no accessible elements so lst[0] will raise an exception.

excuse me could somebody explain this?
when this block is executed
def delete_starting_evens(lst):
  while len(lst) > 0 and lst[0]%2==0:
    lst = lst[1:]
  return lst


#Uncomment the lines below when your function is done
print(delete_starting_evens([4, 8, 10, 11, 12, 15]))
print(delete_starting_evens([4, 8, 10]))

the result is [11, 12, 15] for the first list and [] for the second list.
but when i execute this:
def delete_starting_evens(lst):
  while lst[0]%2== 0 and len(lst) > 0:
    lst = lst[1:]
  return lst


#Uncomment the lines below when your function is done
print(delete_starting_evens([4, 8, 10, 11, 12, 15]))
print(delete_starting_evens([4, 8, 10]))

the result is still [11, 12, 15] for the first list, but i get an error on the second. Its an index error saying the list index is out of range.
The only difference between the two blocks is that on the 1st block i wrote while len(lst) > 0 and lst[0]%2==0: first, and on the 2nd i wrote while lst[0]%2== 0 and len(lst) > 0:
Thank you.




 code5132969222:

while len(lst) > 0 and lst[0]%2==0:


The first operand is evaluated first, which will short-circuit if False, and thus not attempt to access an index.
The second example accesses the index first, which raises the error when the list is empty.

I’m not sure why my answer does not work if the order of the conditions are changed from the provided solution, I get an out of index error:
def delete_starting_evens(lst):
  while (lst[0] % 2 == 0 and len(lst) > 0):
    lst = lst[1:]
  return lst

Any thoughts?

what if the list is empty:
def delete_starting_evens(lst):
  while (lst[0] % 2 == 0 and len(lst) > 0):
    lst = lst[1:]
  return lst

delete_starting_evens([])


Oh, okay. So since the first condition it doesn’t have an index of zero it will complain, so it has to fail on the len(lst)>0 first so it doesn’t get to that point?




 arrayrunner84233:

so it has to fail on the len(lst)>0 first so it doesn’t get to that point?


Correct. If the first condition is False, it will short-circuit the expression and therefore not attempt the second condition which will be the one to raise an exception.
"
411,Does the __repr()__ method need to provide all the attributes of an object?,"FAQ,Python FAQ",,8,"
Question
When implementing the __repr__() method, do all object attributes have to be used when constructing the string?
Answer
While you are allowed to include or exclude any information from the object that you want, the Python documentation recommends that the implementation for __repr__() should contain as much information as possible and if, at all possible, it should contain whatever is necessary to recreate the object. The __str__() method also returns a string representing the object but it can be used for a more informal representation of the object.
","
In a sense, instance.__repr__() is a getter, only it gets everything, and the expected return value will be a string representation of the data points of the instance as initialized and or modified.
The operative phrase above was return value. Getters don’t do things; they return things.
class Foo(object):
  def __init__(self, foo):
    self.foo = foo
  def __repr__(self):
    return ""foo: {}"".format(self.foo)

foo = Foo('foo')
print (foo)

>>> 
=================== RESTART: D:/cc/discuss/FAQ/__repr__.py ===================
foo: foo
>>> 



may anyone explain this line for me i mean why should i write that line , isn’t the variable "" name "" already defined in the function parameter ?




 hossamokasha76917137:

… isn’t the variable "" name "" already defined in the function parameter ?


A function’s parameters are names that are local to that function. When the function completes its execution, the local variables are lost. Therefore, if we wish to preserve the values of the function parameters, we need to save those values somewhere, for example, in instance variables, which are not merely local to the function.
An instance variable does not necessarily need to have the same name as a parameter that is used to set its value.

so it’s necessary to save every method’s parameter in an instance variable ?

We don’t necessarily always need to save the value of a parameter exactly as it was given.
See the following:
class Circle:
  pi = 3.14149265
  def __init__(self, circumference):
    self.radius = circumference / Circle.pi
  def get_circumference(self):
    return self.radius * Circle.pi
  def get_radius(self):
    return self.radius

c = Circle(10.0)
print(c.get_circumference())
print(c.get_radius())

Output:
10.0
3.183200189884258

We instantiated the Circle with the circumference, but calculated its radius and saved that value. In a sense, we discarded the value provided by the argument, but we can use the saved radius to recover an approximation of the circumference. Admittedly, we could lose some precision in the process.
The guiding principle is that we use parameters of the __init__ method to provide information that is needed to instantiate an instance. We might even use some of that information to perform other tasks related to the context in which the instance was created, such as maintaining files, or coordination with other objects. However, in some cases, we might not need to retrieve the provided information later, exactly as it was given originally.

Really thank you so much for making that clear !!

Another example:
class AdoptedCat:
  def __init__(self, name, is_hungry):
    self.name = name
    if is_hungry:
      print(""Feed {} now!"".format(self.name))
    else:
      print(""Feed {} later"".format(self.name))

cat = AdoptedCat(""Monty"", True)

Output:
Feed Monty now!

We saved name, but not is_hungry. However, we used both.
"
412,How does `+=` work?,"FAQ,Python FAQ","loops-py,q-a",5,"
Hey I’m just wondering. I didn’t know how to complete the last part of this exercise because I think it’s the first time I see the “+=” operator. Maybe I’m wrong?
","



 davidjimenez49530697:

first time I see the “+=” operator


First time, but not the last. If we query assignment operators in search we find this to be among them.
It happens in two steps. The addition operation is performed where we take the current value and add the new value to it arriving at a new current value once it is assigned back to the variable.
new_current_value = old_current_value + new_value

a = a + b

Both statements above express the same thing.
a += b

expresses it in more succinct terms.

2 posts were split to a new topic: Why += and not append?

2 posts were split to a new topic: Need explanation of output

10 posts were split to a new topic: Why did the pace of the exercises started to go so fast?
"
413,If an instance variable is not set in __init__() can it be referenced by a class method?,"FAQ,Python FAQ",,14,"
Question
If an instance variable is not initialized in the __init__() function, can it still be referenced by a class method?
Answer
Yes, the instance variable can be referenced by a class method using self so long as it has been set before the call. If not, an AttributeError will be generated. As a general rule, it is best to initialize all of the instance variables in the __init__() function for consistency.
","
__init__() is what defines instance variables. Any other is a class variable until an instance changes it within its own context, thereby adopting a new instance variable.

They pyDocs have a good example of the difference between class and instance variables
“”""
instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:
“”""
class Dog:

    kind = 'canine'         # class variable shared by all instances

    def __init__(self, name):
        self.name = name    # instance variable unique to each instance

>>> d = Dog('Fido')
>>> e = Dog('Buddy')
>>> d.kind                  # shared by all dogs
'canine'
>>> e.kind                  # shared by all dogs
'canine'
>>> d.name                  # unique to d
'Fido'
>>> e.name                  # unique to e
'Buddy'


So, ‘store_name’ listed in scenario #1 is the same as calling a variable inside the init method of scenario #2? If so, are there any specific cases where we might use instance variables like the one listed in scenario #1?




alternative_rocks = Store().   # Store is the class name
alternative_rocks.store_name = “Alternative Rocks”




class Store:
def init(self, store_name):
self.store_name = store_name




 ajaxblaster64031:

s the same as calling a variable inside the init method


We use the __init__() method so we can instantiate values particular to that instance. The variables once created are free of that method, which only runs once, ever.
An object has been created that has unique attributes. It won’t mean that other objects cannot have those values, but it does mean that now we can actually group objects by their coincidence on certain attribute values. A cool way to look at data.

Thanks @mtf.  I earlier didn’t understand  the importance of ‘init’ runs once during instantiation but now I understand.
When you said “actually group objects by their coincidence on certain attribute values”, are you referring to comparing the values of instance variables of 2 different objects for the same class?
Let me know if my understanding is incorrect. Slowly trying to make my way through classes and understand it.




 ajaxblaster64031:

are you referring to comparing the values of instance variables of 2 different objects for the same class?


Precisely. Two instances of the same class will have common attributes, though their values will be distinct to each instance. We can then compare attribute values.
We won’t need to group them, though. They already are a group, and they have a name… The attribute.

Got it. Thanks for clarifying.

You’re welcome. Here is something further to consider…
We have two circles. One has a radius of p and the other of q. Given that q is double what p is. by the Law of Squares we know that the area of the circle with radius q will be four times the area of the circle with radius p.
In a classified date structure with such computing ability we can readily compare any number of like objects. In geometry we call this, similarity.
How many triangles can you draw when the angles never change? How many triangles can you draw where the side lengths never change?
Answer: Infinite, and, three. Similarity sides with the first result.

Oh, if you count transformations,
infinite

and,
12

.____
It is not about math, as some would hold. We all have it within us to see the numbers and how they relate. Some math might be needed to analyze what we see, but it doesn’t have to be us doing the math to see it.
If we want to understand what the math is telling us, then math it is. But, it should not keep us from seeing what it is we just saw.
It’s why I love Cosmology.

Fantastic differentiation, thank you so much for posting this!

This might have been asked already, but I still don’t understand the difference between defining instance variables using __init__ vs directly using the object.
This
class Store:
    def __init__(self,store_name):
        self.store_name = store_name

alternative_rocks = Store(""Alternative Rocks"")
alternative_rocks.store_name

vs this
class Store():
    pass

alternative_rocks = Store()
alternative_rocks.store_name = ""Alternative Rocks""
alternative_rocks.store_name


From a programming perspective it may prove more beneficial to have attributes defined in the class so that every instance has them in common and our program does not run the risk of raising an AttributeError because an instance does not have an expected attribute.

Got it, that makes sense, thank you!
"
414,How is the modulo operator used to determine if divisible by a number?,"FAQ,Python FAQ",,1,"
Question
For this exercise, the modulo operator is used to determine if the number is divisible by 10. Why does a 0 result mean that the number is divisible?
Answer
The modulo operator returns the remainder portion of a division operation.  If one number is evenly divisible by another number, there will be no remainder. So, if the modulo operator returns a 0, then it means that the number is evenly divisible by 10.
",
415,What does type() return for imported classes?,"FAQ,Python FAQ",,4,"
Question
In this exercise, the type() function returns __main__  for classes defined in the current script. What does it return for classes that are imported?
Answer
The type() command returns the namespace and class for the object provided. For classes defined in the local file, the namespace will be reported as __main__. For classes imported from other modules, the namespace reported will be the same as the module. The following code example shows, the results from type() on objects created from two different modules.
from collections import OrderedDict

mycoll = OrderedDict()

print(type(mycoll))
# <class 'collections.OrderedDict'>


from calendar import Calendar

mycal = Calendar()

print(type(mycal))
# <class 'calendar.Calendar'>

","



 ajaxninja66418:

type() function returns __main__


No it doesn’t…


Python 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> class MyClass:
...   pass
... 
>>> myobj = MyClass()
>>> print(type(myobj))
<class '__main__.MyClass'>


That’s a class, __main__ is a module
>>> import __main__
>>> class MyClass:
...     pass
...
>>> type(MyClass()) is __main__
False

type doesn’t behave differently because something was imported.
type returns the type of the object passed to it
>>> type(MyClass()) is MyClass
True

>>> __main__
<module '__main__' (<_frozen_importlib_external.SourceFileLoader object at 0x7f7b747e3b70>)>

"
416,"If you do a join() after a split() using the same delimiter, does this result in the original string?","FAQ,Python FAQ",,4,"
Question
In the context of this exercise, if you do a join() after a split() using the same delimiter, does this result in the original string?
Answer
Yes, this should result in the original string. This is because join() and split() are essentially inverses of each other.
When we split, it returns a list of substrings that the delimiter was separating. And, when we join on the same delimiter, it merely places that delimiter back where the splits were performed, resulting the same string.
original = ""*A*B*C*D""

splitted = original.split(""*"")
joined = ""*"".join(splitted)

print(joined) # *A*B*C*D

","
A lesser known feature of .join() is its ability to work with strings, too.
>>> ""*"".join('mississippi')
'm*i*s*s*i*s*s*i*p*p*i'
>>> 

>>> ' '.join([chr(x) for x in range(65, 91)])
'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'
>>>


Hi!  New learner here.  Wouldn’t this not necessarily be always true, though, in the case of a string that was split using the delimiter that is the same as its last character?

Try that image upload again. We didn’t catch it on the original post.

A string that is split on any character or sequence of characters must reassemble on join with the same character or sequence of characters as the separator.

I paraphrased the above from somewhere. The point is, there is no delimiter in this context; and, the last character of some string is not a concern given the construct.
"
417,How is each bar's height of a histogram determined?,"FAQ,Python FAQ",,2,"
Question
In the context of this exercise, how is each bar’s height determined in a histogram?
Answer
Each bar’s height in a histogram is the count of values that fall within each bin, or range, of values. The actual values of the data do not affect the height, as each is counted as 1 toward the total height of a bar.
Every bin of a histogram, except for the last bin, counts the values in each range in the following manner:
[start, end)
where the start value of a bin is inclusive toward the count, and the end value is exclusive. For example, with a histogram bin of values between 10 and 20, the value 10 is included, but the value 20 is not included.
The last bin of a histogram is inclusive for the end value. For example, if the last bin is between 80 and 90, then both 80 and 90 are included in the final bar.
","
I have a question related to the last paragraph about the last bin. If 90 was included in the data as you imply, then I suppose that the final bar shouldn’t be between 80-90 but actually  between 90 -100 (range = …, 100). So , in this case , even in the last bin, the end value (100) would be excluded .
Moreover, this is the way the histogram was built in the example in the core lesson with the 5 bins and the range(1,6). The last bin was lying between 5 & 6 in order to include 5.
Is there a contrast here between this information you gave about the last bin and the lesson’s example or there is something else I do not follow?
"
418,When do we apply stacked bar charts?,"FAQ,Python FAQ",,1,"
Question
In the context of this exercise, applying stacked bar charts, when do we usually apply them?
Answer
In general, stacked bar charts applied when you want to see and compare individual values with each other, as well as see how they count toward an overall total. Usually, stacked bar charts are applied in two common cases, which are given as follows.
One common case is when you want to see how much the individual values count toward a set total, and this is usually referred to as a 100% stacked bar chart. In this exercise, we applied this type of stacked bar chart, where each bar has the same height of 30, for the total number of students, where the individual values were the number of students that got each letter grade.
Another common case for applying stacked bar charts is when you do not apply the 100% stacked bar chart, such that the total values are not set. For example, say you were plotting the amount of time spent on chores per day. Each individual value can be the hours spent on a certain chore, and the total height of each bar can be the total hours spent on chores in a single day. Some days you might spend 5 hours total, while on others less or more, resulting in bars of differing total height.
",
419,"When using np.genfromtxt(), can we use a different delimiter?","FAQ,Python FAQ",,1,"
Question
When using genfromtxt() in Numpy, can we use a different delimiter value?
Answer
Yes, you can!
When using the genfromtxt() function, the value for the delimiter argument can be any sequence of characters to split the text on each line of the file. Each string of text will be split on the specified delimiter value.
Usually, the value is a single character, such as a comma (,) or semicolon (;). But, you can also use strings as delimiters. Regardless of what you use, it will split each line of text on that sequence of characters. It’s similar to the .split() method in Python.
Example
# Say a CSV file 'example.csv' contains the following data

'''
10blah20blah30
40blah50blah60
'''

np.genfromtxt('example.csv', delimiter='blah') 
# will result in
array([10, 20, 30],
      [40, 50, 60])

",
420,If I use `in` do I need to set something to return `True`?,"FAQ,Python FAQ","q-a,strings",8,"
Hello!
I know that I’ve tried to solve it differently by going at it differently and not using “in” for both parameters and I’ve understood how to answer the question.
However, I’m having trouble understanding why the code I’ve written always seems to be returning an empty list.
def common_letters(string_one, string_two):
  common_lst = []
  for char1 in string_one:
    for char2 in string_two:
      if char1 == char2 and char1 not in common_lst == True:
        common_lst.append(char1)
  return common_lst

**Edit:
I’ve also tried changing the indentation of the return common_lst with no avail. So far I understand the concepts taught in this course pretty well, but for some reason I always struggle with indentation!
","



 byteslayer80073:

not in common_lst == True:


Unnecessary to write == True.
Is it really necessary to iterate both strings? Consider that in is a sort of iterator as it seeks membership. Iterating over one string (either one) and searching in the other will certainly detect any matches.

Hi mtf,
Could you please clarify what you mean regarding in?

in returns True or False all by itself. You don’t need to add   == True.
my_str = 'abcde'
print('abc' in my_str)
print('xyz' in my_str)

Output:
True
False

Incidentally, due to operator precedence, and the way chaining works, your expression won’t work as you expect:
print('xyz' not in my_str ==  True)

Output:
False

The chained expression is evaluated as follows:
('xyz' not in my_str) and (my_str ==  True)

… which returns False, since the second term returns False.




 patrickd314:

chaining


Woah. Took me a good minute to see that there was comparison chaining there even after you said it. That’s pretty surprising. I’d never write that, but I’d also never spot it by only reading it.




 patrickd314:

print(‘xyz’ not in my_str == True)


Owing that in (membership) and == (identity) have equal precedence, operations occur from left to right
'xyz' not in my_str  => True
True == True         => True

…no
but that’s how I would first read it, too.

>>> my_str = 'abcdef'
>>> 'xyz' not in my_str
True
>>> 'xyz' not in my_str == True
False
>>> 

I stand corrected, thank you.
"
421,Do I need to count `n`?,"FAQ,Python FAQ","lists-functions,q-a",3,"
Why don’t I have to use .count() on the —n---- value?
","
Because it is a value, not an iterable, so has nothing to count. The purpose here is to determine if the item count is greater than N.
m = lst.count(item)
return m > n

Thank you mtf! That helps a lot it’s those little things I’m trying to understand. I did a bunch of research online too just couldn’t find exactly what I needed.
"
422,How is the modulo operator used to determine if divisible by a number?,"FAQ,Python FAQ",,1,"
Question
For this exercise, the modulo operator is used to determine if the number is divisible by 10. Why does a 0 result mean that the number is divisible?
Answer
The modulo operator returns the remainder portion of a division operation.  If one number is evenly divisible by another number, there will be no remainder. So, if the modulo operator returns a 0, then it means that the number is evenly divisible by 10.
",
423,How can I make the not_sum_to_ten() function ignore negative numbers?,"FAQ,Python FAQ",q-a,2,"
Question
For this exercise, the not_sum_to_ten() function will return True for the numbers 9 and -1 and return False for 9 and 1. If I wanted to make the function ignore whether the numbers were negative, how would that work?
Answer
The Python abs() function will return the absolute value of a number. Calling the abs() function during the check as shown below will cause the function to treat 9 and -1 the same as 9 and 1.
if (abs(num1) + abs(num2) != 10):

","
I loved the question and the answer here… I am loving this a little more every day!
"
424,Does the __repr()__ method need to provide all the attributes of an object?,"FAQ,Python FAQ",,8,"
Question
When implementing the __repr__() method, do all object attributes have to be used when constructing the string?
Answer
While you are allowed to include or exclude any information from the object that you want, the Python documentation recommends that the implementation for __repr__() should contain as much information as possible and if, at all possible, it should contain whatever is necessary to recreate the object. The __str__() method also returns a string representing the object but it can be used for a more informal representation of the object.
","
In a sense, instance.__repr__() is a getter, only it gets everything, and the expected return value will be a string representation of the data points of the instance as initialized and or modified.
The operative phrase above was return value. Getters don’t do things; they return things.
class Foo(object):
  def __init__(self, foo):
    self.foo = foo
  def __repr__(self):
    return ""foo: {}"".format(self.foo)

foo = Foo('foo')
print (foo)

>>> 
=================== RESTART: D:/cc/discuss/FAQ/__repr__.py ===================
foo: foo
>>> 



may anyone explain this line for me i mean why should i write that line , isn’t the variable "" name "" already defined in the function parameter ?




 hossamokasha76917137:

… isn’t the variable "" name "" already defined in the function parameter ?


A function’s parameters are names that are local to that function. When the function completes its execution, the local variables are lost. Therefore, if we wish to preserve the values of the function parameters, we need to save those values somewhere, for example, in instance variables, which are not merely local to the function.
An instance variable does not necessarily need to have the same name as a parameter that is used to set its value.

so it’s necessary to save every method’s parameter in an instance variable ?

We don’t necessarily always need to save the value of a parameter exactly as it was given.
See the following:
class Circle:
  pi = 3.14149265
  def __init__(self, circumference):
    self.radius = circumference / Circle.pi
  def get_circumference(self):
    return self.radius * Circle.pi
  def get_radius(self):
    return self.radius

c = Circle(10.0)
print(c.get_circumference())
print(c.get_radius())

Output:
10.0
3.183200189884258

We instantiated the Circle with the circumference, but calculated its radius and saved that value. In a sense, we discarded the value provided by the argument, but we can use the saved radius to recover an approximation of the circumference. Admittedly, we could lose some precision in the process.
The guiding principle is that we use parameters of the __init__ method to provide information that is needed to instantiate an instance. We might even use some of that information to perform other tasks related to the context in which the instance was created, such as maintaining files, or coordination with other objects. However, in some cases, we might not need to retrieve the provided information later, exactly as it was given originally.

Really thank you so much for making that clear !!

Another example:
class AdoptedCat:
  def __init__(self, name, is_hungry):
    self.name = name
    if is_hungry:
      print(""Feed {} now!"".format(self.name))
    else:
      print(""Feed {} later"".format(self.name))

cat = AdoptedCat(""Monty"", True)

Output:
Feed Monty now!

We saved name, but not is_hungry. However, we used both.
"
425,FAQ: Learn Sample Size Determination with SciPy - Likely Sample Proportion,"FAQ,Python FAQ",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Likely Sample Proportion” exercise from the lesson “Learn Sample Size Determination with SciPy”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Data Science Analyze Data with Python
FAQs on the exercise Likely Sample Proportion


There are currently no frequently asked questions associated with this exercise – that’s where you come in!  You can contribute to this section by offering your own questions, answers, or clarifications on this exercise.  Ask or answer a question by clicking reply () below.
If you’ve had an “aha” moment about the concepts, formatting, syntax, or anything else with this exercise, consider sharing those insights!  Teaching others and answering their questions is one of the best ways to learn and stay sharp.

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
You can also find further discussion and get answers to your questions over in #get-help.
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head to #get-help and #community:tips-and-resources. If you are wanting feedback or inspiration for a project, check out #project.
Looking for motivation to keep learning? Join our wider discussions in #community
Learn more about how to use this guide.
Found a bug? Report it online, or post in #community:Codecademy-Bug-Reporting
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
426,Can a list contain items of different types?,"FAQ,Python FAQ",,1,"
Question
Is it possible to put different types of data in the same list variable?
Answer
A list in Python CAN contain different types of data. Each item in the list is separated by a comma and the entire list is enclosed in square brackets []. To add a new item to the list, just edit the list starting before the closing bracket. Add a comma and the new item. It doesn’t matter what the type is for the previous item.
In the example below, the elements list contains the name of an element and its atomic number and mass. The list then contains the same data for another element. The data types contained in the list are strings, integers, and floating point values
elements = [‘Hydrogen’, 1, 1.007825, ‘Helium’, 2, 4.00260]

",
427,When do we apply stacked bar charts?,"FAQ,Python FAQ",,1,"
Question
In the context of this exercise, applying stacked bar charts, when do we usually apply them?
Answer
In general, stacked bar charts applied when you want to see and compare individual values with each other, as well as see how they count toward an overall total. Usually, stacked bar charts are applied in two common cases, which are given as follows.
One common case is when you want to see how much the individual values count toward a set total, and this is usually referred to as a 100% stacked bar chart. In this exercise, we applied this type of stacked bar chart, where each bar has the same height of 30, for the total number of students, where the individual values were the number of students that got each letter grade.
Another common case for applying stacked bar charts is when you do not apply the 100% stacked bar chart, such that the total values are not set. For example, say you were plotting the amount of time spent on chores per day. Each individual value can be the hours spent on a certain chore, and the total height of each bar can be the total hours spent on chores in a single day. Some days you might spend 5 hours total, while on others less or more, resulting in bars of differing total height.
",
428,Does the order of logical operators matter?,"FAQ,Python FAQ",,10,"
Question
If we are combining multiple logical statements, and we kept the statement order fixed, does the order of the logical operators (or/and) matter?
Answer
Yes and no. It depends on how many logical statements there are.
When there is only one logical statement, it’s always going to evaluate the same way, because it’s just a single statement.
num < 3
num > 6
When there are two logical statements, order does not matter, because we can only apply one logical statement & (and) or | (or) between them.
(num < 3) | (num > 6)
is the same as
(num > 6) | (num < 3)
When we have more than two statements, that is when order does start to matter.
Say that we have three statements, and wish to combine them using one | and one &. Like so, in different operator orders.
A & B | C
A | B & C

These will not necessarily be the same result. For instance, take these values.
A = False
B = False
C = True

A & B | C
False & False | True = True
A | B & C
False | False & True = False

So, order of the logical operators will matter. This is mainly due to the order of operations, as & (and) is evaluated before any | (or) operators.
","
I think that the example is not a different order of operators example, there are two different set of operations.
Different order will be if the second statement was:
True | False & false.
or am I mistaken?

Why did passing ‘&’ did not return any value in this case as logically it made sense to retrieve data of March ‘and’ April.

You are right, putting & instead of | in the lesson’s exercise does not return any output in the screen. I hadn’t thought making this change and check the result.
In the beginning I could not give an explanation but later I think I realised what is going on.
Sometimes, the logic behind our expessions in our written/spoken language is somewhat different from the logic of the written code.
I mean, if as a Head of a clinic you wanted to retrieve data of both months March, April , you would probably tell your associates “provide me data for March and April”.
However, if you told them “provide me data for March or April”, this would be ambiguous; some might give you data only for March, some only for April and some might give for both months just to be sure that you will not give them extra work later.
However, in the code, the logic is slightly different and hopefully more clear.
Columns March , April are actually two different , distinct conditions. So , in order to select the rows that refer to these 2 columns/months we have to use | (or).
& (and) cannot be applied because one condition (March) excludes the other (April).
& (and) can be used when , selecting rows, each logical statement refers to diffferent columns e.g.
march_west = df[(df.month == ‘March’) & (df.clinic_west == 96)]
print(march_west)
I noticed that this different use of OR AND in written/spoken language comparing to coding   ( | , & ) also appears in the particular CodeAcademy lesson.
The author writes in the Instructions: "" Create the variable  march_april , which contains the data from March and April"".
And just in the 2 next lines: "" Do this using two logical statements combined using  | , which means “or”.
You can see a very good graphical illustration of the OR AND operators in the 2 links below.
Although they refer to SQL , not python , I believe they help capture the difference (obviously from a statistical point of view);  at least for me it was very helpful.
Just look only at the graphs and the sentences below them.
https://www.codecademy.com/paths/data-science/tracks/sql-basics/modules/dspath-sql-queries/lessons/queries/exercises/and
https://www.codecademy.com/paths/data-science/tracks/sql-basics/modules/dspath-sql-queries/lessons/queries/exercises/or

Unless I am misinformed, & and | are bitwise operators, not logical operators in Python. They are also intersection and union operators in the sets module. The logical operators are and and or.
if (x < 6) and (y > 6):

if (x < 5) or (x > 10):

Bitwise operators work on binary numbers.
15 & 8  => 8

Why?
1 1 1 1
1 0 0 0

The two numbers have only the 2^3 bit in common, which is the bit representing the number 8.
7 | 8  => 15

Why?
0 1 1 1
1 0 0 0

We see that between the two numbers there is a bit set in each of the four bits, which represents 15.

I am having difficulty having proper comprehension of your explanation. This is because i got the following result which clearly contradict your points, I will be glad if you can help with further clarifications.
test_df = pd.DataFrame([
    [1, 'Ola', 80, 25, 'A', 'Passed'],
    [2, 'Bola', 42, 24, 'E', 'Failed'],
    [3, 'Tayo', 99, 22, 'A', 'Passed'],
    [4, 'Adebola', 95, 27, 'A', 'Passed'],
    [5, 'Marvel', 40, 24, 'E', 'Failed']
    ],
    columns= ['id', 'name', 'score', 'age', 'grade', 'status'])

print(test_df)

(.venv) sodiqafolayan@Sodiqs-MacBook-Pro hello % /Users/sodiqafolayan/Desktop/Grand_Project/hello/.venv/bin/python /Users/sodiqafolayan/Desktop/Grand_Project/hello/hello.py
   id     name  score  age grade  status
0   1      Ola     80   25     A  Passed
1   2     Bola     42   24     E  Failed
2   3     Tayo     99   22     A  Passed
3   4  Adebola     95   27     A  Passed
4   5   Marvel     40   24     E  Failed

exa = test_df[(test_df.age > 25) & (test_df.score > 50)]
print(exa)

  id     name  score  age grade  status
3   4  Adebola     95   27     A  Passed

 id     name  score  age grade  status
0   1      Ola     80   25     A  Passed
2   3     Tayo     99   22     A  Passed
3   4  Adebola     95   27     A  Passed

As you can see from the above, both “and” & and “or” | worked logically as the way we express both in daily conversation.
I will appreciate if you can advise on where i am wrong

Hi, I am no expert or anything (please correct me if i’m wrong here) but I think your example is different because you’re evaluating two different columns (age and score).
In the example we’re evaluating only one column (month). The “normal” logic on “or” and “and” doesn’t apply here because “and” (&) would ask the code to provide rows in which the month is BOTH march and april at the same time.
On the other hand if you use “or” you would be asking the code to provide those rows in which month is EITHER march “or” (|) april.

This exercise is wrong in saying: "" In Python,  |  means “or” and  &  means “and”.""
Python uses the syntax  and ,  or , and  not , whereas in Pandas are &, | and ~ (not),and parentheses (…) is best to always add to!




 cloud9890218838:

wrong in saying: "" In Python, | means “or” and & means “and”.""


Those are Bitwise Operators. Nothing wrong here. Pandas is not core Python and plays no part in this.

Sorry, my expression wasn’t clear that I’m pointing to the exact sentence in the linked exercise per se, not your post, and yes it is Bitwise Operators in Python and logical Operators are and  ,  or  , and  not in Python.
"
429,How is each bar's height of a histogram determined?,"FAQ,Python FAQ",,2,"
Question
In the context of this exercise, how is each bar’s height determined in a histogram?
Answer
Each bar’s height in a histogram is the count of values that fall within each bin, or range, of values. The actual values of the data do not affect the height, as each is counted as 1 toward the total height of a bar.
Every bin of a histogram, except for the last bin, counts the values in each range in the following manner:
[start, end)
where the start value of a bin is inclusive toward the count, and the end value is exclusive. For example, with a histogram bin of values between 10 and 20, the value 10 is included, but the value 20 is not included.
The last bin of a histogram is inclusive for the end value. For example, if the last bin is between 80 and 90, then both 80 and 90 are included in the final bar.
","
I have a question related to the last paragraph about the last bin. If 90 was included in the data as you imply, then I suppose that the final bar shouldn’t be between 80-90 but actually  between 90 -100 (range = …, 100). So , in this case , even in the last bin, the end value (100) would be excluded .
Moreover, this is the way the histogram was built in the example in the core lesson with the 5 bins and the range(1,6). The last bin was lying between 5 & 6 in order to include 5.
Is there a contrast here between this information you gave about the last bin and the lesson’s example or there is something else I do not follow?
"
430,"If you do a join() after a split() using the same delimiter, does this result in the original string?","FAQ,Python FAQ",,4,"
Question
In the context of this exercise, if you do a join() after a split() using the same delimiter, does this result in the original string?
Answer
Yes, this should result in the original string. This is because join() and split() are essentially inverses of each other.
When we split, it returns a list of substrings that the delimiter was separating. And, when we join on the same delimiter, it merely places that delimiter back where the splits were performed, resulting the same string.
original = ""*A*B*C*D""

splitted = original.split(""*"")
joined = ""*"".join(splitted)

print(joined) # *A*B*C*D

","
A lesser known feature of .join() is its ability to work with strings, too.
>>> ""*"".join('mississippi')
'm*i*s*s*i*s*s*i*p*p*i'
>>> 

>>> ' '.join([chr(x) for x in range(65, 91)])
'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'
>>>


Hi!  New learner here.  Wouldn’t this not necessarily be always true, though, in the case of a string that was split using the delimiter that is the same as its last character?

Try that image upload again. We didn’t catch it on the original post.

A string that is split on any character or sequence of characters must reassemble on join with the same character or sequence of characters as the separator.

I paraphrased the above from somewhere. The point is, there is no delimiter in this context; and, the last character of some string is not a concern given the construct.
"
431,What does type() return for imported classes?,"FAQ,Python FAQ",,4,"
Question
In this exercise, the type() function returns __main__  for classes defined in the current script. What does it return for classes that are imported?
Answer
The type() command returns the namespace and class for the object provided. For classes defined in the local file, the namespace will be reported as __main__. For classes imported from other modules, the namespace reported will be the same as the module. The following code example shows, the results from type() on objects created from two different modules.
from collections import OrderedDict

mycoll = OrderedDict()

print(type(mycoll))
# <class 'collections.OrderedDict'>


from calendar import Calendar

mycal = Calendar()

print(type(mycal))
# <class 'calendar.Calendar'>

","



 ajaxninja66418:

type() function returns __main__


No it doesn’t…


Python 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> class MyClass:
...   pass
... 
>>> myobj = MyClass()
>>> print(type(myobj))
<class '__main__.MyClass'>


That’s a class, __main__ is a module
>>> import __main__
>>> class MyClass:
...     pass
...
>>> type(MyClass()) is __main__
False

type doesn’t behave differently because something was imported.
type returns the type of the object passed to it
>>> type(MyClass()) is MyClass
True

>>> __main__
<module '__main__' (<_frozen_importlib_external.SourceFileLoader object at 0x7f7b747e3b70>)>

"
432,Could the parameters to the win_percentage function be changed to not include losses?,"FAQ,Python FAQ",q-a,2,"
Question
In this exercise, the win_percentage() function is passed wins and losses. What other parameters could be passed instead of losses?
Answer
The function is intended to calculate the ratio of wins to games played. The losses parameter is only used to compute the total number of games played for the ratio calculation. If the function were re-written to take wins and games_played as the parameters, the calculation in the function would only need to perform the division for the ration (and multiple by 100) and not calculate the total number of games played first.
","
8 posts were split to a new topic: Where do I need parenthesis to make the win percentage work?
"
433,Can we perform operations between 1-D and 2-D NumPy Arrays?,"FAQ,Python FAQ",,1,"
Question
Can we perform operations between 1-D and 2-D NumPy Arrays?
Answer
Yes, when performing an operation between a 1-D and a 2-D NumPy Array, it will essentially perform the operation on the 1-D array with each row of the 2-D Array individually.
As a result, it is only possible if the number of elements for every row in both Arrays match.
For example, these two arrays have 2 elements in each row, so you can perform an operation on them.
# When we perform an operation on these arrays, 
# it is essentially running the operation 
# on each row of the 2-D list with the 1-D list.
arr1 = np.array([[1, 1], [2, 2], [3, 3]])
arr2 = np.array([10, 10])

arr1 * arr2
# The result of running the above is
# [[10 10]
#  [20 20]
#  [30 30]]

",
434,What happens when we apply an operation between two 1-D arrays with different lengths?,"FAQ,Python FAQ",,1,"
Question
In NumPy, what happens when we apply an operation between two 1-D arrays with different lengths?
Answer
If we try to perform an operation, such as addition or subtraction, on two or more arrays with differing lengths, then there will be an error message thrown, specifically a ValueError.
When performing an operation on two arrays, each element of both arrays is essentially paired up from the first to the last element, and the operation is run on each pair of values. When one element is unpaired due to different array lengths, it will have no paired value, causing the error.
",
435,Can I use my own shorthand for imported modules?,"FAQ,Python FAQ",,1,"
Question
When importing modules in Python, can I use my own shorthand for them, or do I have to follow the ones that Codecademy uses?
Answer
You can absolutely use your own shorthand for imported modules, and are not limited to using only the shorthand used in Codecademy, such as
import numpy as np
In the Codecademy lessons, we stick to specific shorthand for modules, but when you work outside of Codecademy, you can use your own.
There are a few things that might be important to keep in mind when applying shorthand for module imports.

They should not conflict with any reserved keywords in Python. So avoid shorthand like import module as False, since False is a reserved keyword.
Similar to the above point, you should also avoid using the same shorthand as an existing variable name, which will most likely cause issues.
Usually, we use shorthand to shorten the name of a module or function we import. So, you should only really use shorthand if it is shorter than the imported module name, otherwise it would not be too useful, unless you prefer using a different name.
Try to use shorthand that is easily identifiable and easy to understand, like np for numpy.
You do NOT have to use shorthand if it’s not necessary. However, it does save a lot of time by shortening the module names, and can reduce typos since there is less typing. Depending on who else is working on the program, they may prefer a certain shorthand, or not use any at all, so do what works best in the situation.

",
436,How can I define and use a __repr__ method?,"FAQ,Python FAQ",,4,"
Question
How can I define and use a repr method?
Answer
In our class Print3D, there are a few key points to make our __repr__() method useful.
Be sure to pass self to any class method, including __repr__(), like this: def __repr__(self):
Inside we need to define how our object is printed. Whenever the built-in print function receives our object, it looks for a __repr__() method, and if it’s found, it prints the return value to the screen! So we just return what the instructions ask: ""(%d, %d, %d)"" % (self.x, self.y, self.z)
","



 wiki-bot:

def __repr(self):


Did you mean to include “__” after “repr”???

Good catch. Thanks for pointing this out.

See documentation at  object. __repr__ ( self ).
Note  that the documentation states …

The return value must be a string object.

"
437,What are some differences between an array and a list?,"FAQ,Python FAQ",,12,"
Question
What are some differences between an array and a list?
Answer
In Python, an array, or NumPy Array, and list share many similarities, but they also have some important differences on how they can be used.
Both arrays and lists can hold multiple items of any type. You can also access individual items by indexes.
One important, and probably the main difference, between them is that you can perform operations on an array, like addition, multiplication, and subtraction, like you would a vector in mathematics.
This means that if you have an array of numbers, you can add a single number to every value in the array with one operation. With a list, operations cannot be applied on every single element like for an array, and might even cause errors.
Arrays also provide several other useful functionality, which you will learn throughout this lesson.
Example
test = np.array([1, 2, 3, 4, 5])
test += 10

# The array is now [11, 12, 13, 14, 15]

","
I was attempting to do a comparison between lists and arrays so I carried out the below but for some reason it didn’t work, any ideas what I’ve done wrong?
import numpy as np
test_1 = np.array([92, 94, 88, 91, 87])
a = [1,2,3,4,1,2]
m = list (lambda a : a + 2)
print (m)


here you define a lambda function:
lambda a : a + 2

then you try to convert the lambda function to list, why?
you are never call the lambda function

i thought because it was originally a list it needed to be converted to a list. I tried the below modified on your suggestion but it’s still not working. When you say you never call the lambda what do you mean?
revised code:
import numpy as np
test_1 = np.array([92, 94, 88, 91, 87])
b= [1,2,3,4,1,2]
m = lambda b : b + 2
print (m)





 script0351949381:

i thought because it was


what is it? b variable?



 script0351949381:

When you say you never call the lambda what do you mean?


lambdas are function, first you define the function. Then in order to execute a function you need to call the function/lambda.
what is exactly you are trying to achieve?

I wanted to add 2 to every entry in the list b

so you defined the (lambda) function, what is stopping you from calling the (lambda) function?

sorry I don’t understand what you mean? When i execute the above i was expecting to see a list but with all the elements increased by two but instead I get this <function  at 0x7ff37d9e3de8>




 script0351949381:

When i execute the above i was expecting to see a list


why did you expect a list? You defined the function, you never called/executed the function.
maybe do some reading about functions? this might help:
https://www.tutorialspoint.com/python/python_functions.htm
The great thing about functions is that we can define them, and then call them multiple times to prevent repetitive code.
i am sorry, but understanding the difference between “defining” and calling a function is quite a fundamental part of functions.
if you use lambdas, one might assume you are at least familiar with the fundamentals of functions
is also told you what is wrong, which can help you in researching a solution.

A lambda function is a function, just as is a function defined using def. After being defined, it can be called. If you call it without providing any arguments, the actual function object will be returned. If you call it as you generally call any other function, with appropriate arguments, it will do what you expect:
m = lambda x: x** 2
print(m)
p = m(6)
print(p)

Output
<function <lambda> at 0xabcdef123456>
36

It is possible that you are used to seeing lambda functions “standing alone” in key = expressions within obj.sort() or other container (e.g., list) methods.  In that useage, the key = functions as sort of an “iterative operator” that calls the lambda on each item in the container.

Food for thought…
>>> b= [1,2,3,4,1,2]
>>> m = map(lambda x : x + 2, b)
>>> m 
[3, 4, 5, 6, 3, 4]
>>> 

We see above how the map iterator is utilized to produce the desired outcome. map takes a callback, but list does not.




 patrickd314:

you generally call any other function, with appropriate a


Thank you @patrickd314 that was very helpful 
"
438,"When using np.genfromtxt(), can we use a different delimiter?","FAQ,Python FAQ",,1,"
Question
When using genfromtxt() in Numpy, can we use a different delimiter value?
Answer
Yes, you can!
When using the genfromtxt() function, the value for the delimiter argument can be any sequence of characters to split the text on each line of the file. Each string of text will be split on the specified delimiter value.
Usually, the value is a single character, such as a comma (,) or semicolon (;). But, you can also use strings as delimiters. Regardless of what you use, it will split each line of text on that sequence of characters. It’s similar to the .split() method in Python.
Example
# Say a CSV file 'example.csv' contains the following data

'''
10blah20blah30
40blah50blah60
'''

np.genfromtxt('example.csv', delimiter='blah') 
# will result in
array([10, 20, 30],
      [40, 50, 60])

",
439,"I’ve made comparisons that result in true or false as asked, why can’t I pass?","FAQ,Python FAQ",,4,"
Question
I’ve made comparisons that result in true or false as asked, why can’t I pass?
Answer
Be sure to use at least three different operators out of the six we’ve learned about: ==, !=, >, >=, <, and <=. If you only use one or two, it will not pass, and if you write True or False, that’s cheating!
Also, remember how <= and >= work! They will result in True if both sides of the operator are equal as well, which can be tricky.
Checking your math, either way, is good practice.
","
2 posts were split to a new topic: Can’t Proceed

What ever i type make me pass!?

Yeah. But look at the comments also.
"
440,What is the difference between break and return?,"FAQ,Python FAQ",,4,"
Question
What is the difference between break and return?
Answer
break is used to prematurely end a loop, like we have done a few times throughout this lesson. return is only usable in functions and returns a value to wherever the function was called in the program. If you try using return outside of a function you will get an error.
","
Please I don’t understand very well the existence of an else after a for loop.
What would be the difference if I wrote:
This   (with else)
`fruits = ['banana', 'apple', 'orange', 'tomato', 'pear', 'grape']`
for f in fruits:
  if f == 'tomato':
    print 'A tomato is not a fruit!' # (It actually is.)
    break
  print 'A', f
else:
  print 'A fine selection of fruits!'

and This  (without else)
`fruits = ['banana', 'apple', 'orange', 'tomato', 'pear', 'grape']`
for f in fruits:
  if f == 'tomato':
    print 'A tomato is not a fruit!' # (It actually is.)
    break
  print 'A', f
print 'A fine selection of fruits!'

It’s to understand…

In your first example, the print 'A fine selection of fruits!' statement will only execute if the for loop iterates through the entire fruits array which it won’t because of the break statement. If you remove 'tomato' from the array, the break will never be reached, and the code inside the else: block will execute. In your second example without the else, print 'A fine selection of fruits!' will always execute whether there is a 'tomato' in the array or not.

for..else is a far cry from if..else.
In the latter, else is connotative of, “in any case…”. In the former, else is connotative of, “not wanted on the voyage”.
In either case, neither satisfied their condition.
"
441,What is Codecademy checking for to be printed?,"FAQ,Python FAQ",,6,"
Question
What is Codecademy checking for to be printed?
Answer
Like all exercises on Codecademy that ask you to name a variable, assign a value, or print something, the name, value, or thing being printed must match what’s asked for exactly.
For example, if the exercise wants us to print the student’s name, and we added something like this: print ""Student’s name is: "" + student[""name""], that would definitely look great!
However! The Codecademy tests running behind the scenes need you to output exactly what’s being asked for, so just the name by itself. Same with the other values.
After this lesson, however, you can definitely customize it as much as you want without worrying about passing or not, or you can take your code to an in-browser Python environment, like the one found at repl.it - just type in Python and be sure not to use Python 3.
","
3 posts were split to a new topic: How does Python access the items in the list?

What’s going on here? I’ve puzzled as to why this isn’t working:
lloyd = {
  ""name"": ""Lloyd"",
  ""homework"": [90.0, 97.0, 75.0, 92.0],
  ""quizzes"": [88.0, 40.0, 94.0],
  ""tests"": [75.0, 90.0]
}
alice = {
  ""name"": ""Alice"",
  ""homework"": [100.0, 92.0, 98.0, 100.0],
  ""quizzes"": [82.0, 83.0, 91.0],
  ""tests"": [89.0, 97.0]
}
tyler = {
  ""name"": ""Tyler"",
  ""homework"": [0.0, 87.0, 75.0, 22.0],
  ""quizzes"": [0.0, 75.0, 78.0],
  ""tests"": [100.0, 100.0]
}

students = [lloyd, alice, tyler]
for students in students:
    print students[""name""]
    print students[""homework""]
    print students[""quizzes""]
    print students[""tests""]
    print 

This is my output:
Lloyd
[90.0, 97.0, 75.0, 92.0]
[88.0, 40.0, 94.0]
[75.0, 90.0]

Alice
[100.0, 92.0, 98.0, 100.0]
[82.0, 83.0, 91.0]
[89.0, 97.0]

Tyler
[0.0, 87.0, 75.0, 22.0]
[0.0, 75.0, 78.0]
[100.0, 100.0]






 fennar01:

for students in students


Do you mean,
for student in students:
    print (student['name'])
    # ...

I made this (a for inside a for):
-----for student in students:
----------for data in student:
---------------print student[data]
and my outputs were “disorganized”, for example:
[0.0, 75.0, 78.0]
[100.0, 100.0]
Tyler
[0.0, 87.0, 75.0, 22.0]
I want to know why does this print the data in this order, and not the order I see in the dictionary

Dictionaries have only been ordered (insertion order) since Python version 3.6 and on. Before then they were unordered structures. Since you’re using old style print I guess this is python2 in which case the key-value pairs are not based on insertion order.
So the output of looping through them won’t necessarily be the order the items were added to the dictionary. Instead you may have to access the keys with an ordered structure such as a List if you want a more exact output, e.g.
students = [lloyd, alice, tyler]
# new list to loop through keys in a specific order-
ordered_key_names = ['name', 'homework', 'quizzes', 'tests']
for student in students:
    for key in ordered_key_names:
        # as an example...

There is an OrderedDict class available from the collections module which may be of interest for you: from collections import OrderedDict
Documentation-
https://docs.python.org/2/library/collections.html#collections.OrderedDict
"
442,Why would we want to print index + 1?,"FAQ,Python FAQ",,9,"
Question
Why would we want to print index + 1?
Answer
Often at times when you write code, it makes sense to you as a coder. However, things like counting from 0 are not common elsewhere! Someone reading your menu of options might be put off by 0 being an option, and the remaining options seeming to be less than their position by one.
To account for this, adjusting your output values that are visible to the user is a common practice. It keeps your internal code readable by you and other coders, and the output pleasant for everyone else to look at!
","
I have no idea how to do this one…here is what I have tried:
d = {'a': 'apple', 'b': 'berry', 'c': 'cherry'}

for key in d:
  enumerate d[key]

I have just refreshed the page and it has now come up with a completely different set of code:
choices = ['pizza', 'pasta', 'salad', 'nachos']

print 'Your choices are:'
for index, item in enumerate(choices):
  print index + 1, item

Nevertheless, does the ‘index, item’ syntax access the indexes of all the items? That is, is this the generic syntax for accessing the index of an item? an alternative to list[item]?

What is the goal (objective) in your code?
>>> d = {'a': 'apple', 'b': 'berry', 'c': 'cherry'}
>>> for key in d:
	print (list(enumerate(d[key])))

	
[(0, 'a'), (1, 'p'), (2, 'p'), (3, 'l'), (4, 'e')]
[(0, 'b'), (1, 'e'), (2, 'r'), (3, 'r'), (4, 'y')]
[(0, 'c'), (1, 'h'), (2, 'e'), (3, 'r'), (4, 'r'), (5, 'y')]
>>> 

Notice how the strings in d have been enumerated? Is that the desired outcome?



 jjhiggins97:

does the ‘index, item’ syntax access the indexes of all the items?


We can use the enumerate to access both index and value in one go.
>>> for index, item in enumerate(choices):
  print (index + 1, item)

  
1 pizza
2 pasta
3 salad
4 nachos
>>> 

The idea of adding 1 to the index gives us natural counting numbers. Not many restaurants have a Number Zero on the menu.

Ah okay, so do you have to put:
for index, item in enumerate(choices):
Or can you just put:
for item in enumerate(choices):
?




 jjhiggins97:

for index, item in enumerate(choices):


The enumerate() function needs both variables order to access the item as a printable value. If we leave off the index variable, it prints the values as tuples with index and quoted strings, which  may not be what we wish to display.
>>> for item in enumerate(choices):
  print (item)

  
(0, 'pizza')
(1, 'pasta')
(2, 'salad')
(3, 'nachos')
>>> 

Now ask one’s self, does it make sense to use a function in a non-standard way?
>>> for item in choices:
	print (item)

	
pizza
pasta
salad
nachos
>>> 


Ah okay, so this is just how the ‘enumerate’ function works?



 mtf:

Now ask one’s self, does it make sense to use a function in a non-standard way?


Non-standard way?




 jjhiggins97:

Non-standard way?


Writing for item in enumerate(choices) is not a standard usage. If all we want is the item, then,
for item in choices:

Got it!
Thanks a lot!
"
443,Is there a naming convention I should follow with classes?,"FAQ,Python FAQ",,5,"
Question
Is there a naming convention I should follow with classes?
Answer
It’s ultimately up to you, but following a convention can help make your code look much cleaner overall. It also may end up depending on where you work because some companies enforce their own code conventions.
For most people, class names will be capitalized and all one word, unlike how we’ve been writing variables with underscores so far.
As a general rule, your class names should be as descriptive as possible, leaving as little room for ambiguity as possible. For example, naming a class MyClass is totally fine, but tells me or anyone else reading your code absolutely nothing about what the class does. Naming a class HTMLPageTitleScraper, on the other hand, tells me exactly what the class does!
","
When it says ‘created a lemon instance’, does this just mean ‘created a lemon variable’?

So, is a class like a large function, and it could be ‘called’ by other classes?

Genereally speaking it’s a larger function yeah.
But classes usually specify a specefic Object.
You can also nest classes inside of classes.
class A:
    class B:
        pass
    pass

class car would be an object of 4 wheels motor drives ect
class type of car would be an inheritance of class car

Just found a good code discription online to show classes calling classes
https://pythonspot.com/inner-classes/
#!/usr/bin/env python
 
class Human:
 
  def __init__(self):
    self.name = 'Guido'
    self.head = self.Head()
    self.brain = self.Brain()
 
  class Head:
    def talk(self):
      return 'talking...'
 
  class Brain:
    def think(self):
      return 'thinking...'
 
guido = Human()
print guido.name
print guido.head.talk()
print guido.brain.think()

"
444,How can I test if a number is an integer without using type( )?,"FAQ,Python FAQ",,20,"
Question
How can I test if a number is an integer without using type( )?
Answer
The instructions want us to not use the built in type() function to determine if the given number x is an integer or not. To do this, we’ll need to round the value given to us, and we can do that using one of two functions: ceil() or floor(), which are both available through the math module we learned about earlier.
We can do this because if we round a number and it’s different than our initial number, we know the number given was a float. For example, if we’re given 78.6 and we round it, we’ll have 79. The difference between the two is not 0, so we know we were given a float!
","
Way without using additional modules.

def is_int(x):
  print x
  print int(x)
  if x==0:
    return True
  elif (x/int(x))==1:
    return True
  else:
    return False



I  totally forgot about those functions in the math module, So I just simply compared the x to what x would be if it’s an integer using int(x). If it doesn’t match then its a float or something else

def is_int(x):
  if x == int(x):
    return True
  else:
    return False



I used modulo (which was in the previous lesson) - if it can be divided by 1 without a remainder, then it’s an integer ??:
def is_int(x):
if x % 1 == 0:
return True
else:
return False

I have tried to reduce it down:
def is_int(x):
  return not bool(x%1)

For those that are interested. I have to note that i never coded in Python before (though in other languages); The function does what was requested. Be aware that if you feed Boolean values, the function still work, due to True===1 and False===0; Would be interesting to see how all these variants do in comparison, when feeding a list of millions.
Ah, by the way the version of cheecat works, but if you feed it negative numbers it tumbles from a division-by-zero–error.

For ex:
from math import * # for the program to understand what “floor” or “ceil” is. The functions aren’t build in by default
def is_int(x):
if floor(x)-x==0: #here you can use “ceil” instead of ""floor""
return True
else:
return False

I did the exact same. I thought that would be the best solution to the problem. It would take negatives and positive numbers no problem. I am not sure if I completely agree with the solution that they provide to be honest.

This also seemed like the obvious and simplest solution to me, I’d like to see if someone can comment on if/how this is not the case, or why the described answer was chosen.




 sixgunbuddyguy:

why the described answer was chosen.





 wiki-bot:

available through the math module we learned about earlier.


May have something to do with it.


Another take on n mod 1

>>> def is_int(x):
    try:
        return not (x % 1)
    except TypeError:
        return ""Not a Number""

>>> is_int('5')
'Not a Number'
>>> is_int(5)
True
>>> is_int(5.0)
True
>>> is_int(5.2)
False
>>> 




So while it works when only ints or floats are entered, it will hit an error when confronted with a string, or give a false positive with a bool.




 sixgunbuddyguy:

it will hit an error


No false positive. the type error is raised on any non-numeric inputs. The no-error return is purely numeric in nature and always correct.
We still should work out one of the prescribed solutions for the sake of due dilligence. ceil? or floor?  It’s pretty much the same as above, just with a different function.


by floor

>>> from math import floor
>>> def is_int(x):
    try:
        return not (x - floor(x))
    except TypeError:
        return ""Not a Number""

>>> is_int('5')
'Not a Number'
>>> is_int(5)
True
>>> is_int(5.0)
True
>>> is_int(5.2)
False
>>> 




The solution code here doesn’t seem to use the ceil() or floor() functions.
I understand it for the most part, but wanted to find out exactly what is being ask for the conditional “if and” statement. So it asks “if typeCount and absoluteCount - roundCount = 0:”, does this mean if both are true? But what is a true value for type?
def is_int_sol(x):
    absoluteCount = abs(x)
    typeCount = type(x)
    roundCount = round(absoluteCount)
    if typeCount and absoluteCount - roundCount == 0:
        return True
    else:
        return False





 databae:

absoluteCount = abs(x)


Integers are signed numbers from negative infinity to positive infinity. The abs() function has no place here.



 databae:

if typeCount and absoluteCount - roundCount == 0:


Fuzzy logic with little no meaning. We are not supposed to be using the type() function, for starters, and in a conditional, it will always be True since it returns an object (<class 'int'>).
if x - round(x) != 0:
    return False

That’s what I thought…this code came up and (a little annoyingly) replaced the code I had written for this exercise, when I requested the solution for a problem later on.

In my function, what I did was compare the number X as an integer minus the number X as floating, and if it gives 0.0 then it is True

It’s interesting to see how everyone else completed this exercise.
This worked fine with the given arguments,

def is_int(x):
if x - int(x) == 0:
return True
else:
return False

The given solution seems overly complex. Is there a reason for it?
please excuse my ignorance,
Thank you!




 waxmelly:

Is there a reason for it?


Because we asked to not use the int() constructor so have to come up with some other method.
Not sure I’ve ever seen the given solution. Does it use the round() function? Or does it use the modulo operator (%)?

This is what we’re given if we have the program fill in the solution.



 databae:

def is_int_sol(x): absoluteCount = abs(x) typeCount = type(x) roundCount = round(absoluteCount) if typeCount and absoluteCount - roundCount == 0: return True else: return False


On a side note, I double-checked my code replacing int() with ceil(), floor(), and round(). The logic remains the same, as do the results.

def is_int_sol(x): 
    absoluteCount = abs(x) 
    typeCount = type(x) 
    roundCount = round(absoluteCount) 
    if typeCount and absoluteCount - roundCount == 0: 
        return True
    else: 
        return False

If the objective was simplicity, it is lost on me; and, probably many learners, too.
A quick solution can be got using floor().
from math import floor

def is_int(x):
    return x - floor(x) == 0

We don’t need to worry about the signs. The floor of a negative number is still negative.
The converse is,
def is_float(x):
    return x - floor(x) > 0

floor always moves leftward on the number line. ceil always moves to the right. round moves both directions but we still do not need absolute().
return x - round(x) == 0    # is integer
return x - round(x) != 0    # is float

Using ceil is pretty much the same…
from math import ceil

def is_int(x):
    return ceil(x) - x == 0

The thing about this lesson I believe the author wanted was for learners to do a little research to find as many different ways to accomplish this task as one could.
Take for instance exception handling.  This one leverages the fact that floats cannot be interpreted as integer.
def is_int(x):
    try:
        return bin(x) and True
    except TypeError:
        return False

It smacks of using int() or type() but this will work…
return isinstance(x, int)

Cheap and dirty, anyway. My favorite is,
return not x % 1

No functions at work, at all. Just the logical not and the modulo operator. When the reader sees the not they know immediately that the return value is bool.
In my own view, this is not the naive solution and very rarely ever surfaces. I lean towards doubt when anyone posts this as their solution.
The simple truth (as I see it) is that a great many learners simply breeze through the lessons and not much sticks. When they get to the Practice Makes Perfect module it shows.

"
445,FAQ: Introduction to Data Science - Statistics,"FAQ,Python FAQ",,1,"

Community FAQs on Codecademy Exercises.jpeg1000×208 141 KB

This community-built FAQ covers the “Statistics” exercise from the lesson “Introduction to Data Science”.
Paths and Courses
This exercise can be found in the following Codecademy content:
Code Foundations
FAQs on the exercise Statistics


How does changing the mean and standard deviation affect descriptive and inferential statistics?

Join the Discussion. Help a fellow learner on their journey.
Ask or answer a question about this exercise by clicking reply () below!
Agree with a comment or answer? Like () to up-vote the contribution!
Need broader help or resources?  Head here.
Looking for motivation to keep learning? Join our wider discussions.
Learn more about how to use this guide.
Found a bug? Report it!
Have a question about your account or billing? Reach out to our customer support team!
None of the above?  Find out where to ask other questions here!
",
446,Why does my fizz_count return 1 instead of the correct answer?,"FAQ,Python FAQ",,5,"
Question
Why does my fizz_count return 1 instead of the correct answer?
Answer
Assuming the rest of your code is correct, the issue here is that your function returns too soon. If you put your return statement inside of your for loop, it can only possibly run one time.
Remember, a function exits immediately when it executes a return statement and returns whatever value is there. Take a look at the code snippets below:
total = 0
for item in my_list:
  if item == 2:
    total += 1
  return total  # return is indented to be inside of the for loop!

To fix this, return should be written on the same indentation level as the for loop so that it doesn’t execute it until the loop is done looping, like this:
total = 0
for item in my_list:
  if item == 2:
    total += 1
return total  # doesn’t return until AFTER the loop

","
Does anyone know why this is returning 3 and not 2? I’m totally confused how just by adding an or statement it seems to throw everything off.
Even when I changed by list items to [“fitz”, “yellow ftzz”, “pink frzy” ] while keeping everything else the same it still prints 3.
When I remove the or statement from the formula and just have  if item == “fizz”: it prints 1 as expected…
CODE:
def fizz_count(x):
count = 0
for item in x:
if item == “fizz” or “yellow fizz” :
count = count + 1
return count
type_fizz = [“fizz”, “yellow fizz”, “pink fizy” ]
winner = fizz_count(type_fizz)
print winner
CONSOLE
3



gist.github.com


https://gist.github.com/codecademydev/0038ef69ca03302f36b04e72401bdd34
script.py
# Write your function below!
def fizz_count(x):
  count = 0
  for item in x:
    if item == ""fizz"":
      count = count + 1
  return count 

type_fizz = [""fizz"", ""yellow"", ""pink"" ]
winner = fizz_count(type_fizz)
This file has been truncated. show original








or is an operator, not a statement. You can for example not put an if-statement in place of or
I suggest implementing or as a function yourself in order to make yourself consider what its behaviour is and how that is different from what you want. Or, indeed, consider what behaviour or would have to have in order to do what you want there. You can also consider what the order of operations is there, and you can print out results of individual operations (you have multiple operations there, perhaps you should be looking at them one at a time instead, separated from each other)
Or indeed, how does this behave?
5 == 5 + 3
(note its similar structure)
The bottom line here is that you wrote something in English. There shouldn’t be an expectation for it to be meaningful unless you can argue for it from what you know about the individual operations there, similar to:
is it half past noon?

Which also isn’t python
It’s slightly different, because your code does do something, but you haven’t got a good argument for that it does what you want just like how I don’t have an argument to that is it half past noon? would be valid python
As for what exactly it does do, that is something you can figure out by considering what behaviour or does have, and what will therefore happen

My above post is mostly about that there shouldn’t be an expectation for it to work, not so much about why that particular case is wrong.
The expectation is the real problem, the actual scenario itself is trivial, just a symptom.
Your expression:
item == ""fizz"" or ""yellow fizz""

Has to be evaluated in some order because there are two operators there. If you apply parenthesis and evaluate it in that order, you’ll find it won’t do what you want. Doesn’t even matter which order you pick, neither works.
 actual order:
(item == ""fizz"") or ""yellow fizz""

also wouldn't work though:
item == (""fizz"" or ""yellow fizz"")
"
447,Where can I find a list of all available built-in functions Python has?,"FAQ,Python FAQ",,2,"
Question
Where can I find a list of all available built-in functions Python has?
Answer
Python has a lot of useful built-in functions available for use! For a complete list of Python 2 built-in functions, check out their documentation page.
And if you’re curious about the differences, here is the same page for Python 3.
","
2 posts were split to a new topic: Using *args in a Function Definition
"
448,Will I be able to expand on this project on my own after I finish on Codecademy?,"FAQ,Python FAQ",,2,"
Question
Will I be able to expand on this project on my own after I finish on Codecademy?
Answer
Absolutely! Building on projects you made here with new skills you learn as you go is a great way to keep your skills sharp. Getting started on your own computer is something you’ll learn to do later in the Python course, and it may seem a bit foreign at the moment!
If you’re up for the challenge, take a look at our official guide to setting up Python on your own computer! If you run into trouble, it may make sense when you come back to it in the later lessons.
To continue building onto your projects, you could simply copy the code you have written here on Codecademy and paste it into your text editor of choice, like Sublime Text.
","
2 posts were split to a new topic: How to Navigate to a Previous Lesson?
"
449,How can I concatenate an argument and a string?,"FAQ,Python FAQ",,3,"
Question
How can I concatenate an argument and a string?
Answer
Arguments given to a function can be used like any other variable. Recall that we can concatenate a string and a variable like this: my_concatenated_string = ""HOLY "" + cow_string_var.
So all we need to do for this function is return parameter_name + ""the string it wants us to concatenate with it!"".
","
I am bit confused
Why its not
print string_function(s) and in the result there is no ‘s’ concatenated .
Can you explain this?




 java4967268828:

print string_function(s)


Note that s is written as a variable, not a string. We are given to assume that s has been given some assignment prior to this function call.
    def string_function(to_add):
        return ""String to concatenate with... "" + to_add

    s = ""Add me to the string!""
    print (string_function(s))
    # String to concatenate with... Add me to the string!

"
